[
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Gradient Anisotropic Diffusion denoising ",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "PATH": "/opt/qt/5.15.2/gcc_64/:/opt/rh/devtoolset-4/root/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/src/Slicer-build/Slicer-build/lib/Slicer-4.13/cli-modules"
      },
      "label": "Gradient Anisotropic Diffusion denoising",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "anisotropic-diffusion-denoising",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/anisotropic-diffusion-denoising",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/anisotropic-diffusion-denoising",
      "version": "0.2.0_4.13.0"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Gradient Anisotropic Diffusion denoising ",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "PATH": "/opt/qt/5.15.2/gcc_64/:/opt/rh/devtoolset-4/root/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/src/Slicer-build/Slicer-build/lib/Slicer-4.13/cli-modules"
      },
      "label": "Gradient Anisotropic Diffusion denoising",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "anisotropic-diffusion-denoising",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/anisotropic-diffusion-denoising",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/anisotropic-diffusion-denoising",
      "version": "0.1.1_4.13.0"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "This performs the registration of predefined atlases to a target image (fixed image) using the antsRegistration algorithm from the ANTs package. The base template from the atlas dataset will be registered to the fixed image provided by the user and the computed warping will be applied to transform all atlas derivative images (e.g. masks, priors) into the fixed image space.",
      "environment": {
        "ANTSPATH": "/opt/ants/bin/",
        "FLYWHEEL": "/flywheel/v0",
        "LANG": "C.UTF-8",
        "PATH": "/opt/ants/bin/:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PYTHON_VERSION": "3.8.11"
      },
      "label": "ANTs Atlas Registration",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "ants-atlas-registration",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/ants-atlas-registration",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/ants-atlas-registration",
      "version": "0.1.1"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "A reproducible evaluation of ANTs similarity metric performance in brain image registration: Avants BB, Tustison NJ, Song G, Cook PA, Klein A, Gee JC. Neuroimage, 2011. http://www.ncbi.nlm.nih.gov/pubmed/20851191",
      "command": "poetry run python run.py",
      "description": "ANTs based gear that run buildtemplateparallel.sh script and generate a template image by co-registering a set of inputs images",
      "environment": {
        "ANTSPATH": "/opt/ants/bin/",
        "FLYWHEEL": "/flywheel/v0",
        "PATH": "/opt/ants/bin/:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      },
      "label": "ANTs Build Template Parallel",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "ants-buildtemplateparallel",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/ants-buildtemplateparallel",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/ants-buildtemplateparallel",
      "version": "0.1.1_2.3.5"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "A Flywheel gear wrapping ANTs antsCorticalThickness.sh script. Within the antsCorticalThickness.sh pipeline, it performs bias correction using the N4 algorithm, segmentation using ANTs Atropos algorithm and cortical thickness calculation using these segmentations as input.",
      "environment": {
        "ANTSPATH": "/opt/ants/bin/",
        "FLYWHEEL": "/flywheel/v0",
        "LANG": "C.UTF-8",
        "PATH": "/opt/ants/bin/:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PYTHON_VERSION": "3.8.11"
      },
      "label": "ANTs DBM Cross Sectional",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "ants-dbm-cross-sectional",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/ants-dbm-cross-sectional",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/ants-dbm-cross-sectional",
      "version": "0.1.0_2.3.5"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "The ANTs Longitudinal Cortical Thickness Pipeline:Tustison, N. J., Holbrook, A. J., Avants, B. B., Roberts, J. M., Cook, P. A., Reagh, Z. M., Duda, J. T., Stone, J. R., Gillen, D. L., & Yassa, M. A., 2017. https://www.biorxiv.org/content/10.1101/170209v1",
      "command": "poetry run python run.py",
      "description": "ANTs based gear that run antsLongitudinalCorticalThickness.sh shell script and generate two zip archives that contains Single Subject Template and Time Point based template.",
      "environment": {
        "ANTSPATH": "/opt/ants/bin/",
        "ANTS_RANDOM_SEED": "42",
        "FLYWHEEL": "/flywheel/v0",
        "ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS": "42",
        "PATH": "/opt/ants/bin/:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      },
      "label": "ANTs DBM Longitudinal",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "ants-dbm-longitudinal",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/ants-dbm-longitudinal",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/ants-dbm-longitudinal",
      "version": "0.1.1_2.3.5"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python /flywheel/v0/run.py",
      "description": "A gear to perform ANTS registration using Nipype and RegistrationSynQuick",
      "environment": {
        "ANTSPATH": "/opt/ants/bin/",
        "DEBIAN_FRONTEND": "noninteractive",
        "FLYWHEEL": "/flywheel/v0",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "LANG": "C.UTF-8",
        "PATH": "/opt/ants/bin/:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PYTHON_GET_PIP_SHA256": "fa6f3fb93cce234cd4e8dd2beb54a51ab9c247653b52855a48dd44e6b21ff28b",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/c20b0cfd643cd4a19246ccf204e2997af70f6b21/public/get-pip.py",
        "PYTHON_PIP_VERSION": "21.2.3",
        "PYTHON_VERSION": "3.8.11",
        "workingDir": "/opt/ants"
      },
      "label": "Ants_RegistrationSynQuick using Nipype",
      "license": "Other",
      "maintainer": "support@flywheel.io",
      "name": "ants-registrationsynquick",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/ants-registrationsynquick",
      "url": "https://nipype.readthedocs.io/en/latest/api/generated/nipype.interfaces.ants.registration.html#registrationsynquick",
      "version": "0.1.3_2.3.5"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python /flywheel/v0/run.py",
      "description": "A gear to perform ANTS registration using Nipype and RegistrationSynQuick",
      "environment": {
        "ANTSPATH": "/opt/ants/bin/",
        "DEBIAN_FRONTEND": "noninteractive",
        "FLYWHEEL": "/flywheel/v0",
        "LANG": "C.UTF-8",
        "PATH": "/opt/ants/bin/:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PYTHON_GET_PIP_SHA256": "fa6f3fb93cce234cd4e8dd2beb54a51ab9c247653b52855a48dd44e6b21ff28b",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/c20b0cfd643cd4a19246ccf204e2997af70f6b21/public/get-pip.py",
        "PYTHON_PIP_VERSION": "21.2.3",
        "PYTHON_VERSION": "3.8.11",
        "workingDir": "/opt/ants"
      },
      "label": "Ants_RegistrationSynQuick using Nipype",
      "license": "Other",
      "maintainer": "support@flywheel.io",
      "name": "ants-registrationsynquick",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/ants-registrationsynquick",
      "url": "https://nipype.readthedocs.io/en/latest/api/generated/nipype.interfaces.ants.registration.html#registrationsynquick",
      "version": "0.1.2_2.3.5"
    }
  ],
  [
    {
      "author": "Bob Dougherty <bobd@stanford.edu>",
      "description": "Reorient NIfTI data and metadata fields into RAS space by estimating and applying a canonical transform.",
      "label": "Apply Canonical Transform",
      "license": "MIT",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "apply-canonical-xform",
      "source": "https://github.com/scitran-apps/apply-canonical-xform",
      "url": "https://github.com/vistalab/vistasoft/blob/master/fileFilters/nifti/niftiApplyCannonicalXform.m",
      "version": "0.1.0"
    }
  ],
  [
    {
      "author": "Poldrack lab, Stanford University",
      "cite": "see https://fmriprep.readthedocs.io/en/stable/citing.html",
      "command": "/flywheel/v0/run.sh",
      "description": "fMRIPrep 23.0.1 is a functional magnetic resonance imaging (fMRI) data preprocessing pipeline that is designed to provide an easily accessible, state-of-the-art interface that is robust to variations in scan acquisition protocols and that requires minimal user input, while providing easily interpretable and comprehensive error and output reporting. It performs basic processing steps (coregistration, normalization, unwarping, noise component extraction, segmentation, skullstripping etc.) providing outputs that can be easily submitted to a variety of group level analyses, including task-based or resting-state fMRI, graph theory measures, surface or volume-based statistics, etc.",
      "environment": {
        "AFNI_IMSAVE_WARNINGS": "NO",
        "AFNI_MODELPATH": "/usr/lib/afni/models",
        "AFNI_PLUGINPATH": "/usr/lib/afni/plugins",
        "AFNI_TTATLAS_DATASET": "/usr/share/afni/atlases",
        "ANTSPATH": "/usr/lib/ants",
        "AROMA_VERSION": "0.4.5",
        "CPATH": "/usr/local/miniconda/include/:",
        "FIX_VERTEX_AREA": "",
        "FLYWHEEL": "/flywheel/v0",
        "FREESURFER_HOME": "/opt/freesurfer",
        "FSF_OUTPUT_FORMAT": "nii.gz",
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "FSL_DIR": "/usr/share/fsl/5.0",
        "FS_OVERRIDE": "0",
        "FUNCTIONALS_DIR": "/opt/freesurfer/sessions",
        "HOME": "/home/fmriprep",
        "IS_DOCKER_8395080871": "1",
        "LANG": "C.UTF-8",
        "LC_ALL": "C.UTF-8",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0:",
        "LOCAL_DIR": "/opt/freesurfer/local",
        "MINC_BIN_DIR": "/opt/freesurfer/mni/bin",
        "MINC_LIB_DIR": "/opt/freesurfer/mni/lib",
        "MKL_NUM_THREADS": "1",
        "MNI_DATAPATH": "/opt/freesurfer/mni/data",
        "MNI_DIR": "/opt/freesurfer/mni",
        "MNI_PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "OMP_NUM_THREADS": "1",
        "OS": "Linux",
        "PATH": "/usr/local/miniconda/bin:/opt/ICA-AROMA:/usr/lib/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/opt/freesurfer/bin:/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "POSSUMDIR": "/usr/share/fsl/5.0",
        "PWD": "/flywheel/v0",
        "PYTHONNOUSERSITE": "1",
        "REQUESTS_CA_BUNDLE": "/etc/ssl/certs/ca-certificates.crt",
        "SUBJECTS_DIR": "/opt/freesurfer/subjects"
      },
      "label": "BIDS fMRIPrep: A Robust Preprocessing Pipeline for fMRI Data",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-fmriprep",
      "source": "https://github.com/nipreps/fmriprep",
      "url": "https://github.com/flywheel-apps/bids-fmriprep/blob/master/README.md",
      "version": "1.4.3_23.0.1"
    },
    {
      "author": "Poldrack lab, Stanford University",
      "cite": "see https://fmriprep.readthedocs.io/en/stable/citing.html",
      "command": "/flywheel/v0/run.sh",
      "description": "fMRIPrep 20.2.7 (Long-Term Support version) is a functional magnetic resonance imaging (fMRI) data preprocessing pipeline that is designed to provide an easily accessible, state-of-the-art interface that is robust to variations in scan acquisition protocols and that requires minimal user input, while providing easily interpretable and comprehensive error and output reporting. It performs basic processing steps (coregistration, normalization, unwarping, noise component extraction, segmentation, skullstripping etc.) providing outputs that can be easily submitted to a variety of group level analyses, including task-based or resting-state fMRI, graph theory measures, surface or volume-based statistics, etc.",
      "environment": {
        "AFNI_IMSAVE_WARNINGS": "NO",
        "AFNI_MODELPATH": "/usr/lib/afni/models",
        "AFNI_PLUGINPATH": "/usr/lib/afni/plugins",
        "AFNI_TTATLAS_DATASET": "/usr/share/afni/atlases",
        "ANTSPATH": "/usr/lib/ants",
        "AROMA_VERSION": "0.4.5",
        "CPATH": "/usr/local/miniconda/include/:",
        "FIX_VERTEX_AREA": "",
        "FLYWHEEL": "/flywheel/v0",
        "FREESURFER_HOME": "/opt/freesurfer",
        "FSF_OUTPUT_FORMAT": "nii.gz",
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "FSL_DIR": "/usr/share/fsl/5.0",
        "FS_OVERRIDE": "0",
        "FUNCTIONALS_DIR": "/opt/freesurfer/sessions",
        "HOME": "/home/fmriprep",
        "IS_DOCKER_8395080871": "1",
        "LANG": "C.UTF-8",
        "LC_ALL": "C.UTF-8",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0:",
        "LOCAL_DIR": "/opt/freesurfer/local",
        "MINC_BIN_DIR": "/opt/freesurfer/mni/bin",
        "MINC_LIB_DIR": "/opt/freesurfer/mni/lib",
        "MKL_NUM_THREADS": "1",
        "MNI_DATAPATH": "/opt/freesurfer/mni/data",
        "MNI_DIR": "/opt/freesurfer/mni",
        "MNI_PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "OMP_NUM_THREADS": "1",
        "OS": "Linux",
        "PATH": "/usr/local/miniconda/bin:/opt/ICA-AROMA:/usr/lib/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/opt/freesurfer/bin:/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "POSSUMDIR": "/usr/share/fsl/5.0",
        "PWD": "/flywheel/v0",
        "PYTHONNOUSERSITE": "1",
        "REQUESTS_CA_BUNDLE": "/etc/ssl/certs/ca-certificates.crt",
        "SUBJECTS_DIR": "/opt/freesurfer/subjects"
      },
      "label": "BIDS fMRIPrep: A Robust Preprocessing Pipeline for fMRI Data",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-fmriprep",
      "source": "https://github.com/nipreps/fmriprep",
      "url": "https://github.com/flywheel-apps/bids-fmriprep/blob/master/README.md",
      "version": "1.4.2_20.2.7"
    },
    {
      "author": "Poldrack lab, Stanford University",
      "cite": "see https://fmriprep.readthedocs.io/en/stable/citing.html",
      "command": "poetry run python run.py",
      "description": "fMRIPrep 21.0.1 (Long-Term Support version) is a functional magnetic resonance imaging (fMRI) data preprocessing pipeline that is designed to provide an easily accessible, state-of-the-art interface that is robust to variations in scan acquisition protocols and that requires minimal user input, while providing easily interpretable and comprehensive error and output reporting. It performs basic processing steps (coregistration, normalization, unwarping, noise component extraction, segmentation, skullstripping etc.) providing outputs that can be easily submitted to a variety of group level analyses, including task-based or resting-state fMRI, graph theory measures, surface or volume-based statistics, etc. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "AFNI_IMSAVE_WARNINGS": "NO",
        "AFNI_PLUGINPATH": "/opt/afni-latest",
        "ANTSPATH": "/opt/ants",
        "AROMA_VERSION": "0.4.5",
        "C3DPATH": "/opt/convert3d-1.0.0",
        "CONDA_DEFAULT_ENV": "base",
        "CONDA_EXE": "/opt/conda/bin/conda",
        "CONDA_PREFIX": "/opt/conda",
        "CONDA_PROMPT_MODIFIER": "(base)",
        "CONDA_PYTHON_EXE": "/opt/conda/bin/python",
        "CONDA_SHLVL": "1",
        "CPATH": "/opt/conda/include:",
        "DEBIAN_FRONTEND": "noninteractive",
        "FIX_VERTEX_AREA": "",
        "FLYWHEEL": "/flywheel/v0",
        "FREESURFER_HOME": "/opt/freesurfer",
        "FSF_OUTPUT_FORMAT": "nii.gz",
        "FSLDIR": "/opt/fsl-6.0.5.1",
        "FSLGECUDAQ": "cuda.q",
        "FSLMACHINELIST": "",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLREMOTECALL": "",
        "FSL_DIR": "/opt/fsl-6.0.5.1",
        "FS_OVERRIDE": "0",
        "FUNCTIONALS_DIR": "/opt/freesurfer/sessions",
        "GSETTINGS_SCHEMA_DIR": "/opt/conda/share/glib-2.0/schemas",
        "GSETTINGS_SCHEMA_DIR_CONDA_BACKUP": "",
        "HOME": "/home/fmriprep",
        "LANG": "C.UTF-8",
        "LC_ALL": "C.UTF-8",
        "LD_LIBRARY_PATH": "/usr/lib/x86_64-linux-gnu:/opt/conda/lib:/opt/workbench/lib_linux64:/opt/fsl-6.0.5.1/lib:",
        "LOCAL_DIR": "/opt/freesurfer/local",
        "MINC_BIN_DIR": "/opt/freesurfer/mni/bin",
        "MINC_LIB_DIR": "/opt/freesurfer/mni/lib",
        "MKL_NUM_THREADS": "1",
        "MNI_DATAPATH": "/opt/freesurfer/mni/data",
        "MNI_DIR": "/opt/freesurfer/mni",
        "MNI_PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "OMP_NUM_THREADS": "1",
        "OS": "Linux",
        "PATH": "/opt/conda/bin:/opt/conda/condabin:/opt/conda/bin:/opt/workbench/bin_linux64:/opt/ICA-AROMA:/opt/ants:/opt/afni-latest:/opt/convert3d-1.0.0/bin:/opt/fsl-6.0.5.1/bin:/opt/freesurfer/bin:/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "PROJ_LIB": "/opt/conda/share/proj",
        "PROJ_NETWORK": "ON",
        "PYTHONNOUSERSITE": "1",
        "PYTHONUNBUFFERED": "1",
        "REQUESTS_CA_BUNDLE": "/etc/ssl/certs/ca-certificates.crt",
        "SHLVL": "1",
        "SUBJECTS_DIR": "/opt/freesurfer/subjects",
        "TERM": "xterm",
        "_": "/bin/env",
        "_CE_CONDA": ""
      },
      "label": "BIDS fMRIPrep 21.0.1: A Robust Preprocessing Pipeline for fMRI Data",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-fmriprep",
      "source": "https://github.com/nipreps/fmriprep",
      "url": "https://github.com/flywheel-apps/bids-fmriprep/blob/master/README.md",
      "version": "1.3.2_21.0.1"
    },
    {
      "author": "Poldrack lab, Stanford University",
      "cite": "see https://fmriprep.readthedocs.io/en/stable/citing.html",
      "command": "poetry run python run.py",
      "description": "fMRIPrep 21.0.1 (Long-Term Support version) is a functional magnetic resonance imaging (fMRI) data preprocessing pipeline that is designed to provide an easily accessible, state-of-the-art interface that is robust to variations in scan acquisition protocols and that requires minimal user input, while providing easily interpretable and comprehensive error and output reporting. It performs basic processing steps (coregistration, normalization, unwarping, noise component extraction, segmentation, skullstripping etc.) providing outputs that can be easily submitted to a variety of group level analyses, including task-based or resting-state fMRI, graph theory measures, surface or volume-based statistics, etc. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "AFNI_IMSAVE_WARNINGS": "NO",
        "AFNI_PLUGINPATH": "/opt/afni-latest",
        "ANTSPATH": "/opt/ants",
        "AROMA_VERSION": "0.4.5",
        "C3DPATH": "/opt/convert3d-1.0.0",
        "CONDA_DEFAULT_ENV": "base",
        "CONDA_EXE": "/opt/conda/bin/conda",
        "CONDA_PREFIX": "/opt/conda",
        "CONDA_PROMPT_MODIFIER": "(base)",
        "CONDA_PYTHON_EXE": "/opt/conda/bin/python",
        "CONDA_SHLVL": "1",
        "CPATH": "/opt/conda/include:",
        "DEBIAN_FRONTEND": "noninteractive",
        "FIX_VERTEX_AREA": "",
        "FLYWHEEL": "/flywheel/v0",
        "FREESURFER_HOME": "/opt/freesurfer",
        "FSF_OUTPUT_FORMAT": "nii.gz",
        "FSLDIR": "/opt/fsl-6.0.5.1",
        "FSLGECUDAQ": "cuda.q",
        "FSLMACHINELIST": "",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLREMOTECALL": "",
        "FSL_DIR": "/opt/fsl-6.0.5.1",
        "FS_OVERRIDE": "0",
        "FUNCTIONALS_DIR": "/opt/freesurfer/sessions",
        "GSETTINGS_SCHEMA_DIR": "/opt/conda/share/glib-2.0/schemas",
        "GSETTINGS_SCHEMA_DIR_CONDA_BACKUP": "",
        "HOME": "/home/fmriprep",
        "LANG": "C.UTF-8",
        "LC_ALL": "C.UTF-8",
        "LD_LIBRARY_PATH": "/usr/lib/x86_64-linux-gnu:/opt/conda/lib:/opt/workbench/lib_linux64:/opt/fsl-6.0.5.1/lib:",
        "LOCAL_DIR": "/opt/freesurfer/local",
        "MINC_BIN_DIR": "/opt/freesurfer/mni/bin",
        "MINC_LIB_DIR": "/opt/freesurfer/mni/lib",
        "MKL_NUM_THREADS": "1",
        "MNI_DATAPATH": "/opt/freesurfer/mni/data",
        "MNI_DIR": "/opt/freesurfer/mni",
        "MNI_PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "OMP_NUM_THREADS": "1",
        "OS": "Linux",
        "PATH": "/opt/conda/bin:/opt/conda/condabin:/opt/conda/bin:/opt/workbench/bin_linux64:/opt/ICA-AROMA:/opt/ants:/opt/afni-latest:/opt/convert3d-1.0.0/bin:/opt/fsl-6.0.5.1/bin:/opt/freesurfer/bin:/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "PROJ_LIB": "/opt/conda/share/proj",
        "PROJ_NETWORK": "ON",
        "PYTHONNOUSERSITE": "1",
        "PYTHONUNBUFFERED": "1",
        "REQUESTS_CA_BUNDLE": "/etc/ssl/certs/ca-certificates.crt",
        "SHLVL": "1",
        "SUBJECTS_DIR": "/opt/freesurfer/subjects",
        "TERM": "xterm",
        "_": "/bin/env",
        "_CE_CONDA": ""
      },
      "label": "BIDS fMRIPrep 12.0.1: A Robust Preprocessing Pipeline for fMRI Data",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-fmriprep",
      "source": "https://github.com/nipreps/fmriprep",
      "url": "https://github.com/flywheel-apps/bids-fmriprep/blob/master/README.md",
      "version": "1.3.1_21.0.1"
    },
    {
      "author": "Poldrack lab, Stanford University",
      "cite": "see https://fmriprep.readthedocs.io/en/stable/citing.html",
      "command": "python run.py",
      "description": "fMRIPrep 20.2.6 (Long-Term Support version) is a functional magnetic resonance imaging (fMRI) data preprocessing pipeline that is designed to provide an easily accessible, state-of-the-art interface that is robust to variations in scan acquisition protocols and that requires minimal user input, while providing easily interpretable and comprehensive error and output reporting. It performs basic processing steps (coregistration, normalization, unwarping, noise component extraction, segmentation, skullstripping etc.) providing outputs that can be easily submitted to a variety of group level analyses, including task-based or resting-state fMRI, graph theory measures, surface or volume-based statistics, etc. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "PATH": "/usr/local/miniconda/bin:/opt/ICA-AROMA:/usr/lib/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/opt/freesurfer/bin:/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "REQUESTS_CA_BUNDLE": "/etc/ssl/certs/ca-certificates.crt"
      },
      "label": "BIDS fMRIPrep: A Robust Preprocessing Pipeline for fMRI Data",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-fmriprep",
      "source": "https://github.com/nipreps/fmriprep",
      "url": "https://github.com/flywheel-apps/bids-fmriprep/blob/master/README.md",
      "version": "1.2.8_20.2.6"
    },
    {
      "author": "Poldrack lab, Stanford University",
      "cite": "see https://fmriprep.readthedocs.io/en/stable/citing.html",
      "command": "python run.py",
      "description": "fMRIPrep 20.2.6 (Long-Term Support version) is a functional magnetic resonance imaging (fMRI) data preprocessing pipeline that is designed to provide an easily accessible, state-of-the-art interface that is robust to variations in scan acquisition protocols and that requires minimal user input, while providing easily interpretable and comprehensive error and output reporting. It performs basic processing steps (coregistration, normalization, unwarping, noise component extraction, segmentation, skullstripping etc.) providing outputs that can be easily submitted to a variety of group level analyses, including task-based or resting-state fMRI, graph theory measures, surface or volume-based statistics, etc. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "PATH": "/usr/local/miniconda/bin:/opt/ICA-AROMA:/usr/lib/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/opt/freesurfer/bin:/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "REQUESTS_CA_BUNDLE": "/etc/ssl/certs/ca-certificates.crt"
      },
      "label": "BIDS fMRIPrep: A Robust Preprocessing Pipeline for fMRI Data",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-fmriprep",
      "source": "https://github.com/nipreps/fmriprep",
      "url": "https://github.com/flywheel-apps/bids-fmriprep/blob/master/README.md",
      "version": "1.2.4_20.2.6"
    },
    {
      "author": "Poldrack lab, Stanford University",
      "cite": "see https://fmriprep.readthedocs.io/en/stable/citing.html",
      "command": "python run.py",
      "description": "fMRIPrep 20.2.6 (Long-Term Support version) is a functional magnetic resonance imaging (fMRI) data preprocessing pipeline that is designed to provide an easily accessible, state-of-the-art interface that is robust to variations in scan acquisition protocols and that requires minimal user input, while providing easily interpretable and comprehensive error and output reporting. It performs basic processing steps (coregistration, normalization, unwarping, noise component extraction, segmentation, skullstripping etc.) providing outputs that can be easily submitted to a variety of group level analyses, including task-based or resting-state fMRI, graph theory measures, surface or volume-based statistics, etc. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "PATH": "/usr/local/miniconda/bin:/opt/ICA-AROMA:/usr/lib/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/opt/freesurfer/bin:/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "REQUESTS_CA_BUNDLE": "/etc/ssl/certs/ca-certificates.crt"
      },
      "label": "BIDS fMRIPrep: A Robust Preprocessing Pipeline for fMRI Data",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-fmriprep",
      "source": "https://github.com/nipreps/fmriprep",
      "url": "https://github.com/flywheel-apps/bids-fmriprep/blob/master/README.md",
      "version": "1.2.3_20.2.6"
    },
    {
      "author": "Poldrack lab, Stanford University",
      "cite": "see https://fmriprep.readthedocs.io/en/stable/citing.html",
      "command": "python run.py",
      "description": "fMRIPrep 20.2.6 (Long-Term Support version) is a functional magnetic resonance imaging (fMRI) data preprocessing pipeline that is designed to provide an easily accessible, state-of-the-art interface that is robust to variations in scan acquisition protocols and that requires minimal user input, while providing easily interpretable and comprehensive error and output reporting. It performs basic processing steps (coregistration, normalization, unwarping, noise component extraction, segmentation, skullstripping etc.) providing outputs that can be easily submitted to a variety of group level analyses, including task-based or resting-state fMRI, graph theory measures, surface or volume-based statistics, etc. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "PATH": "/usr/local/miniconda/bin:/opt/ICA-AROMA:/usr/lib/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/opt/freesurfer/bin:/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "REQUESTS_CA_BUNDLE": "/etc/ssl/certs/ca-certificates.crt"
      },
      "label": "BIDS fMRIPrep: A Robust Preprocessing Pipeline for fMRI Data",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-fmriprep",
      "source": "https://github.com/nipreps/fmriprep",
      "url": "https://github.com/flywheel-apps/bids-fmriprep/blob/master/README.md",
      "version": "1.2.2_20.2.6"
    },
    {
      "author": "Poldrack lab, Stanford University",
      "cite": "see https://fmriprep.readthedocs.io/en/stable/citing.html",
      "command": "python run.py",
      "description": "fMRIPrep 20.2.6 (Long-Term Support version) is a functional magnetic resonance imaging (fMRI) data preprocessing pipeline that is designed to provide an easily accessible, state-of-the-art interface that is robust to variations in scan acquisition protocols and that requires minimal user input, while providing easily interpretable and comprehensive error and output reporting. It performs basic processing steps (coregistration, normalization, unwarping, noise component extraction, segmentation, skullstripping etc.) providing outputs that can be easily submitted to a variety of group level analyses, including task-based or resting-state fMRI, graph theory measures, surface or volume-based statistics, etc. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "PATH": "/usr/local/miniconda/bin:/opt/ICA-AROMA:/usr/lib/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/opt/freesurfer/bin:/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "REQUESTS_CA_BUNDLE": "/etc/ssl/certs/ca-certificates.crt"
      },
      "label": "BIDS fMRIPrep: A Robust Preprocessing Pipeline for fMRI Data",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-fmriprep",
      "source": "https://github.com/nipreps/fmriprep",
      "url": "https://github.com/flywheel-apps/bids-fmriprep/blob/master/README.md",
      "version": "1.2.1_20.2.6"
    },
    {
      "author": "Poldrack lab, Stanford University",
      "cite": "see https://fmriprep.readthedocs.io/en/stable/citing.html",
      "command": "python run.py",
      "description": "fMRIPrep 20.2.4 (Long-Term Support version) is a functional magnetic resonance imaging (fMRI) data preprocessing pipeline that is designed to provide an easily accessible, state-of-the-art interface that is robust to variations in scan acquisition protocols and that requires minimal user input, while providing easily interpretable and comprehensive error and output reporting. It performs basic processing steps (coregistration, normalization, unwarping, noise component extraction, segmentation, skullstripping etc.) providing outputs that can be easily submitted to a variety of group level analyses, including task-based or resting-state fMRI, graph theory measures, surface or volume-based statistics, etc. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "PATH": "/usr/local/miniconda/bin:/opt/ICA-AROMA:/usr/lib/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/opt/freesurfer/bin:/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "REQUESTS_CA_BUNDLE": "/etc/ssl/certs/ca-certificates.crt"
      },
      "label": "BIDS fMRIPrep: A Robust Preprocessing Pipeline for fMRI Data",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-fmriprep",
      "source": "https://github.com/nipreps/fmriprep",
      "url": "https://github.com/flywheel-apps/bids-fmriprep/blob/master/README.md",
      "version": "1.2.0_20.2.4"
    },
    {
      "author": "Poldrack lab, Stanford University",
      "cite": "see https://fmriprep.readthedocs.io/en/stable/citing.html",
      "command": "python run.py",
      "description": "fMRIPrep 20.2.0 (September 28, 2020) is a functional magnetic resonance imaging (fMRI) data preprocessing pipeline that is designed to provide an easily accessible, state-of-the-art interface that is robust to variations in scan acquisition protocols and that requires minimal user input, while providing easily interpretable and comprehensive error and output reporting. It performs basic processing steps (coregistration, normalization, unwarping, noise component extraction, segmentation, skullstripping etc.) providing outputs that can be easily submitted to a variety of group level analyses, including task-based or resting-state fMRI, graph theory measures, surface or volume-based statistics, etc. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "PATH": "/usr/local/miniconda/bin:/opt/ICA-AROMA:/usr/lib/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/opt/freesurfer/bin:/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PYTHONUNBUFFERED": "1"
      },
      "label": "BIDS fMRIPrep: A Robust Preprocessing Pipeline for fMRI Data",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-fmriprep",
      "source": "https://github.com/flywheel-apps/bids-fmriprep",
      "url": "https://github.com/flywheel-apps/bids-fmriprep/blob/master/README.md",
      "version": "1.1.9_20.2.0"
    },
    {
      "author": "Poldrack lab, Stanford University",
      "cite": "see https://fmriprep.readthedocs.io/en/stable/citing.html",
      "command": "python run.py",
      "description": "fMRIPrep 20.2.4 (Long-Term Support version) is a functional magnetic resonance imaging (fMRI) data preprocessing pipeline that is designed to provide an easily accessible, state-of-the-art interface that is robust to variations in scan acquisition protocols and that requires minimal user input, while providing easily interpretable and comprehensive error and output reporting. It performs basic processing steps (coregistration, normalization, unwarping, noise component extraction, segmentation, skullstripping etc.) providing outputs that can be easily submitted to a variety of group level analyses, including task-based or resting-state fMRI, graph theory measures, surface or volume-based statistics, etc. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "PATH": "/usr/local/miniconda/bin:/opt/ICA-AROMA:/usr/lib/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/opt/freesurfer/bin:/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "REQUESTS_CA_BUNDLE": "/etc/ssl/certs/ca-certificates.crt"
      },
      "label": "BIDS fMRIPrep: A Robust Preprocessing Pipeline for fMRI Data",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-fmriprep",
      "source": "https://github.com/nipreps/fmriprep",
      "url": "https://github.com/flywheel-apps/bids-fmriprep/blob/master/README.md",
      "version": "1.1.22_20.2.4"
    },
    {
      "author": "Poldrack lab, Stanford University",
      "cite": "see https://fmriprep.readthedocs.io/en/stable/citing.html",
      "command": "python run.py",
      "description": "fMRIPrep 20.2.1 (Long-Term Support version, November 6, 2020) is a functional magnetic resonance imaging (fMRI) data preprocessing pipeline that is designed to provide an easily accessible, state-of-the-art interface that is robust to variations in scan acquisition protocols and that requires minimal user input, while providing easily interpretable and comprehensive error and output reporting. It performs basic processing steps (coregistration, normalization, unwarping, noise component extraction, segmentation, skullstripping etc.) providing outputs that can be easily submitted to a variety of group level analyses, including task-based or resting-state fMRI, graph theory measures, surface or volume-based statistics, etc. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "PATH": "/usr/local/miniconda/bin:/opt/ICA-AROMA:/usr/lib/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/opt/freesurfer/bin:/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PYTHONUNBUFFERED": "1"
      },
      "label": "BIDS fMRIPrep: A Robust Preprocessing Pipeline for fMRI Data",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-fmriprep",
      "source": "https://github.com/nipreps/fmriprep",
      "url": "https://github.com/flywheel-apps/bids-fmriprep/blob/master/README.md",
      "version": "1.1.16_20.2.1"
    },
    {
      "author": "Poldrack lab, Stanford University",
      "cite": "see https://fmriprep.readthedocs.io/en/stable/citing.html",
      "command": "python run.py",
      "description": "fMRIPrep (1.5.2 December 2, 2019) is a functional magnetic resonance imaging (fMRI) data preprocessing pipeline that is designed to provide an easily accessible, state-of-the-art interface that is robust to variations in scan acquisition protocols and that requires minimal user input, while providing easily interpretable and comprehensive error and output reporting. It performs basic processing steps (coregistration, normalization, unwarping, noise component extraction, segmentation, skullstripping etc.) providing outputs that can be easily submitted to a variety of group level analyses, including task-based or resting-state fMRI, graph theory measures, surface or volume-based statistics, etc. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "PATH": "/usr/local/miniconda/bin:/opt/ICA-AROMA:/usr/lib/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/opt/freesurfer/bin:/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PYTHONUNBUFFERED": "1"
      },
      "label": "BIDS fMRIPrep: A Robust Preprocessing Pipeline for fMRI Data",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-fmriprep",
      "source": "https://github.com/flywheel-apps/bids-fmriprep",
      "url": "https://github.com/flywheel-apps/bids-fmriprep/blob/master/README.md",
      "version": "1.0.3_1.5.2"
    },
    {
      "author": "Poldrack lab, Stanford University",
      "cite": "see https://fmriprep.readthedocs.io/en/stable/citing.html",
      "command": "python run.py",
      "description": "fMRIPrep (1.5.10 April 16, 2020) is a functional magnetic resonance imaging (fMRI) data preprocessing pipeline that is designed to provide an easily accessible, state-of-the-art interface that is robust to variations in scan acquisition protocols and that requires minimal user input, while providing easily interpretable and comprehensive error and output reporting. It performs basic processing steps (coregistration, normalization, unwarping, noise component extraction, segmentation, skullstripping etc.) providing outputs that can be easily submitted to a variety of group level analyses, including task-based or resting-state fMRI, graph theory measures, surface or volume-based statistics, etc. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "PATH": "/usr/local/miniconda/bin:/opt/ICA-AROMA:/usr/lib/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/opt/freesurfer/bin:/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PYTHONUNBUFFERED": "1"
      },
      "label": "BIDS fMRIPrep: A Robust Preprocessing Pipeline for fMRI Data",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-fmriprep",
      "source": "https://github.com/flywheel-apps/bids-fmriprep",
      "url": "https://github.com/flywheel-apps/bids-fmriprep/blob/master/README.md",
      "version": "1.0.12_1.5.10"
    },
    {
      "author": "Poldrack lab, Stanford University",
      "cite": "see https://fmriprep.readthedocs.io/en/stable/citing.html",
      "command": "python run.py",
      "description": "fMRIPrep (1.5.9 Feb. 15, 2020) is a functional magnetic resonance imaging (fMRI) data preprocessing pipeline that is designed to provide an easily accessible, state-of-the-art interface that is robust to variations in scan acquisition protocols and that requires minimal user input, while providing easily interpretable and comprehensive error and output reporting. It performs basic processing steps (coregistration, normalization, unwarping, noise component extraction, segmentation, skullstripping etc.) providing outputs that can be easily submitted to a variety of group level analyses, including task-based or resting-state fMRI, graph theory measures, surface or volume-based statistics, etc. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "PATH": "/usr/local/miniconda/bin:/opt/ICA-AROMA:/usr/lib/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/opt/freesurfer/bin:/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PYTHONUNBUFFERED": "1"
      },
      "label": "BIDS fMRIPrep: A Robust Preprocessing Pipeline for fMRI Data",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-fmriprep",
      "source": "https://github.com/flywheel-apps/bids-fmriprep",
      "url": "https://github.com/flywheel-apps/bids-fmriprep/blob/master/README.md",
      "version": "1.0.11_1.5.9"
    }
  ],
  [
    {
      "author": "http://surfer.nmr.mgh.harvard.edu/",
      "cite": "https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferMethodsCitation",
      "command": "/usr/local/miniconda/bin/python3 run.py",
      "description": "BIDS-Apps/Freesurfer (6.0.1-5) This app implements surface reconstruction using Freesurfer. It reconstructs the surface for each subject individually and then creates a study specific template. In case there are multiple sessions the Freesurfer longitudinal pipeline is used (creating subject specific templates) unless instructed to combine data across sessions.  The current Freesurfer version is based on: freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.0.tar.gz. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "PATH": "PATH=/usr/local/miniconda/bin:/opt/freesurfer/bin:/opt/freesurfer/fsfast/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PYTHONUNBUFFERED": "1"
      },
      "label": "BIDS Freesurfer: Freesurfer recon-all BIDS App",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-freesurfer",
      "source": "https://github.com/flywheel-apps/bids-freesurfer",
      "url": "https://github.com/BIDS-Apps/freesurfer",
      "version": "1.0.4_6.0.1-5"
    },
    {
      "author": "http://surfer.nmr.mgh.harvard.edu/",
      "cite": "https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferMethodsCitation",
      "command": "/usr/local/miniconda/bin/python3 run.py",
      "description": "BIDS-Apps/Freesurfer (6.0.1-5) This app implements surface reconstruction using Freesurfer. It reconstructs the surface for each subject individually and then creates a study specific template. In case there are multiple sessions the Freesurfer longitudinal pipeline is used (creating subject specific templates) unless instructed to combine data across sessions.  The current Freesurfer version is based on: freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.0.tar.gz. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "PATH": "PATH=/usr/local/miniconda/bin:/opt/freesurfer/bin:/opt/freesurfer/fsfast/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PYTHONUNBUFFERED": "1"
      },
      "label": "BIDS Freesurfer: Freesurfer recon-all BIDS App",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-freesurfer",
      "source": "https://github.com/flywheel-apps/bids-freesurfer",
      "url": "https://github.com/BIDS-Apps/freesurfer",
      "version": "1.0.1_6.0.1-5"
    }
  ],
  [
    {
      "author": "Human Connectome Project",
      "cite": "Glasser M. F., Sotiropoulos S. N., Wilson J. A., Coalson T. S., Fischl B., Andersson J. L., ... Consortium, W. U.-M. H. (2013). The minimal preprocessing pipelines for the Human Connectome Project. NeuroImage, 80, 105-124.",
      "command": "/flywheel/v0/run.py",
      "description": "Runs the preprocessing steps of the Human Connectome Project Minimal Preprocessing Pipeline, described in Glasser et al. 2013. Currently this includes v4.3.0 release of PreFreeSurfer, FreeSurfer, and PostFreeSurfer pipelines. This Gear also generates some helpful QC images. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "CARET7DIR": "/opt/workbench/bin_linux64",
        "DEBIAN_FRONTEND": "noninteractive",
        "FLYWHEEL": "/flywheel/v0",
        "FMRI_ANALYSIS_DIR": "/opt/freesurfer/fsfast",
        "FREESURFER_HOME": "/opt/freesurfer",
        "FSFAST_HOME": "/opt/freesurfer/fsfast",
        "FSF_OUTPUT_FORMAT": "nii.gz",
        "FSLDIR": "/usr/share/fsl",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "FSL_DIR": "/usr/share/fsl",
        "FSL_PYTHON": "/usr/share/fsl/fslpython/envs/fslpython",
        "FS_OVERRIDE": "0",
        "HCPPIPEDIR": "/opt/HCP-Pipelines",
        "HCPPIPEDIR_Bin": "/opt/HCP-Pipelines/global/binaries",
        "HCPPIPEDIR_Config": "/opt/HCP-Pipelines/global/config",
        "HCPPIPEDIR_FS": "/opt/HCP-Pipelines/FreeSurfer/scripts",
        "HCPPIPEDIR_Global": "/opt/HCP-Pipelines/global/scripts",
        "HCPPIPEDIR_PostFS": "/opt/HCP-Pipelines/PostFreeSurfer/scripts",
        "HCPPIPEDIR_PreFS": "/opt/HCP-Pipelines/PreFreeSurfer/scripts",
        "HCPPIPEDIR_Templates": "/opt/HCP-Pipelines/global/templates",
        "HCPPIPEDIR_dMRI": "/opt/HCP-Pipelines/DiffusionPreprocessing/scripts",
        "HCPPIPEDIR_dMRITract": "/opt/HCP-Pipelines/DiffusionTractography/scripts",
        "HCPPIPEDIR_fMRISurf": "/opt/HCP-Pipelines/fMRISurface/scripts",
        "HCPPIPEDIR_fMRIVol": "/opt/HCP-Pipelines/fMRIVolume/scripts",
        "HCPPIPEDIR_tfMRI": "/opt/HCP-Pipelines/tfMRI/scripts",
        "HCPPIPEDIR_tfMRIAnalysis": "/opt/HCP-Pipelines/TaskfMRIAnalysis/scripts",
        "LANGUAGE": "C",
        "LC_ALL": "C",
        "LD_LIBRARY_PATH": "/usr/share/fsl/lib:",
        "LOCAL_DIR": "/opt/freesurfer/local",
        "MINC_BIN_DIR": "/opt/freesurfer/mni/bin",
        "MINC_LIB_DIR": "/opt/freesurfer/mni/lib",
        "MNI_DATAPATH": "/opt/freesurfer/mni/data",
        "MNI_DIR": "/opt/freesurfer/mni",
        "MNI_PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "MSMBINDIR": "/opt/HCP-Pipelines/MSMBinaries",
        "MSMBin": "/opt/HCP-Pipelines/MSMBinaries",
        "MSMCONFIGDIR": "/opt/HCP-Pipelines/MSMConfig",
        "OS": "Linux",
        "PATH": "/opt/poetry/bin:/opt/venv/bin:/opt/freesurfer/bin:/opt/freesurfer/fsfast/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/workbench/bin_linux64:/usr/share/fsl/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_NO_INTERACTION": "1",
        "POETRY_VERSION": "1.1.6",
        "POSSUMDIR": "/usr/share/fsl",
        "PYTHONUNBUFFERED": "1",
        "REQUESTS_CA_BUNDLE": "/etc/ssl/certs/ca-certificates.crt",
        "SUBJECTS_DIR": "/opt/freesurfer/subjects",
        "TZ": "America/New_York",
        "VIRTUAL_ENV": "/opt/venv",
        "python3": "/opt/venv/bin/python3.9"
      },
      "label": "BIDS-HCP Preprocessing Pipeline",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-hcp",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/bids-hcp",
      "url": "https://github.com/Washington-University/Pipelines",
      "version": "1.2.6_4.3.0"
    },
    {
      "author": "Human Connectome Project",
      "cite": "Glasser M. F., Sotiropoulos S. N., Wilson J. A., Coalson T. S., Fischl B., Andersson J. L., … Consortium, W. U.-M. H. (2013). The minimal preprocessing pipelines for the Human Connectome Project. NeuroImage, 80, 105–124.",
      "command": "/flywheel/v0/run.py",
      "description": "Runs the preprocessing steps of the Human Connectome Project Minimal Preprocessing Pipeline, described in Glasser et al. 2013. Currently this includes v4.3.0 release of PreFreeSurfer, FreeSurfer, and PostFreeSurfer pipelines. This Gear also generates some helpful QC images. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "CARET7DIR": "/opt/workbench/bin_linux64",
        "FLYWHEEL": "/flywheel/v0",
        "FMRI_ANALYSIS_DIR": "/opt/freesurfer/fsfast",
        "FREESURFER_HOME": "/opt/freesurfer",
        "FSFAST_HOME": "/opt/freesurfer/fsfast",
        "FSF_OUTPUT_FORMAT": "nii.gz",
        "FSLDIR": "/usr/share/fsl",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "FSL_DIR": "/usr/share/fsl",
        "FSL_PYTHON": "${FSLDIR}/fslpython/envs/fslpython",
        "FS_OVERRIDE": "0",
        "HCPPIPEDIR": "/opt/HCP-Pipelines",
        "HCPPIPEDIR_Bin": "/opt/HCP-Pipelines/global/binaries",
        "HCPPIPEDIR_Config": "/opt/HCP-Pipelines/global/config",
        "HCPPIPEDIR_FS": "/opt/HCP-Pipelines/FreeSurfer/scripts",
        "HCPPIPEDIR_Global": "/opt/HCP-Pipelines/global/scripts",
        "HCPPIPEDIR_PostFS": "/opt/HCP-Pipelines/PostFreeSurfer/scripts",
        "HCPPIPEDIR_PreFS": "/opt/HCP-Pipelines/PreFreeSurfer/scripts",
        "HCPPIPEDIR_Templates": "/opt/HCP-Pipelines/global/templates",
        "HCPPIPEDIR_dMRI": "/opt/HCP-Pipelines/DiffusionPreprocessing/scripts",
        "HCPPIPEDIR_dMRITract": "/opt/HCP-Pipelines/DiffusionTractography/scripts",
        "HCPPIPEDIR_fMRIVol": "/opt/HCP-Pipelines/fMRIVolume/scripts",
        "HCPPIPEDIR_tfMRI": "/opt/HCP-Pipelines/tfMRI/scripts",
        "HCPPIPEDIR_tfMRIAnalysis": "/opt/HCP-Pipelines/TaskfMRIAnalysis/scripts",
        "LD_LIBRARY_PATH": "/usr/share/fsl/lib:/usr/share/fsl/lib",
        "LOCAL_DIR": "/opt/freesurfer/local",
        "MINC_BIN_DIR": "/opt/freesurfer/mni/bin",
        "MINC_LIB_DIR": "/opt/freesurfer/mni/lib",
        "MNI_DATAPATH": "/opt/freesurfer/mni/data",
        "MNI_DIR": "/opt/freesurfer/mni",
        "MNI_PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "MSMBINDIR": "/opt/HCP-Pipelines/MSMBinaries",
        "MSMBin": "/opt/HCP-Pipelines/MSMBinaries",
        "MSMCONFIGDIR": "/opt/HCP-Pipelines/MSMConfig",
        "PATH": "/opt/poetry/bin:/opt/workbench/bin_linux64:/opt/venv/bin:/opt/freesurfer/bin:/opt/freesurfer/fsfast/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/share/fsl/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin",
        "PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "POETRY_HOME": "/opt/poetry",
        "POSSUMDIR": "/usr/share/fsl",
        "REQUESTS_CA_BUNDLE": "/etc/ssl/certs/ca-certificates.crt",
        "SUBJECTS_DIR": "/opt/freesurfer/subjects",
        "WORKBENCH": "/opt/workbench/wb_command",
        "python3": "/opt/venv/bin/python3.9"
      },
      "label": "BIDS-HCP Preprocessing Pipeline",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-hcp",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/bids-hcp",
      "url": "https://github.com/Washington-University/Pipelines",
      "version": "1.2.5_4.3.0_rc1"
    },
    {
      "author": "Human Connectome Project",
      "cite": "Glasser M. F., Sotiropoulos S. N., Wilson J. A., Coalson T. S., Fischl B., Andersson J. L., … Consortium, W. U.-M. H. (2013). The minimal preprocessing pipelines for the Human Connectome Project. NeuroImage, 80, 105–124.",
      "command": "/flywheel/v0/run.py",
      "description": "Runs the preprocessing steps of the Human Connectome Project Minimal Preprocessing Pipeline, described in Glasser et al. 2013. Currently this includes v4.3.0 release of PreFreeSurfer, FreeSurfer, and PostFreeSurfer pipelines. This Gear also generates some helpful QC images. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "CARET7DIR": "/opt/workbench/bin_linux64",
        "FLYWHEEL": "/flywheel/v0",
        "FMRI_ANALYSIS_DIR": "/opt/freesurfer/fsfast",
        "FREESURFER_HOME": "/opt/freesurfer",
        "FSFAST_HOME": "/opt/freesurfer/fsfast",
        "FSF_OUTPUT_FORMAT": "nii.gz",
        "FSLDIR": "/usr/share/fsl",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "FSL_DIR": "/usr/share/fsl",
        "FSL_PYTHON": "${FSLDIR}/fslpython/envs/fslpython",
        "FS_OVERRIDE": "0",
        "HCPPIPEDIR": "/opt/HCP-Pipelines",
        "HCPPIPEDIR_Bin": "/opt/HCP-Pipelines/global/binaries",
        "HCPPIPEDIR_Config": "/opt/HCP-Pipelines/global/config",
        "HCPPIPEDIR_FS": "/opt/HCP-Pipelines/FreeSurfer/scripts",
        "HCPPIPEDIR_Global": "/opt/HCP-Pipelines/global/scripts",
        "HCPPIPEDIR_PostFS": "/opt/HCP-Pipelines/PostFreeSurfer/scripts",
        "HCPPIPEDIR_PreFS": "/opt/HCP-Pipelines/PreFreeSurfer/scripts",
        "HCPPIPEDIR_Templates": "/opt/HCP-Pipelines/global/templates",
        "HCPPIPEDIR_dMRI": "/opt/HCP-Pipelines/DiffusionPreprocessing/scripts",
        "HCPPIPEDIR_dMRITract": "/opt/HCP-Pipelines/DiffusionTractography/scripts",
        "HCPPIPEDIR_fMRIVol": "/opt/HCP-Pipelines/fMRIVolume/scripts",
        "HCPPIPEDIR_tfMRI": "/opt/HCP-Pipelines/tfMRI/scripts",
        "HCPPIPEDIR_tfMRIAnalysis": "/opt/HCP-Pipelines/TaskfMRIAnalysis/scripts",
        "LD_LIBRARY_PATH": "/usr/share/fsl/lib:/usr/share/fsl/lib",
        "LOCAL_DIR": "/opt/freesurfer/local",
        "MINC_BIN_DIR": "/opt/freesurfer/mni/bin",
        "MINC_LIB_DIR": "/opt/freesurfer/mni/lib",
        "MNI_DATAPATH": "/opt/freesurfer/mni/data",
        "MNI_DIR": "/opt/freesurfer/mni",
        "MNI_PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "MSMBINDIR": "/opt/HCP-Pipelines/MSMBinaries",
        "MSMBin": "/opt/HCP-Pipelines/MSMBinaries",
        "MSMCONFIGDIR": "/opt/HCP-Pipelines/MSMConfig",
        "PATH": "/opt/poetry/bin:/opt/workbench/bin_linux64:/opt/venv/bin:/opt/freesurfer/bin:/opt/freesurfer/fsfast/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/share/fsl/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin",
        "PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "POETRY_HOME": "/opt/poetry",
        "POSSUMDIR": "/usr/share/fsl",
        "REQUESTS_CA_BUNDLE": "/etc/ssl/certs/ca-certificates.crt",
        "SUBJECTS_DIR": "/opt/freesurfer/subjects",
        "WORKBENCH": "/opt/workbench/wb_command",
        "python3": "/opt/venv/bin/python3.9"
      },
      "label": "BIDS-HCP Preprocessing Pipeline",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-hcp",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/bids-hcp",
      "url": "https://github.com/Washington-University/Pipelines",
      "version": "0.2.5_4.3.0_rc1"
    }
  ],
  [
    {
      "author": "Poldrack Lab, Stanford University",
      "cite": "Esteban O, Birman D, Schaer M, Koyejo OO, Poldrack RA, Gorgolewski KJ; MRIQC: Advancing the Automatic Prediction of Image Quality in MRI from Unseen Sites; PLOS ONE 12(9):e0184661; doi:10.1371/journal.pone.0184661.",
      "command": "python run.py",
      "description": "MRIQC (0.15.2 - April 6, 2020) extracts no-reference image quality metrics (IQMs) from T1w and T2w structural and functional magnetic resonance imaging data.  Note: arguments --n_procs --mem_gb and --ants-nthreads are not availble to configure becaues they are set to use the maximum available as detected by MRIQC. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "AFNI_IMSAVE_WARNINGS": "NO",
        "AFNI_MODELPATH": "/opt/afni/models",
        "AFNI_PLUGINPATH": "/opt/afni/plugins",
        "AFNI_TTATLAS_DATASET": "/opt/afni/atlases",
        "ANTSPATH": "/usr/lib/ants",
        "CPATH": "/usr/local/miniconda/include/:",
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "HOME": "/home/bidsapp",
        "LANG": "C.UTF-8",
        "LC_ALL": "C.UTF-8",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0:",
        "MKL_NUM_THREADS": "1",
        "OMP_NUM_THREADS": "1",
        "PATH": "/usr/local/miniconda/bin:/opt/afni:/usr/lib/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "POSSUMDIR": "/usr/share/fsl/5.0",
        "PYTHONNOUSERSITE": "1",
        "REQUESTS_CA_BUNDLE": "/etc/ssl/certs/ca-certificates.crt",
        "TEMPLATEFLOW_HOME": "/opt/templateflow"
      },
      "label": "BIDS MRIQC: Automatic prediction of quality and visual reporting of MRI scans in BIDS format",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-mriqc",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/bids-mriqc",
      "url": "https://mriqc.readthedocs.io/en/stable/about.html",
      "version": "1.2.3_0.15.2"
    },
    {
      "author": "Poldrack Lab, Stanford University",
      "cite": "Esteban O, Birman D, Schaer M, Koyejo OO, Poldrack RA, Gorgolewski KJ; MRIQC: Advancing the Automatic Prediction of Image Quality in MRI from Unseen Sites; PLOS ONE 12(9):e0184661; doi:10.1371/journal.pone.0184661.",
      "command": "python run.py",
      "description": "MRIQC (0.15.2 - April 6, 2020) extracts no-reference image quality metrics (IQMs) from T1w and T2w structural and functional magnetic resonance imaging data.  Note: arguments --n_procs --mem_gb and --ants-nthreads are not availble to configure becaues they are set to use the maximum available as detected by MRIQC. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "AFNI_IMSAVE_WARNINGS": "NO",
        "AFNI_MODELPATH": "/opt/afni/models",
        "AFNI_PLUGINPATH": "/opt/afni/plugins",
        "AFNI_TTATLAS_DATASET": "/opt/afni/atlases",
        "ANTSPATH": "/usr/lib/ants",
        "CPATH": "/usr/local/miniconda/include/:",
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "HOME": "/home/bidsapp",
        "LANG": "C.UTF-8",
        "LC_ALL": "C.UTF-8",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0:",
        "MKL_NUM_THREADS": "1",
        "OMP_NUM_THREADS": "1",
        "PATH": "/usr/local/miniconda/bin:/opt/afni:/usr/lib/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "POSSUMDIR": "/usr/share/fsl/5.0",
        "PYTHONNOUSERSITE": "1",
        "REQUESTS_CA_BUNDLE": "/etc/ssl/certs/ca-certificates.crt",
        "TEMPLATEFLOW_HOME": "/opt/templateflow"
      },
      "label": "BIDS MRIQC: Automatic prediction of quality and visual reporting of MRI scans in BIDS format",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-mriqc",
      "source": "https://github.com/flywheel-apps/bids-mriqc",
      "url": "https://mriqc.readthedocs.io/en/stable/about.html",
      "version": "1.2.1_0.15.2"
    },
    {
      "author": "Poldrack Lab, Stanford University",
      "cite": "Esteban O, Birman D, Schaer M, Koyejo OO, Poldrack RA, Gorgolewski KJ; MRIQC: Advancing the Automatic Prediction of Image Quality in MRI from Unseen Sites; PLOS ONE 12(9):e0184661; doi:10.1371/journal.pone.0184661.",
      "command": "python run.py",
      "description": "MRIQC (0.15.2 - April 6, 2020)) extracts no-reference IQMs (image quality metrics) from structural (T1w and T2w) and functional MRI (magnetic resonance imaging) data.  Arguments such as --n_procs --mem_gb and --ants-nthreads are set to use the maximum available as detected by MRIQC. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "AFNI_IMSAVE_WARNINGS": "NO",
        "AFNI_MODELPATH": "/opt/afni/models",
        "AFNI_PLUGINPATH": "/opt/afni/plugins",
        "AFNI_TTATLAS_DATASET": "/opt/afni/atlases",
        "ANTSPATH": "/usr/lib/ants",
        "CPATH": "/usr/local/miniconda/include/:",
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "HOME": "/home/bidsapp",
        "LANG": "C.UTF-8",
        "LC_ALL": "C.UTF-8",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0:",
        "MKL_NUM_THREADS": "1",
        "OMP_NUM_THREADS": "1",
        "PATH": "/usr/local/miniconda/bin:/opt/afni:/usr/lib/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "POSSUMDIR": "/usr/share/fsl/5.0",
        "PYTHONNOUSERSITE": "1",
        "TEMPLATEFLOW_HOME": "/opt/templateflow"
      },
      "label": "BIDS MRIQC: Automatic prediction of quality and visual reporting of MRI scans in BIDS format",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-mriqc",
      "source": "https://github.com/flywheel-apps/bids-mriqc",
      "url": "https://mriqc.readthedocs.io/en/stable/about.html",
      "version": "1.2.0_0.15.2"
    },
    {
      "author": "Poldrack Lab, Stanford University",
      "cite": "Esteban O, Birman D, Schaer M, Koyejo OO, Poldrack RA, Gorgolewski KJ; MRIQC: Advancing the Automatic Prediction of Image Quality in MRI from Unseen Sites; PLOS ONE 12(9):e0184661; doi:10.1371/journal.pone.0184661.",
      "command": "python run.py",
      "description": "MRIQC (0.15.2 - April 6, 2020)) extracts no-reference IQMs (image quality metrics) from structural (T1w and T2w) and functional MRI (magnetic resonance imaging) data.  Arguments such as --n_procs --mem_gb and --ants-nthreads are set to use the maximum available as detected by MRIQC. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "AFNI_IMSAVE_WARNINGS": "NO",
        "AFNI_MODELPATH": "/opt/afni/models",
        "AFNI_PLUGINPATH": "/opt/afni/plugins",
        "AFNI_TTATLAS_DATASET": "/opt/afni/atlases",
        "ANTSPATH": "/usr/lib/ants",
        "CPATH": "/usr/local/miniconda/include/:",
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "HOME": "/home/bidsapp",
        "LANG": "C.UTF-8",
        "LC_ALL": "C.UTF-8",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0:",
        "MKL_NUM_THREADS": "1",
        "OMP_NUM_THREADS": "1",
        "PATH": "/usr/local/miniconda/bin:/opt/afni:/usr/lib/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "POSSUMDIR": "/usr/share/fsl/5.0",
        "PYTHONNOUSERSITE": "1",
        "TEMPLATEFLOW_HOME": "/opt/templateflow"
      },
      "label": "BIDS MRIQC: Automatic prediction of quality and visual reporting of MRI scans in BIDS format",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-mriqc",
      "source": "https://github.com/flywheel-apps/bids-mriqc",
      "url": "https://mriqc.readthedocs.io/en/stable/about.html",
      "version": "1.1.0_0.15.2"
    },
    {
      "author": "Poldrack Lab, Stanford University",
      "cite": "Esteban O, Birman D, Schaer M, Koyejo OO, Poldrack RA, Gorgolewski KJ; MRIQC: Advancing the Automatic Prediction of Image Quality in MRI from Unseen Sites; PLOS ONE 12(9):e0184661; doi:10.1371/journal.pone.0184661.",
      "command": "python run.py",
      "description": "MRIQC (v0.15.1) extracts no-reference IQMs (image quality metrics) from structural (T1w and T2w) and functional MRI (magnetic resonance imaging) data. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "AFNI_IMSAVE_WARNINGS": "NO",
        "AFNI_MODELPATH": "/opt/afni/models",
        "AFNI_PLUGINPATH": "/opt/afni/plugins",
        "AFNI_TTATLAS_DATASET": "/opt/afni/atlases",
        "ANTSPATH": "/usr/lib/ants",
        "CPATH": "/usr/local/miniconda/include/:",
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "HOME": "/home/bidsapp",
        "LANG": "C.UTF-8",
        "LC_ALL": "C.UTF-8",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0:",
        "MKL_NUM_THREADS": "1",
        "OMP_NUM_THREADS": "1",
        "PATH": "/usr/local/miniconda/bin:/opt/afni:/usr/lib/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "POSSUMDIR": "/usr/share/fsl/5.0",
        "PYTHONNOUSERSITE": "1",
        "TEMPLATEFLOW_HOME": "/opt/templateflow"
      },
      "label": "MRIQC: Automatic prediction of quality and visual reporting of MRI scans in BIDS format",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-mriqc",
      "source": "https://github.com/flywheel-apps/bids-mriqc",
      "url": "https://mriqc.readthedocs.io/en/stable/about.html",
      "version": "1.0.8_0.15.1"
    },
    {
      "author": "Poldrack Lab, Stanford University",
      "cite": "Esteban O, Birman D, Schaer M, Koyejo OO, Poldrack RA, Gorgolewski KJ; MRIQC: Advancing the Automatic Prediction of Image Quality in MRI from Unseen Sites; PLOS ONE 12(9):e0184661; doi:10.1371/journal.pone.0184661.",
      "description": "MRIQC (v0.15.1) extracts no-reference IQMs (image quality metrics) from structural (T1w and T2w) and functional MRI (magnetic resonance imaging) data. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "AFNI_IMSAVE_WARNINGS": "NO",
        "AFNI_MODELPATH": "/opt/afni/models",
        "AFNI_PLUGINPATH": "/opt/afni/plugins",
        "AFNI_TTATLAS_DATASET": "/opt/afni/atlases",
        "ANTSPATH": "/usr/lib/ants",
        "CPATH": "/usr/local/miniconda/include/:",
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "HOME": "/home/bidsapp",
        "LANG": "C.UTF-8",
        "LC_ALL": "C.UTF-8",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0:",
        "MKL_NUM_THREADS": "1",
        "OMP_NUM_THREADS": "1",
        "PATH": "/usr/local/miniconda/bin:/opt/afni:/usr/lib/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "POSSUMDIR": "/usr/share/fsl/5.0",
        "PYTHONNOUSERSITE": "1",
        "TEMPLATEFLOW_HOME": "/opt/templateflow"
      },
      "label": "MRIQC: Automatic prediction of quality and visual reporting of MRI scans in BIDS format",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-mriqc",
      "source": "https://github.com/flywheel-apps/bids-mriqc",
      "url": "https://mriqc.readthedocs.io/en/stable/about.html",
      "version": "1.0.0_0.15.1"
    }
  ],
  [
    {
      "author": "Flywheel Exchange, LLC",
      "command": "poetry run python3 /flywheel/v0/run.py",
      "description": "Prepare a project for BIDS Curation. BIDS Pre-Curate offers a simple way to modify labels of project data to be compatible with the BIDS-spec. Running pre-curate on a given project (as a project-level analysis) will generate CSV files that will be populated with a unique list of container labels, as well as slots for the information needed for BIDS curation (classification, task, etc.). These CSV files can be downloaded and modified (outside of Flywheel) to provide missing or corrected information. The corrected CSV file is then uploaded to the project (as an attachment) and provided as input to a run of this same gear to do on-the-fly mappings and metadata updates. For more information, please see the readme in the source repository.",
      "environment": {
        "PYTHONUNBUFFERED": "1"
      },
      "label": "BIDS Pre-Curation",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-pre-curate",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/bids-pre-curate",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/bids-pre-curate",
      "version": "0.4.1"
    },
    {
      "author": "Flywheel Exchange, LLC",
      "command": "poetry run python3 /flywheel/v0/run.py",
      "description": "Prepare a project for BIDS Curation. BIDS Pre-Curate offers a simple way to modify labels of project data to be compatible with the BIDS-spec. Running pre-curate on a given project (as a project-level analysis) will generate CSV files that will be populated with a unique list of container labels, as well as slots for the information needed for BIDS curation (classification, task, etc.). These CSV files can be downloaded and modified (outside of Flywheel) to provide missing or corrected information. The corrected CSV file is then uploaded to the project (as an attachment) and provided as input to a run of this same gear to do on-the-fly mappings and metadata updates. For more information, please see the readme in the source repository.",
      "environment": {
        "PYTHONUNBUFFERED": "1"
      },
      "label": "BIDS Pre-Curation",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-pre-curate",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/bids-pre-curate",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/bids-pre-curate",
      "version": "0.4.0"
    },
    {
      "author": "Flywheel Exchange, LLC",
      "command": "poetry run python3 /flywheel/v0/run.py",
      "description": "Prepare project for BIDS Curation. BIDS Pre-Curate offers a simple way to modify labels and classifications of project data to be compatible with the BIDS-spec. Running pre-curate on a given project (as a project-level analysis) will generate CSV files that will be populated with a unique list of container labels, as well as slots for the information needed for BIDS curation (classification, task, etc.). These CSV files can be downloaded and modified (outside of Flywheel) to provide missing or corrected information. The completed CSV file is then uploaded to the project (as an attachment) and provided as input to a run of this same gear to do on-the-fly mappings and metadata updates. For more information, please see the readme in the source repository.",
      "environment": {
        "PYTHONUNBUFFERED": "1"
      },
      "label": "BIDS Pre-Curation",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-pre-curate",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/bids-pre-curate",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/bids-pre-curate",
      "version": "0.3.1"
    },
    {
      "author": "Flywheel Exchange, LLC",
      "command": "pipenv run python3 /flywheel/v0/run.py",
      "description": "Prepare project for BIDS Curation. BIDS Pre-Curate offers a simple way to modify labels and classifications of project data to be compatible with the BIDS-spec. Running pre-curate on a given project (as a project-level analysis) will generate CSV files that will be populated with a unique list of container labels, as well as slots for the information needed for BIDS curation (classification, task, etc.). These CSV files can be downloaded and modified (outside of Flywheel) to provide missing or corrected information. The completed CSV file is then uploaded to the project (as an attachment) and provided as input to a run of this same gear to do on-the-fly mappings and metadata updates. For more information, please see the readme in the source repository.",
      "environment": {
        "PYTHONUNBUFFERED": "1"
      },
      "label": "BIDS Pre-Curation",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-pre-curate",
      "source": "https://github.com/flywheel-apps/bids-pre-curate",
      "url": "https://github.com/flywheel-apps/bids-pre-curate",
      "version": "0.2.0"
    },
    {
      "author": "Flywheel Exchange, LLC",
      "command": "pipenv run python3 /flywheel/v0/run.py",
      "description": "Prepare project for BIDS Curation. BIDS Pre-Curate offers a simple way to modify labels and classifications of project data to be compatible with the BIDS-spec. Running pre-curate on a given project (as a project-level analysis) will generate CSV files that will be populated with a unique list of container labels, as well as slots for the information needed for BIDS curation (classification, task, etc.). These CSV files can be downloaded and modified (outside of Flywheel) to provide missing or corrected information. The completed CSV file is then uploaded to the project (as an attachment) and provided as input to a run of this same gear to do on-the-fly mappings and metadata updates. For more information, please see the readme in the source repository.",
      "environment": {
        "PYTHONUNBUFFERED": "1"
      },
      "label": "BIDS Pre-Curation",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-pre-curate",
      "source": "https://github.com/flywheel-apps/bids-pre-curate",
      "url": "https://github.com/flywheel-apps/bids-pre-curate",
      "version": "0.1.5"
    },
    {
      "author": "Flywheel Exchange, LLC",
      "command": "pipenv run python3 /flywheel/v0/run.py",
      "description": "Prepare project for BIDS Curation. BIDS Pre-Curate offers a simple way to modify labels and classifications of project data to be compatible with the BIDS-spec. Running pre-curate on a given project (as a project-level analysis) will generate CSV files that will be populated with a unique list of container labels, as well as slots for the information needed for BIDS curation (classification, task, etc.). These CSV files can be downloaded and modified (outside of Flywheel) to provide missing or corrected information. The completed CSV file is then uploaded to the project (as an attachment) and provided as input to a run of this same gear to do on-the-fly mappings and metadata updates. For more information, please see the readme in the source repository.",
      "environment": {
        "PYTHONUNBUFFERED": "1"
      },
      "label": "BIDS Pre-Curation",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-pre-curate",
      "source": "https://github.com/flywheel-apps/bids-pre-curate",
      "url": "https://github.com/flywheel-apps/bids-pre-curate",
      "version": "0.1.4"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "https://qsiprep.readthedocs.io/en/latest/citing.html",
      "command": "python /flywheel/v0/run.py",
      "description": "BIDS qsiprep 1.0.*_0.16.1 \n qsiprep configures pipelines for processing diffusion-weighted MRI (dMRI) data. The main features of this software are:\n\nA BIDS-app approach to preprocessing nearly all kinds of modern diffusion MRI data.\n\nAutomatically generated preprocessing pipelines that correctly group, distortion correct, motion correct, denoise, co-register and resample your scans, producing visual reports and QC metrics.\n\nA system for running state-of-the-art reconstruction pipelines that include algorithms from Dipy, MRTrix, DSI Studio and others.\n\nA novel motion correction algorithm that works on DSI and random q-space sampling schemes",
      "environment": {
        "AFNI_IMSAVE_WARNINGS": "NO",
        "AFNI_INSTALLDIR": "/opt/afni-latest",
        "ANTSPATH": "/opt/ants/bin",
        "ANTS_DEPS": "zlib1g-dev",
        "ARTHOME": "/opt/art",
        "C3DPATH": "/opt/convert3d-nightly",
        "CRN_SHARED_DATA": "/niworkflows_data",
        "CUDA_VERSION": "10.2.89",
        "DIPY_HOME": "/home/qsiprep/.dipy",
        "DSI_STUDIO_DEPS": "qt512base qt512charts-no-lgpl",
        "FLYWHEEL": "/flywheel/v0",
        "FREESURFER_DEPS": "bc ca-certificates curl libgomp1 libxmu6 libxt6 tcsh perl",
        "FREESURFER_HOME": "/opt/freesurfer",
        "FSF_OUTPUT_FORMAT": "nii.gz",
        "FSLDIR": "/opt/fsl-6.0.5.1",
        "FSLGECUDAQ": "cuda.q",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSL_DEPS": "libquadmath0",
        "FSL_DIR": "/opt/fsl-6.0.5.1",
        "FS_OVERRIDE": "0",
        "FUNCTIONALS_DIR": "/opt/freesurfer/sessions",
        "IS_DOCKER_8395080871": "1",
        "KMP_WARNINGS": "0",
        "LD_LIBRARY_PATH": "/opt/qt512/lib/x86_64-linux-gnu:/opt/qt512/lib:/opt/qt512/lib/x86_64-linux-gnu:/opt/qt512/lib:/opt/ants/lib:/opt/fsl-6.0.5.1/lib:/usr/local/nvidia/lib:/usr/local/nvidia/lib64",
        "LOCAL_DIR": "/opt/freesurfer/local",
        "MINC_BIN_DIR": "/opt/freesurfer/mni/bin",
        "MINC_LIB_DIR": "/opt/freesurfer/mni/lib",
        "MKL_NUM_THREADS": "1",
        "MNI_DATAPATH": "/opt/freesurfer/mni/data",
        "MNI_DIR": "/opt/freesurfer/mni",
        "MNI_PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "MRTRIX3_DEPS": "bzip2 ca-certificates curl libpng16-16 libblas3 liblapack3",
        "MRTRIX_NTHREADS": "1",
        "NCCL_VERSION": "2.11.4",
        "NVARCH": "x86_64",
        "NVIDIA_DRIVER_CAPABILITIES": "compute,utility",
        "NVIDIA_REQUIRE_CUDA": "cuda>=10.2 brand=tesla,driver>=396,driver<397 brand=tesla,driver>=410,driver<411 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=440,driver<441",
        "NVIDIA_VISIBLE_DEVICES": "all",
        "NV_CUDA_CUDART_VERSION": "10.2.89-1",
        "NV_CUDA_LIB_VERSION": "10.2.89-1",
        "NV_LIBCUBLAS_PACKAGE": "libcublas10=10.2.2.89-1",
        "NV_LIBCUBLAS_PACKAGE_NAME": "libcublas10",
        "NV_LIBCUBLAS_VERSION": "10.2.2.89-1",
        "NV_LIBCUSPARSE_VERSION": "10.2.89-1",
        "NV_LIBNCCL_PACKAGE": "libnccl2=2.11.4-1+cuda10.2",
        "NV_LIBNCCL_PACKAGE_NAME": "libnccl2",
        "NV_LIBNCCL_PACKAGE_VERSION": "2.11.4-1",
        "NV_LIBNPP_VERSION": "10.2.89-1",
        "NV_ML_REPO_ENABLED": "1",
        "NV_ML_REPO_URL": "https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64",
        "NV_NVTX_VERSION": "10.2.89-1",
        "OMP_NUM_THREADS": "1",
        "OS": "Linux",
        "PATH": "/opt/poetry/bin:/opt/qt512/bin:/opt/art/bin:/opt/convert3d-nightly/bin:/usr/local/miniconda/bin:/opt/freesurfer/bin:/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/opt/qt512/bin:/opt/fsl-6.0.5.1/bin:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/ants/bin:/opt/dsi-studio/dsi_studio_64:/opt/mrtrix3-latest/bin:/opt/3Tissue/bin:/opt/afni-latest",
        "PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "PKG_CONFIG_PATH": "/opt/qt512/lib/pkgconfig:/opt/qt512/lib/pkgconfig:",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.13",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PYTHONUNBUFFERED": "1",
        "QSIRECON_ATLAS": "/atlas/qsirecon_atlases",
        "QTDIR": "/opt/qt512",
        "QT_BASE_DIR": "/opt/qt512",
        "SHLVL": "1",
        "SUBJECTS_DIR": "/opt/freesurfer/subjects"
      },
      "label": "BIDS QSIPrep",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-qsiprep",
      "source": "https://qsiprep.readthedocs.io/en/latest/",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/bids-qsiprep",
      "version": "1.0.4_0.16.1"
    },
    {
      "author": "Flywheel",
      "cite": "https://qsiprep.readthedocs.io/en/latest/citing.html",
      "command": "poetry run python run.py",
      "description": "BIDS qsiprep 1.0.1_0.15.4 \n qsiprep configures pipelines for processing diffusion-weighted MRI (dMRI) data. The main features of this software are:\n\nA BIDS-app approach to preprocessing nearly all kinds of modern diffusion MRI data.\n\nAutomatically generated preprocessing pipelines that correctly group, distortion correct, motion correct, denoise, co-register and resample your scans, producing visual reports and QC metrics.\n\nA system for running state-of-the-art reconstruction pipelines that include algorithms from Dipy, MRTrix, DSI Studio and others.\n\nA novel motion correction algorithm that works on DSI and random q-space sampling schemes LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "AFNI_IMSAVE_WARNINGS": "NO",
        "AFNI_INSTALLDIR": "/opt/afni-latest",
        "ANTSPATH": "/opt/ants/bin",
        "ANTS_DEPS": "zlib1g-dev",
        "ARTHOME": "/opt/art",
        "C3DPATH": "/opt/convert3d-nightly",
        "CRN_SHARED_DATA": "/niworkflows_data",
        "CUDA_VERSION": "10.2.89",
        "DIPY_HOME": "/home/qsiprep/.dipy",
        "DSI_STUDIO_DEPS": "qt512base qt512charts-no-lgpl",
        "FLYWHEEL": "/flywheel/v0",
        "FREESURFER_DEPS": "bc ca-certificates curl libgomp1 libxmu6 libxt6 tcsh perl",
        "FREESURFER_HOME": "/opt/freesurfer",
        "FSF_OUTPUT_FORMAT": "nii.gz",
        "FSLDIR": "/opt/fsl-6.0.5.1",
        "FSLGECUDAQ": "cuda.q",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSL_DEPS": "libquadmath0",
        "FSL_DIR": "/opt/fsl-6.0.5.1",
        "FS_OVERRIDE": "0",
        "FUNCTIONALS_DIR": "/opt/freesurfer/sessions",
        "IS_DOCKER_8395080871": "1",
        "KMP_WARNINGS": "0",
        "LD_LIBRARY_PATH": "/opt/qt512/lib/x86_64-linux-gnu:/opt/qt512/lib:/opt/qt512/lib/x86_64-linux-gnu:/opt/qt512/lib:/opt/ants/lib:/opt/fsl-6.0.5.1/lib:/usr/local/nvidia/lib:/usr/local/nvidia/lib64",
        "LOCAL_DIR": "/opt/freesurfer/local",
        "MINC_BIN_DIR": "/opt/freesurfer/mni/bin",
        "MINC_LIB_DIR": "/opt/freesurfer/mni/lib",
        "MKL_NUM_THREADS": "1",
        "MNI_DATAPATH": "/opt/freesurfer/mni/data",
        "MNI_DIR": "/opt/freesurfer/mni",
        "MNI_PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "MRTRIX3_DEPS": "bzip2 ca-certificates curl libpng16-16 libblas3 liblapack3",
        "MRTRIX_NTHREADS": "1",
        "NCCL_VERSION": "2.11.4",
        "NVARCH": "x86_64",
        "NVIDIA_DRIVER_CAPABILITIES": "compute,utility",
        "NVIDIA_REQUIRE_CUDA": "cuda>=10.2 brand=tesla,driver>=396,driver<397 brand=tesla,driver>=410,driver<411 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=440,driver<441",
        "NVIDIA_VISIBLE_DEVICES": "all",
        "NV_CUDA_CUDART_VERSION": "10.2.89-1",
        "NV_CUDA_LIB_VERSION": "10.2.89-1",
        "NV_LIBCUBLAS_PACKAGE": "libcublas10=10.2.2.89-1",
        "NV_LIBCUBLAS_PACKAGE_NAME": "libcublas10",
        "NV_LIBCUBLAS_VERSION": "10.2.2.89-1",
        "NV_LIBCUSPARSE_VERSION": "10.2.89-1",
        "NV_LIBNCCL_PACKAGE": "libnccl2=2.11.4-1+cuda10.2",
        "NV_LIBNCCL_PACKAGE_NAME": "libnccl2",
        "NV_LIBNCCL_PACKAGE_VERSION": "2.11.4-1",
        "NV_LIBNPP_VERSION": "10.2.89-1",
        "NV_ML_REPO_ENABLED": "1",
        "NV_ML_REPO_URL": "https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64",
        "NV_NVTX_VERSION": "10.2.89-1",
        "OMP_NUM_THREADS": "1",
        "OS": "Linux",
        "PATH": "/opt/poetry/bin:/opt/qt512/bin:/opt/art/bin:/opt/convert3d-nightly/bin:/usr/local/miniconda/bin:/opt/freesurfer/bin:/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/opt/qt512/bin:/opt/fsl-6.0.5.1/bin:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/ants/bin:/opt/dsi-studio/dsi_studio_64:/opt/mrtrix3-latest/bin:/opt/3Tissue/bin:/opt/afni-latest",
        "PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "PKG_CONFIG_PATH": "/opt/qt512/lib/pkgconfig:/opt/qt512/lib/pkgconfig:",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.13",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PYTHONUNBUFFERED": "1",
        "QSIRECON_ATLAS": "/atlas/qsirecon_atlases",
        "QTDIR": "/opt/qt512",
        "QT_BASE_DIR": "/opt/qt512",
        "SHLVL": "1",
        "SUBJECTS_DIR": "/opt/freesurfer/subjects"
      },
      "label": "BIDS QSIPrep",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-qsiprep",
      "source": "https://qsiprep.readthedocs.io/en/latest/",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/bids-qsiprep",
      "version": "1.0.2_0.15.4"
    },
    {
      "author": "Flywheel",
      "cite": "https://qsiprep.readthedocs.io/en/latest/citing.html",
      "command": "poetry run python run.py",
      "description": "BIDS qsiprep 1.0.1_0.15.4 \n qsiprep configures pipelines for processing diffusion-weighted MRI (dMRI) data. The main features of this software are:\n\nA BIDS-app approach to preprocessing nearly all kinds of modern diffusion MRI data.\n\nAutomatically generated preprocessing pipelines that correctly group, distortion correct, motion correct, denoise, co-register and resample your scans, producing visual reports and QC metrics.\n\nA system for running state-of-the-art reconstruction pipelines that include algorithms from Dipy, MRTrix, DSI Studio and others.\n\nA novel motion correction algorithm that works on DSI and random q-space sampling schemes LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "AFNI_IMSAVE_WARNINGS": "NO",
        "AFNI_INSTALLDIR": "/opt/afni-latest",
        "ANTSPATH": "/opt/ants/bin",
        "ANTS_DEPS": "zlib1g-dev",
        "ARTHOME": "/opt/art",
        "C3DPATH": "/opt/convert3d-nightly",
        "CRN_SHARED_DATA": "/niworkflows_data",
        "CUDA_VERSION": "10.2.89",
        "DIPY_HOME": "/home/qsiprep/.dipy",
        "DSI_STUDIO_DEPS": "qt512base qt512charts-no-lgpl",
        "FLYWHEEL": "/flywheel/v0",
        "FREESURFER_DEPS": "bc ca-certificates curl libgomp1 libxmu6 libxt6 tcsh perl",
        "FREESURFER_HOME": "/opt/freesurfer",
        "FSF_OUTPUT_FORMAT": "nii.gz",
        "FSLDIR": "/opt/fsl-6.0.5.1",
        "FSLGECUDAQ": "cuda.q",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSL_DEPS": "libquadmath0",
        "FSL_DIR": "/opt/fsl-6.0.5.1",
        "FS_OVERRIDE": "0",
        "FUNCTIONALS_DIR": "/opt/freesurfer/sessions",
        "IS_DOCKER_8395080871": "1",
        "KMP_WARNINGS": "0",
        "LD_LIBRARY_PATH": "/opt/qt512/lib/x86_64-linux-gnu:/opt/qt512/lib:/opt/qt512/lib/x86_64-linux-gnu:/opt/qt512/lib:/opt/ants/lib:/opt/fsl-6.0.5.1/lib:/usr/local/nvidia/lib:/usr/local/nvidia/lib64",
        "LOCAL_DIR": "/opt/freesurfer/local",
        "MINC_BIN_DIR": "/opt/freesurfer/mni/bin",
        "MINC_LIB_DIR": "/opt/freesurfer/mni/lib",
        "MKL_NUM_THREADS": "1",
        "MNI_DATAPATH": "/opt/freesurfer/mni/data",
        "MNI_DIR": "/opt/freesurfer/mni",
        "MNI_PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "MRTRIX3_DEPS": "bzip2 ca-certificates curl libpng16-16 libblas3 liblapack3",
        "MRTRIX_NTHREADS": "1",
        "NCCL_VERSION": "2.11.4",
        "NVARCH": "x86_64",
        "NVIDIA_DRIVER_CAPABILITIES": "compute,utility",
        "NVIDIA_REQUIRE_CUDA": "cuda>=10.2 brand=tesla,driver>=396,driver<397 brand=tesla,driver>=410,driver<411 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=440,driver<441",
        "NVIDIA_VISIBLE_DEVICES": "all",
        "NV_CUDA_CUDART_VERSION": "10.2.89-1",
        "NV_CUDA_LIB_VERSION": "10.2.89-1",
        "NV_LIBCUBLAS_PACKAGE": "libcublas10=10.2.2.89-1",
        "NV_LIBCUBLAS_PACKAGE_NAME": "libcublas10",
        "NV_LIBCUBLAS_VERSION": "10.2.2.89-1",
        "NV_LIBCUSPARSE_VERSION": "10.2.89-1",
        "NV_LIBNCCL_PACKAGE": "libnccl2=2.11.4-1+cuda10.2",
        "NV_LIBNCCL_PACKAGE_NAME": "libnccl2",
        "NV_LIBNCCL_PACKAGE_VERSION": "2.11.4-1",
        "NV_LIBNPP_VERSION": "10.2.89-1",
        "NV_ML_REPO_ENABLED": "1",
        "NV_ML_REPO_URL": "https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64",
        "NV_NVTX_VERSION": "10.2.89-1",
        "OMP_NUM_THREADS": "1",
        "OS": "Linux",
        "PATH": "/opt/poetry/bin:/opt/qt512/bin:/opt/art/bin:/opt/convert3d-nightly/bin:/usr/local/miniconda/bin:/opt/freesurfer/bin:/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/opt/qt512/bin:/opt/fsl-6.0.5.1/bin:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/ants/bin:/opt/dsi-studio/dsi_studio_64:/opt/mrtrix3-latest/bin:/opt/3Tissue/bin:/opt/afni-latest",
        "PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "PKG_CONFIG_PATH": "/opt/qt512/lib/pkgconfig:/opt/qt512/lib/pkgconfig:",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.13",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PYTHONUNBUFFERED": "1",
        "QSIRECON_ATLAS": "/atlas/qsirecon_atlases",
        "QTDIR": "/opt/qt512",
        "QT_BASE_DIR": "/opt/qt512",
        "SHLVL": "1",
        "SUBJECTS_DIR": "/opt/freesurfer/subjects"
      },
      "label": "BIDS QSIPrep",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-qsiprep",
      "source": "https://qsiprep.readthedocs.io/en/latest/",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/bids-qsiprep",
      "version": "1.0.1_0.15.4"
    },
    {
      "author": "Flywheel",
      "cite": "https://qsiprep.readthedocs.io/en/latest/citing.html",
      "command": "/usr/local/miniconda/bin/python run.py",
      "description": "BIDS qsiprep 0.0.0_0.12.2 \n qsiprep configures pipelines for processing diffusion-weighted MRI (dMRI) data. The main features of this software are\n\nA BIDS-app approach to preprocessing nearly all kinds of modern diffusion MRI data.\n\nAutomatically generated preprocessing pipelines that correctly group, distortion correct, motion correct, denoise, coregister and resample your scans, producing visual reports and QC metrics.\n\nA system for running state-of-the-art reconstruction pipelines that include algorithms from Dipy, MRTrix, DSI Studio and others.\n\nA novel motion correction algorithm that works on DSI and random q-space sampling schemes LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "PYTHONUNBUFFERED": "1"
      },
      "label": "BIDS qsiprep",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "bids-qsiprep",
      "source": "https://qsiprep.readthedocs.io/en/latest/",
      "url": "https://github.com/flywheel-apps/bids-qsiprep",
      "version": "0.0.0_0.12.2"
    }
  ],
  [
    {
      "author": "support@flywheel.io",
      "cite": "",
      "command": "cd /opt/monai ; /opt/conda/bin/python app/breast_density_classifier_map.py -i /flywheel/v0/input/input-file/ -o /flywheel/v0/output/ -m models/traced_ts_model/traced_ts_model.pt",
      "description": "Gear for breast density classification on mamography images",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "NVIDIA_DRIVER_CAPABILITIES": "compute,utility",
        "NVIDIA_REQUIRE_CUDA": "cuda>=11.2 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=440,driver<441 driver>=450",
        "NVIDIA_VISIBLE_DEVICES": "all",
        "PATH": "/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      },
      "label": "Breast Density Classifier",
      "license": "MIT",
      "name": "breast-density-classifier",
      "source": "https://monai.io/model-zoo.html",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/breast-density-classifier",
      "version": "0.1.8"
    },
    {
      "author": "support@flywheel.io",
      "cite": "",
      "command": "cd /opt/monai ; /opt/conda/bin/python app/breast_density_classifier_map.py -i /flywheel/v0/input/input-file/ -o /flywheel/v0/output/ -m models/traced_ts_model/traced_ts_model.pt",
      "description": "Gear for breast density classification on mamography images",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "NVIDIA_DRIVER_CAPABILITIES": "compute,utility",
        "NVIDIA_REQUIRE_CUDA": "cuda>=11.2 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=440,driver<441 driver>=450",
        "NVIDIA_VISIBLE_DEVICES": "all",
        "PATH": "/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      },
      "label": "Breast Density Classifier",
      "license": "MIT",
      "name": "breast-density-classifier",
      "source": "https://monai.io/model-zoo.html (https://arxiv.org/abs/2202.08238)",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/breast-density-classifier",
      "version": "0.1.7"
    }
  ],
  [
    {
      "author": "Flywheel",
      "command": "python run.py",
      "description": "Bruker2nifti is an open source medical image format converter from raw Bruker ParaVision to NifTi, without any intermediate step through the DICOM standard formats.",
      "label": "Bruker to NIfTI converter",
      "license": "Other",
      "maintainer": "support@flywheel.io",
      "name": "bruker2nifti",
      "source": "",
      "url": "",
      "version": "0.1.0"
    }
  ],
  [
    {
      "author": "Craddock C, Sikka S, Cheung B, et al.",
      "command": "/opt/poetry/bin/poetry run python3 /flywheel/v0/run.py",
      "description": "The Configurable Pipeline for the Analysis of Connectomes C-PAC is a software for performing high-throughput preprocessing and analysis of functional connectomes data using high-performance computers. C-PAC is implemented in Python using the Nipype pipelining library to efficiently combine tools from AFNI, ANTS, and FSL to achieve high quality and robust automated processing. This docker container, when built, is an application for performing participant level analyses. Future releases will include group-level analyses, when there is a BIDS standard for handling derivatives and group models. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "ANTSPATH": "/usr/lib/ants",
        "C3DPATH": "/opt/c3d",
        "FREESURFER_HOME": "/usr/lib/freesurfer",
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0",
        "PATH": "/usr/lib/freesurfer/bin:/usr/lib/freesurfer/fsfast/bin:/usr/lib/freesurfer/tktools:/usr/share/fsl/5.0/bin:/usr/lib/fsl/5.0:/usr/lib/freesurfer/mni/bin:/opt/poetry/bin:/opt/venv/bin:/usr/lib/freesurfer/bin:/usr/local/miniconda/bin:/opt/ICA-AROMA:/usr/lib/ants:/opt/afni:/opt/c3d/bin:/root/.nvm/versions/node/v11.15.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "POETRY_HOME": "/opt/poetry",
        "POSSUMDIR": "/usr/share/fsl/5.0",
        "python3": "/opt/venv/bin/python3.8"
      },
      "label": "BIDS-APP: C-PAC (Configurable Pipeline for the Analysis of Connectomes)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "c-pac",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/cpac",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/cpac",
      "version": "0.3.0_1.8.0"
    },
    {
      "author": "Craddock C, Sikka S, Cheung B, et al.",
      "command": "/flywheel/v0/run.py",
      "description": "The Configurable Pipeline for the Analysis of Connectomes C-PAC is a software for performing high-throughput preprocessing and analysis of functional connectomes data using high-performance computers. C-PAC is implemented in Python using the Nipype pipelining library to efficiently combine tools from AFNI, ANTS, and FSL to achieve high quality and robust automated processing. This docker container, when built, is an application for performing participant level analyses. Future releases will include group-level analyses, when there is a BIDS standard for handling derivatives and group models. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "C3DPATH": "/opt/c3d/",
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0:",
        "PATH": "/usr/local/miniconda/bin:/opt/ICA-AROMA:/usr/lib/fsl/5.0:/opt/afni:/opt/c3d//bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "POSSUMDIR": "/usr/share/fsl/5.0"
      },
      "label": "BIDS-APP: C-PAC (Configurable Pipeline for the Analysis of Connectomes)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "c-pac",
      "source": "https://github.com/flywheel-apps/c-pac",
      "url": "https://github.com/BIDS-Apps/CPAC",
      "version": "0.1.2_v1.4.1"
    },
    {
      "author": "Craddock C, Sikka S, Cheung B, et al.",
      "command": "/flywheel/v0/run.py",
      "description": "The Configurable Pipeline for the Analysis of Connectomes C-PAC is a software for performing high-throughput preprocessing and analysis of functional connectomes data using high-performance computers. C-PAC is implemented in Python using the Nipype pipelining library to efficiently combine tools from AFNI, ANTS, and FSL to achieve high quality and robust automated processing. This docker container, when built, is an application for performing participant level analyses. Future releases will include group-level analyses, when there is a BIDS standard for handling derivatives and group models. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "C3DPATH": "/opt/c3d/",
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0:",
        "PATH": "/usr/local/miniconda/bin:/opt/ICA-AROMA:/usr/lib/fsl/5.0:/opt/afni:/opt/c3d//bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "POSSUMDIR": "/usr/share/fsl/5.0"
      },
      "label": "BIDS-APP: C-PAC (Configurable Pipeline for the Analysis of Connectomes)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "c-pac",
      "source": "https://github.com/flywheel-apps/c-pac",
      "url": "https://github.com/BIDS-Apps/CPAC",
      "version": "0.1.1_v1.4.1"
    },
    {
      "author": "Craddock C, Sikka S, Cheung B, et al.",
      "description": "The Configurable Pipeline for the Analysis of Connectomes C-PAC is a software for performing high-throughput preprocessing and analysis of functional connectomes data using high-performance computers. C-PAC is implemented in Python using the Nipype pipelining library to efficiently combine tools from AFNI, ANTS, and FSL to achieve high quality and robust automated processing. This docker container, when built, is an application for performing participant level analyses. Future releases will include group-level analyses, when there is a BIDS standard for handling derivatives and group models. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "BIDS-APP: C-PAC (Configurable Pipeline for the Analysis of Connectomes)",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "c-pac",
      "source": "https://github.com/flywheel-apps/c-pac",
      "url": "https://github.com/BIDS-Apps/CPAC",
      "version": "0.0.1"
    }
  ],
  [
    {
      "author": "Scientific Transparency (RF Dougherty, K Hahn, R Bowen, G Schaefer, LM Perry, H Wu)",
      "description": "CNI-DCM-CONVERT uses SciTran's data library (https://github.com/vistalab/scitran-data) to convert raw DICOM data (within a zip archive) to NIfTI, Montage, and PNG (screenshot acquisitions) formats. DCM-CONVERT supports Siemens and GE DICOM data. This gear will also use dcm2niix to generate bids-sidecar metadata. Those metadata will be added to the output NIfTI file's info object in Flywheel.",
      "label": "CNI-DCM-CONVERT: DICOM Conversion Utility",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dcm-convert",
      "source": "https://github.com/cni/cni-dcm-convert",
      "url": "https://github.com/vistalab/scitran-data",
      "version": "2.6.0"
    },
    {
      "author": "Scientific Transparency (RF Dougherty, K Hahn, R Bowen, G Schaefer, LM Perry, H Wu)",
      "description": "CNI-DCM-CONVERT uses SciTran's data library (https://github.com/vistalab/scitran-data) to convert raw DICOM data (within a zip archive) to NIfTI, Montage, and PNG (screenshot acquisitions) formats. DCM-CONVERT supports Siemens and GE DICOM data. This gear will also use dcm2niix to generate bids-sidecar metadata. Those metadata will be added to the output NIfTI file's info object in Flywheel.",
      "label": "CNI-DCM-CONVERT: DICOM Conversion Utility",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry, Stanford CNI <lmperry@stanford.edu>",
      "name": "cni-dcm-convert",
      "source": "https://github.com/cni/cni-dcm-convert",
      "url": "https://github.com/vistalab/scitran-data",
      "version": "2.5.0"
    },
    {
      "author": "Scientific Transparency (RF Dougherty, K Hahn, R Bowen, G Schaefer, LM Perry, H Wu)",
      "description": "CNI-DCM-CONVERT uses SciTran's data library (https://github.com/vistalab/scitran-data) to convert raw DICOM data (within a zip archive) to NIfTI, Montage, and PNG (screenshot acquisitions) formats. DCM-CONVERT supports Siemens and GE DICOM data. This gear will also use dcm2niix to generate bids-sidecar metadata. Those metadata will be added to the output NIfTI file's info object in Flywheel.",
      "label": "CNI-DCM-CONVERT - DICOM Conversion Utility",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dcm-convert",
      "source": "https://github.com/cni/cni-dcm-convert",
      "url": "https://github.com/vistalab/scitran-data",
      "version": "2.4.0"
    },
    {
      "author": "Scientific Transparency (RF Dougherty, K Hahn, R Bowen, G Schaefer, LM Perry, H Wu)",
      "description": "CNI-DCM-CONVERT uses SciTran's data library (https://github.com/vistalab/scitran-data) to convert raw DICOM data (within a zip archive) to NIfTI, Montage, and PNG (screenshot acquisitions) formats. DCM-CONVERT supports Siemens and GE DICOM data.",
      "label": "CNI-DCM-CONVERT - DICOM conversion tool",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dcm-convert",
      "source": "https://github.com/cni/cni-dcm-convert",
      "url": "https://github.com/vistalab/scitran-data",
      "version": "2.3.2"
    },
    {
      "author": "Scientific Transparency (RF Dougherty, K Hahn, R Bowen, G Schaefer, LM Perry, H Wu)",
      "description": "CNI-DCM-CONVERT uses SciTran's data library (https://github.com/vistalab/scitran-data) to convert raw DICOM data (within a zip archive) to NIfTI, Montage, and PNG (screenshot acquisitions) formats. DCM-CONVERT supports Siemens and GE DICOM data.",
      "label": "CNI: DCM-CONVERT - DICOM conversion tool",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dcm-convert",
      "source": "https://github.com/cni/cni-dcm-convert",
      "url": "https://github.com/vistalab/scitran-data",
      "version": "2.3.1"
    },
    {
      "author": "Scientific Transparency (RF Dougherty, K Hahn, R Bowen, G Schaefer, LM Perry, H Wu)",
      "description": "CNI-DCM-CONVERT uses SciTran's data library (https://github.com/vistalab/scitran-data) to convert raw DICOM data (within a zip archive) to NIfTI, Montage, and PNG (screenshot acquisitions) formats. DCM-CONVERT supports Siemens and GE DICOM data.",
      "label": "CNI: DCM-CONVERT - DICOM conversion tool",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dcm-convert",
      "source": "https://github.com/cni/cni-dcm-convert",
      "url": "https://github.com/vistalab/scitran-data",
      "version": "2.3.0"
    },
    {
      "author": "Scientific Transparency (RF Dougherty, K Hahn, R Bowen, G Schaefer, LM Perry)",
      "description": "CNI-DCM-CONVERT uses SciTran's data library (https://github.com/scitran/data) to convert raw DICOM data (within a zip archive) to NIfTI, Montage, and PNG (screenshot acquisitions) formats. DCM-CONVERT supports Siemens and GE DICOM data.",
      "label": "CNI: DCM-CONVERT - DICOM conversion tool",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dcm-convert",
      "source": "https://github.com/cni/cni-dcm-convert",
      "url": "https://github.com/scitran/data",
      "version": "2.2.0"
    },
    {
      "author": "Scientific Transparency (RF Dougherty, K Hahn, R Bowen, G Schaefer, LM Perry)",
      "description": "CNI-DCM-CONVERT uses SciTran's data library (https://github.com/scitran/data) to convert raw DICOM data (within a zip archive) to NIfTI, Montage, and PNG (screenshot acquisitions) formats. DCM-CONVERT supports Siemens and GE DICOM data.",
      "label": "CNI: DCM-CONVERT - DICOM conversion tool",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dcm-convert",
      "source": "https://github.com/cni/cni-dcm-convert",
      "url": "https://github.com/scitran/data",
      "version": "2.1.2"
    },
    {
      "author": "Scientific Transparency (RF Dougherty, K Hahn, R Bowen, G Schaefer, LM Perry)",
      "description": "CNI-DCM-CONVERT uses SciTran's data library (https://github.com/scitran/data) to convert raw DICOM data (within a zip archive) to NIfTI, Montage, and PNG (screenshot acquisitions) formats. DCM-CONVERT supports Siemens and GE DICOM data.",
      "label": "CNI: DCM-CONVERT - DICOM conversion tool",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dcm-convert",
      "source": "https://github.com/cni/cni-dcm-convert",
      "url": "https://github.com/scitran/data",
      "version": "2.1.1"
    },
    {
      "author": "Scientific Transparency (RF Dougherty, K Hahn, R Bowen, G Schaefer, LM Perry)",
      "description": "CNI-DCM-CONVERT uses SciTran's data library (https://github.com/scitran/data) to convert raw DICOM data (within a zip archive) to NIfTI, Montage, and PNG (screenshot acquisitions) formats. DCM-CONVERT supports Siemens and GE DICOM data.",
      "label": "CNI: DCM-CONVERT - DICOM conversion tool",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dcm-convert",
      "source": "https://github.com/cni/cni-dcm-convert",
      "url": "https://github.com/scitran/data",
      "version": "2.1.0"
    },
    {
      "author": "Scientific Transparency (RF Dougherty, K Hahn, R Bowen, G Schaefer, LM Perry)",
      "description": "DCM-CONVERT uses SciTran's data library (https://github.com/scitran/data) to convert raw DICOM data (within a zip archive) to NIfTI, Montage, and PNG (screenshot acquisitions) formats. DCM-CONVERT supports Siemens and GE DICOM data.",
      "label": "CNI: DCM-CONVERT - DICOM conversion tool",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dcm-convert",
      "source": "https://github.com/cni/cni-dcm-convert",
      "url": "https://github.com/scitran/data",
      "version": "2.0.1"
    }
  ],
  [
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from GE DICOM data.",
      "label": "CNI: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dicom-mr-classifier",
      "source": "https://github.com/cni/cni-dicom-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "3.3.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from GE DICOM data.",
      "label": "CNI: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dicom-mr-classifier",
      "source": "https://github.com/cni/cni-dicom-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "3.2.1"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from GE DICOM data.",
      "label": "CNI: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dicom-mr-classifier",
      "source": "https://github.com/cni/cni-dicom-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "3.2.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from GE DICOM data.",
      "label": "CNI: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dicom-mr-classifier",
      "source": "https://github.com/cni/cni-dicom-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "3.1.2"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from GE DICOM data.",
      "label": "CNI: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dicom-mr-classifier",
      "source": "https://github.com/cni/cni-dicom-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "3.1.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from GE DICOM data.",
      "label": "CNI: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dicom-mr-classifier",
      "source": "https://github.com/cni/cni-dicom-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "3.0.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from GE DICOM data.",
      "label": "CNI: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dicom-mr-classifier",
      "source": "https://github.com/cni/cni-dicom-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "2.1.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from GE DICOM data.",
      "label": "CNI: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dicom-mr-classifier",
      "source": "https://github.com/cni/cni-dicom-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "2.0.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from GE DICOM data.",
      "label": "CNI: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dicom-mr-classifier",
      "source": "https://github.com/cni/cni-dicom-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "1.0.2"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from GE DICOM data.",
      "label": "CNI: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dicom-mr-classifier",
      "source": "https://github.com/cni/cni-dicom-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "1.0.1"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from GE DICOM data.",
      "label": "CNI: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-dicom-mr-classifier",
      "source": "https://github.com/cni/cni-dicom-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "1.0.0"
    }
  ],
  [
    {
      "author": "Robert F. Dougherty, Hua Wu",
      "description": "Run QA metrics (displacement, signal spikes) to create a quality assurance report (png) for an fMRI NIfTI using CNI/NIMS code.",
      "label": "CNI: Quality Assurance Report (fMRI)",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-qa-report-fmri",
      "source": "https://github.com/cni/cni-qa-report-fmri",
      "url": "https://cni.stanford.edu/wiki/QA",
      "version": "1.0.4"
    },
    {
      "author": "Robert F. Dougherty, Hua Wu",
      "description": "Run QA metrics (displacement, signal spikes) to create a quality assurance report (png) for an fMRI NIfTI using CNI/NIMS code.",
      "label": "CNI: Quality Assurance Report (fMRI)",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-qa-report-fmri",
      "source": "https://github.com/cni/cni-qa-report-fmri",
      "url": "https://cni.stanford.edu/wiki/QA",
      "version": "1.0.3"
    },
    {
      "author": "Robert F. Dougherty, Hua Wu",
      "description": "Run QA metrics (displacement, signal spikes) to create a quality assurance report (png) for an fMRI NIfTI using CNI/NIMS code.",
      "label": "CNI: Quality Assurance Report (fMRI)",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-qa-report-fmri",
      "source": "https://github.com/cni/cni-qa-report-fmri",
      "url": "https://cni.stanford.edu/wiki/QA",
      "version": "1.0.2"
    },
    {
      "author": "Robert F. Dougherty, Hua Wu",
      "description": "Run QA metrics (displacement, signal spikes) to create a quality assurance report (png) for an fMRI NIfTI using CNI/NIMS code.",
      "label": "CNI: Quality Assurance Report (fMRI)",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "cni-qa-report-fmri",
      "source": "https://github.com/cni/cni-qa-report-fmri",
      "url": "https://cni.stanford.edu/wiki/QA",
      "version": "1.0.1"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "A gear to ingest data from CSV files into Flywheel metadata",
      "environment": {},
      "label": "CSV Importer",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "csv-importer",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/csv-importer",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/csv-importer",
      "version": "0.0.2"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "Jakob Wasserthal, Manfred Meyer, Hanns-Christian Breit, Joshy Cyriac, Shan Yang, Martin Segeroth, TotalSegmentator: robust segmentation of 104 anatomical structures in CT images",
      "command": "/opt/conda/bin/python run.py",
      "description": "Tool for segmentation of 104 classes in CT images. It was trained on a wide range of different CT images (different scanners, institutions, protocols,...) and therefore should work well on most images.",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "NVIDIA_DRIVER_CAPABILITIES": "compute,utility",
        "NVIDIA_REQUIRE_CUDA": "cuda>=11.2 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=440,driver<441 driver>=450",
        "NVIDIA_VISIBLE_DEVICES": "all",
        "PATH": "/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/conda/bin"
      },
      "label": "CT Total Segmentator",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "ct-total-segmentator",
      "source": "https://github.com/wasserth/TotalSegmentator",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/ct-total-segmentator",
      "version": "0.1.4_1.5.2"
    },
    {
      "author": "Flywheel",
      "cite": "Jakob Wasserthal, Manfred Meyer, Hanns-Christian Breit, Joshy Cyriac, Shan Yang, Martin Segeroth, TotalSegmentator: robust segmentation of 104 anatomical structures in CT images",
      "command": "/opt/conda/bin/python run.py",
      "description": "Tool for segmentation of 104 classes in CT images. It was trained on a wide range of different CT images (different scanners, institutions, protocols,...) and therefore should work well on most images.",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "NVIDIA_DRIVER_CAPABILITIES": "compute,utility",
        "NVIDIA_REQUIRE_CUDA": "cuda>=11.2 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=440,driver<441 driver>=450",
        "NVIDIA_VISIBLE_DEVICES": "all",
        "PATH": "/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/conda/bin"
      },
      "label": "CT Total Segmentator",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "ct-total-segmentator",
      "source": "https://github.com/wasserth/TotalSegmentator",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/ct-total-segmentator",
      "version": "0.1.2_1.5.2"
    }
  ],
  [
    {
      "author": "Flywheel <support@flywheel.io>",
      "command": "/flywheel/v0/run.py",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/curate-bids",
      "url": "https://bids.neuroimaging.io/",
      "version": "2.1.5_1.1.5"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "command": "poetry run python run.py",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/curate-bids",
      "url": "https://bids.neuroimaging.io/",
      "version": "2.1.4_1.0.9"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "command": "poetry run python run.py",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/curate-bids",
      "url": "https://bids.neuroimaging.io/",
      "version": "2.1.3_1.0.8"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "command": "poetry run python run.py",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/curate-bids",
      "url": "https://bids.neuroimaging.io/",
      "version": "2.1.3_1.0.7"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "command": "python3 run.py",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/curate-bids",
      "url": "https://bids.neuroimaging.io/",
      "version": "2.1.3_1.0.4"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "command": "python3 run.py",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/curate-bids",
      "url": "https://bids.neuroimaging.io/",
      "version": "2.1.3_1.0.3"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "command": "python3 run.py",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/curate-bids",
      "url": "https://bids.neuroimaging.io/",
      "version": "2.1.3_1.0.2"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "command": "python3 run.py",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/curate-bids",
      "url": "https://bids.neuroimaging.io/",
      "version": "2.1.2_1.0.1"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "command": "python3 run.py",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/curate-bids",
      "url": "https://bids.neuroimaging.io/",
      "version": "2.1.1_1.0.0"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "command": "python3 run.py",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://github.com/flywheel-apps/curate-bids",
      "url": "http://bids.neuroimaging.io/",
      "version": "1.0.0_0.9.1"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "command": "python3 run.py",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://github.com/flywheel-apps/curate-bids",
      "url": "http://bids.neuroimaging.io/",
      "version": "1.0.0_0.9.0"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "command": "python run.py",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://github.com/flywheel-apps/curate-bids",
      "url": "http://bids.neuroimaging.io/",
      "version": "0.6.8"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "command": "python run.py",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://github.com/flywheel-apps/curate-bids",
      "url": "http://bids.neuroimaging.io/",
      "version": "0.6.7"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "command": "python run.py",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://github.com/flywheel-apps/curate-bids",
      "url": "http://bids.neuroimaging.io/",
      "version": "0.6.5"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "command": "python run.py",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://github.com/flywheel-apps/curate-bids",
      "url": "http://bids.neuroimaging.io/",
      "version": "0.6.4"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "command": "python run.py",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://github.com/flywheel-apps/curate-bids",
      "url": "http://bids.neuroimaging.io/",
      "version": "0.6.3"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://github.com/flywheel-apps/curate-bids",
      "url": "http://bids.neuroimaging.io/",
      "version": "0.6.2"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://github.com/flywheel-apps/curate-bids",
      "url": "http://bids.neuroimaging.io/",
      "version": "0.6.0"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://github.com/flywheel-apps/curate-bids",
      "url": "http://bids.neuroimaging.io/",
      "version": "0.5.0"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://github.com/flywheel-apps/curate-bids",
      "url": "http://bids.neuroimaging.io/",
      "version": "0.3.6"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://github.com/flywheel-apps/curate-bids",
      "url": "http://bids.neuroimaging.io/",
      "version": "0.3.5"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://github.com/flywheel-apps/curate-bids",
      "url": "http://bids.neuroimaging.io/",
      "version": "0.3.4"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://github.com/flywheel-apps/curate-bids",
      "url": "http://bids.neuroimaging.io/",
      "version": "0.3.3"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://github.com/flywheel-apps/curate-bids",
      "url": "http://bids.neuroimaging.io/",
      "version": "0.3.2"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://github.com/flywheel-apps/curate-bids",
      "url": "http://bids.neuroimaging.io/",
      "version": "0.3.1"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://github.com/flywheel-apps/curate-bids",
      "url": "http://bids.neuroimaging.io/",
      "version": "0.3.0"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://github.com/flywheel-apps/curate-bids",
      "url": "http://bids.neuroimaging.io/",
      "version": "0.2.0"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "description": "Use this gear to initialize BIDS filenames and attributes on all files within a given project.",
      "label": "BIDS Curation",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "curate-bids",
      "source": "https://github.com/flywheel-apps/curate-bids",
      "url": "http://bids.neuroimaging.io/",
      "version": "0.1.0"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Convert DICOM file into PNG images using Maximum Intensity Projection(MIP) technique.",
      "environment": {
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0",
        "PATH": "/usr/lib/fsl/5.0:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      },
      "label": "DCM to MIPS",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dcm-to-mips",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dcm-to-mips",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/dcm-to-mips",
      "version": "0.1.0"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "dcm2niix doi: 10.1016/j.jneumeth.2016.03.001 & PyDeface doi: 10.5281/zenodo.3524401",
      "command": "poetry run python run.py",
      "description": "Implementation of Chris Rorden's dcm2niix tool for converting DICOM (or PAR/REC) to NIfTI (or NRRD), with an optional implementation of Poldrack Lab's PyDeface to remove facial structures from NIfTI. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "DCMCOMMIT": "bb3a6c35d2bbac6ed95acb2cd0df65f35e79b5fb",
        "FIXDCMCOMMIT": "918ee3327174c3c736e7b3839a556e0a709730c8",
        "FLYWHEEL": "/flywheel/v0",
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0",
        "PATH": ":/usr/lib/fsl/5.0:/root/.pyenv/shims:/root/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin::/usr/bin::/sbin:/bin"
      },
      "label": "dcm2niix: DICOM to NIfTI conversion (with PyDeface)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dcm2niix",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "1.4.4_1.0.20220720"
    },
    {
      "author": "Flywheel",
      "cite": "dcm2niix doi: 10.1016/j.jneumeth.2016.03.001 & PyDeface doi: 10.5281/zenodo.3524401",
      "command": "poetry run python run.py",
      "description": "Implementation of Chris Rorden's dcm2niix tool for converting DICOM (or PAR/REC) to NIfTI (or NRRD), with an optional implementation of Poldrack Lab's PyDeface to remove facial structures from NIfTI. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "DCMCOMMIT": "bb3a6c35d2bbac6ed95acb2cd0df65f35e79b5fb",
        "FIXDCMCOMMIT": "918ee3327174c3c736e7b3839a556e0a709730c8",
        "FLYWHEEL": "/flywheel/v0",
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0",
        "PATH": ":/usr/lib/fsl/5.0:/root/.pyenv/shims:/root/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin::/usr/bin::/sbin:/bin"
      },
      "label": "dcm2niix: DICOM to NIfTI conversion (with PyDeface)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dcm2niix",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "1.4.2_1.0.20220720"
    },
    {
      "author": "Flywheel",
      "cite": "dcm2niix doi: 10.1016/j.jneumeth.2016.03.001 & PyDeface doi: 10.5281/zenodo.3524401",
      "command": "poetry run python run.py",
      "description": "Implementation of Chris Rorden's dcm2niix tool for converting DICOM (or PAR/REC) to NIfTI (or NRRD), with an optional implementation of Poldrack Lab's PyDeface to remove facial structures from NIfTI. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0",
        "PATH": ":/usr/lib/fsl/5.0:/root/.pyenv/shims:/root/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin::/usr/bin::/sbin:/bin"
      },
      "label": "dcm2niix: DICOM to NIfTI conversion (with PyDeface)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dcm2niix",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "1.4.0_1.0.20211006"
    },
    {
      "author": "Flywheel",
      "cite": "dcm2niix doi: 10.1016/j.jneumeth.2016.03.001 & PyDeface doi: 10.5281/zenodo.3524401",
      "command": "poetry run python run.py",
      "description": "Implementation of Chris Rorden's dcm2niix tool for converting DICOM (or PAR/REC) to NIfTI (or NRRD), with an optional implementation of Poldrack Lab's PyDeface to remove facial structures from NIfTI. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0",
        "PATH": ":/usr/lib/fsl/5.0:/root/.pyenv/shims:/root/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin::/usr/bin::/sbin:/bin"
      },
      "label": "dcm2niix: DICOM to NIfTI conversion (with PyDeface)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dcm2niix",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "1.3.4_1.0.20211006"
    },
    {
      "author": "Flywheel",
      "cite": "dcm2niix doi: 10.1016/j.jneumeth.2016.03.001 & PyDeface doi: 10.5281/zenodo.3524401",
      "command": "poetry run python run.py",
      "description": "Implementation of Chris Rorden's dcm2niix tool for converting DICOM (or PAR/REC) to NIfTI  (or NRRD), with an optional implementation of Poldrack Lab's PyDeface to remove facial structures from NIfTI. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0",
        "PATH": ":/usr/lib/fsl/5.0:/root/.pyenv/shims:/root/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin::/usr/bin::/sbin:/bin"
      },
      "label": "dcm2niix: DICOM to NIfTI conversion (with PyDeface)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dcm2niix",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "1.3.3_1.0.20211006"
    },
    {
      "author": "Flywheel",
      "cite": "dcm2niix doi: 10.1016/j.jneumeth.2016.03.001 & PyDeface doi: 10.5281/zenodo.3524401",
      "command": "python3 run.py",
      "description": "Implementation of Chris Rorden's dcm2niix tool for converting DICOM (or PAR/REC) to NIfTI (or NRRD), with an optional implementation of Poldrack Lab's PyDeface to remove facial structures from NIfTI. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0",
        "PATH": "/usr/lib/fsl/5.0:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      },
      "label": "dcm2niix: DICOM to NIfTI conversion (with PyDeface)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dcm2niix",
      "source": "https://github.com/flywheel-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "1.3.1_1.0.20201102"
    },
    {
      "author": "Flywheel",
      "cite": "dcm2niix doi: 10.1016/j.jneumeth.2016.03.001 & PyDeface doi: 10.5281/zenodo.3524401",
      "command": "python3 run.py",
      "description": "Implementation of Chris Rorden's dcm2niix tool for converting DICOM (or PAR/REC) to NIfTI (or NRRD), with an optional implementation of Poldrack Lab's PyDeface to remove facial structures from NIfTI. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0",
        "PATH": "/usr/lib/fsl/5.0:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      },
      "label": "dcm2niix: DICOM to NIfTI conversion (with PyDeface)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dcm2niix",
      "source": "https://github.com/flywheel-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "1.3.0_1.0.20201102"
    },
    {
      "author": "Flywheel",
      "cite": "dcm2niix doi: 10.1016/j.jneumeth.2016.03.001 & PyDeface doi: 10.5281/zenodo.3524401",
      "command": "python3 run.py",
      "description": "Implementation of Chris Rorden's dcm2niix tool for converting DICOM (or PAR/REC) to NIfTI (or NRRD), with an optional implementation of Poldrack Lab's PyDeface to remove facial structures from NIfTI. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0",
        "PATH": "/usr/lib/fsl/5.0:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      },
      "label": "dcm2niix: DICOM to NIfTI conversion (with PyDeface)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dcm2niix",
      "source": "https://github.com/flywheel-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "1.2.1_1.0.20201102"
    },
    {
      "author": "Flywheel",
      "cite": "dcm2niix doi: 10.1016/j.jneumeth.2016.03.001 & PyDeface doi: 10.5281/zenodo.3524401",
      "command": "python3 run.py",
      "description": "Implementation of Chris Rorden's dcm2niix tool for converting DICOM (or PAR/REC) to NIfTI (or NRRD), with an optional implementation of Poldrack Lab's PyDeface to remove facial structures from NIfTI. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0",
        "PATH": "/usr/lib/fsl/5.0:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      },
      "label": "dcm2niix: DICOM to NIfTI conversion (with PyDeface)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dcm2niix",
      "source": "https://github.com/flywheel-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "1.2.0_1.0.20201102"
    },
    {
      "author": "Flywheel",
      "cite": "dcm2niix doi: 10.1016/j.jneumeth.2016.03.001 & PyDeface doi: 10.5281/zenodo.3524401",
      "command": "python3 run.py",
      "description": "Implementation of Chris Rorden's dcm2niix for converting DICOM to NIfTI, with an optional implementation of Poldrack Lab's PyDeface to remove facial structures from NIfTI. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0",
        "PATH": "/usr/lib/fsl/5.0:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      },
      "label": "DICOM to NIfTI conversion using dcm2niix with an optional implementation of PyDeface.",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dcm2niix",
      "source": "https://github.com/flywheel-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "1.1.0_1.0.20201102"
    },
    {
      "author": "Flywheel",
      "cite": "dcm2niix doi: 10.1016/j.jneumeth.2016.03.001 & PyDeface doi: 10.5281/zenodo.3524401",
      "command": "python3 run.py",
      "description": "Implementation of Chris Rorden's dcm2niix for converting DICOM to NIfTI, with an optional implementation of Poldrack Lab's PyDeface to remove facial structures from NIfTI. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0",
        "PATH": "/usr/lib/fsl/5.0:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      },
      "label": "DICOM to NIfTI conversion using dcm2niix with an optional implementation of PyDeface.",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dcm2niix",
      "source": "https://github.com/flywheel-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix & https://github.com/poldracklab/pydeface",
      "version": "1.0.0_1.0.20200331"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niix (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.8.0_1.0.20200331"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niix (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: dcm2nii DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.8.0_1.0.20190902"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niix (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: dcm2nii DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.7.9_1.0.20190410"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niix (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: dcm2nii DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.7.8_1.0.20190410"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niix (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: dcm2nii DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.7.8_1.0.20181114"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: dcm2nii DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.7.7_1.0.20181114"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: dcm2nii DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.7.6_1.0.20180622_5af76a9"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: dcm2nii DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.7.5_1.0.20180622_5af76a9"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: dcm2nii DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.7.4_1.0.20180622_5af76a9"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: dcm2nii DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.7.3_1.0.20180622"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: dcm2nii DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.7.2_1.0.20180622"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: dcm2nii DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.7.1_1.0.20180622"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niix (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: dcm2nii DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.7.10_1.0.20190410"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: dcm2nii DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.7.0_1.0.20180622"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: dcm2nii DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.6.1_1.0.20180622"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: dcm2nii DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.6.0_1.0.20180622"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: dcm2nii DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.5.4_1.0.20180328"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: dcm2nii DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.5.2_1.0.20180328"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: dcm2nii DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.5.1_1.0.20180328"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: dcm2nii DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.5.0_1.0.20171215"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX (OpenJPEG build, 64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: dcm2nii DICOM to NIfTI converter",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.3.4_1.0.20171215"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX version v1.0.20170923 (OpenJPEG build) GCC4.8.4 (64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: v1.0.20170923",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.3.3_1.0.20171215"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX version v1.0.20170923 (OpenJPEG build) GCC4.8.4 (64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: v1.0.20170923",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.3.2"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX version v1.0.20170923 (OpenJPEG build) GCC4.8.4 (64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: v1.0.20170923",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.3.1"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX version v1.0.20170923 (OpenJPEG build) GCC4.8.4 (64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: v1.0.20170923",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.3"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX version v1.0.20170821 (OpenJPEG build) GCC4.8.4 (64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: v1.0.20170821",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.2.1"
    },
    {
      "author": "Chris Rorden (@neurolabusc)",
      "description": "Chris Rorden's dcm2niiX version v1.0.20170818 (OpenJPEG build) GCC4.8.4 (64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: v1.0.20170818",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://github.com/rordenlab/dcm2niix",
      "version": "0.2"
    },
    {
      "author": "Chris Rorden",
      "description": "Chris Rorden's dcm2niiX version v1.0.20170130 (64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: v1.0.20170130",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niix",
      "url": "https://www.nitrc.org/projects/dcm2nii",
      "version": "0.1.1"
    },
    {
      "author": "Chris Rorden",
      "description": "Chris Rorden's dcm2niiX version v1.0.20170130 (64-bit Linux). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: v1.0.20170130",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niiix",
      "url": "https://www.nitrc.org/projects/dcm2nii",
      "version": "0.1.0"
    },
    {
      "author": "Chris Rorden",
      "description": "Chris Rorden's dcm2niiX version 6June2016 (64-bit). dcm2niix is a popular tool for converting images from the complicated formats used by scanner manufacturers (DICOM, PAR/REC) to the simple NIfTI format used by many scientific tools. dcm2niix works for all modalities (CT, MRI, PET, SPECT) and sequence types. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "DCM2NIIX: v.6June2016",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dcm2niix",
      "source": "https://github.com/scitran-apps/dcm2niiix",
      "url": "https://www.nitrc.org/projects/dcm2nii",
      "version": "0.0.3"
    }
  ],
  [
    {
      "author": "Jennifer Reiter <jenniferreiter@invenshure.com>",
      "description": "This Gear produces a 1GB .txt file.",
      "label": "Debug File Generator: Creating a 1 GB file",
      "license": "Other",
      "maintainer": "Jennifer Reiter <jenniferreiter@invenshure.com>",
      "name": "debug-generatefile",
      "source": "https://github.com/flywheel-apps/debug-generatefile",
      "url": "https://github.com/flywheel-apps/debug-generatefile",
      "version": "0.0.1"
    }
  ],
  [
    {
      "author": "Flywheel, Inc.",
      "command": "python /flywheel/v0/run.py",
      "description": "Profile-based anonymization and export of files within a project. Files within the source project will be anonymized (according to a required template) and exported to a specified project. Output is a csv file reporting the status of all exported items.",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "LANG": "C.UTF-8",
        "PATH": "/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PWD": "/flywheel/v0",
        "PYTHONPATH": "/flywheel/v0",
        "PYTHON_GET_PIP_SHA256": "394be00f13fa1b9aaa47e911bdb59a09c3b2986472130f30aa0bfaf7f3980637",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d5cb0afaf23b8520f1bbcfed521017b4a95f5c01/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.8.16"
      },
      "label": "De-identified Export",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "deid-export",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/deid-export",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/deid-export/-/blob/main/README.md",
      "version": "1.5.1"
    },
    {
      "author": "Flywheel, Inc.",
      "command": "poetry run python /flywheel/v0/run.py",
      "description": "Profile-based anonymization and export of files within a project. Files within the source project will be anonymized (according to a required template) and exported to a specified project. Output is a csv file reporting the status of all exported items.",
      "environment": {
        "LANG": "C.UTF-8",
        "PYTHONPATH": "/flywheel/v0"
      },
      "label": "De-identified Export",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "deid-export",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/deid-export",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/deid-export/-/blob/main/README.md",
      "version": "1.3.0"
    },
    {
      "author": "Flywheel, Inc.",
      "command": "poetry run python /flywheel/v0/run.py",
      "description": "Profile-based anonymization and export of files within a project. Files within the source project will be anonymized (according to a required template) and exported to a specified project. Output is a csv file reporting the status of all exported items.",
      "environment": {
        "LANG": "C.UTF-8",
        "PYTHONPATH": "/flywheel/v0"
      },
      "label": "De-identified Export",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "deid-export",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/deid-export",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/deid-export/-/blob/main/README.md",
      "version": "1.2.3"
    },
    {
      "author": "Flywheel, Inc.",
      "command": "poetry run python /flywheel/v0/run.py",
      "description": "Profile-based anonymization and export of files within a project. Files within the source project will be anonymized (according to a required template) and exported to a specified project. Output is a csv file reporting the status of all exported items.",
      "environment": {
        "LANG": "C.UTF-8",
        "PYTHONPATH": "/flywheel/v0"
      },
      "label": "De-identified Export",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "deid-export",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/deid-export",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/deid-export/-/blob/main/README.md",
      "version": "1.2.2"
    },
    {
      "author": "Flywheel, Inc.",
      "command": "poetry run python /flywheel/v0/run.py",
      "description": "Profile-based anonymization and export of files within a project. Files within the source project will be anonymized (according to a required template) and exported to a specified project. Output is a csv file reporting the status of all exported items.",
      "environment": {
        "LANG": "C.UTF-8",
        "PYTHONPATH": "/flywheel/v0"
      },
      "label": "De-identified Export",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "deid-export",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/deid-export",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/deid-export/-/blob/master/README.md",
      "version": "1.2.1"
    },
    {
      "author": "Flywheel, Inc.",
      "command": "poetry run python /flywheel/v0/run.py",
      "description": "Profile-based anonymization and export of files within a project. Files within the source project will be anonymized (according to a required template) and exported to a specified project. Output is a csv file reporting the status of all exported items.",
      "environment": {
        "LANG": "C.UTF-8",
        "PYTHONPATH": "/flywheel/v0"
      },
      "label": "De-identified Export",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "deid-export",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/deid-export",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/deid-export/-/blob/master/README.md",
      "version": "1.2.0"
    },
    {
      "author": "Flywheel, Inc.",
      "command": "poetry run python /flywheel/v0/run.py",
      "description": "Profile-based anonymization and export of files within a project. Files within the source project will be anonymized (according to a required template) and exported to a specified project. Output is a csv file reporting the status of all exported items.",
      "environment": {
        "LANG": "C.UTF-8",
        "PYTHONPATH": "/flywheel/v0"
      },
      "label": "De-identified Export",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "deid-export",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/fw-gear-deid-export",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/fw-gear-deid-export/-/blob/master/README.md",
      "version": "1.0.0"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "Fixes various issues in dicoms.",
      "environment": {
        "BUILD_TIME": "2023-03-20T11:43:06Z",
        "COMMIT": "master.3a9476be",
        "COMMIT_REF": "main",
        "COMMIT_SHA": "fa0da4dd",
        "COMMIT_TAG": "",
        "COMMIT_TIME": "2021-10-25T09:24:15+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GDCM_VERSION": "3.0.9",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.0",
        "PATH": "/root/.cargo/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.11",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PWD": "/flywheel/v0",
        "PYSITE": "/usr/local/lib/python3.11/site-packages",
        "PYTHON_GET_PIP_SHA256": "394be00f13fa1b9aaa47e911bdb59a09c3b2986472130f30aa0bfaf7f3980637",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d5cb0afaf23b8520f1bbcfed521017b4a95f5c01/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.3.1",
        "PYTHON_SETUPTOOLS_VERSION": "65.5.1",
        "PYTHON_VERSION": "3.11.2",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "Dicom Fixer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-fixer",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-fixer",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-fixer/-/blob/main/README.md",
      "version": "0.9.3"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "Fixes various issues in dicoms.",
      "environment": {
        "BUILD_TIME": "2023-03-20T11:43:06Z",
        "COMMIT": "master.3a9476be",
        "COMMIT_REF": "main",
        "COMMIT_SHA": "fa0da4dd",
        "COMMIT_TAG": "",
        "COMMIT_TIME": "2021-10-25T09:24:15+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GDCM_VERSION": "3.0.9",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.0",
        "PATH": "/root/.cargo/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.11",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PWD": "/flywheel/v0",
        "PYSITE": "/usr/local/lib/python3.11/site-packages",
        "PYTHON_GET_PIP_SHA256": "394be00f13fa1b9aaa47e911bdb59a09c3b2986472130f30aa0bfaf7f3980637",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d5cb0afaf23b8520f1bbcfed521017b4a95f5c01/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.3.1",
        "PYTHON_SETUPTOOLS_VERSION": "65.5.1",
        "PYTHON_VERSION": "3.11.2",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "Dicom Fixer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-fixer",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-fixer",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-fixer/-/blob/main/README.md",
      "version": "0.9.2"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "Fixes various issues in dicoms.",
      "environment": {
        "BUILD_TIME": "2023-03-20T11:43:06Z",
        "COMMIT": "master.3a9476be",
        "COMMIT_REF": "main",
        "COMMIT_SHA": "fa0da4dd",
        "COMMIT_TAG": "",
        "COMMIT_TIME": "2021-10-25T09:24:15+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GDCM_VERSION": "3.0.9",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.0",
        "PATH": "/root/.cargo/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.11",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PWD": "/flywheel/v0",
        "PYSITE": "/usr/local/lib/python3.11/site-packages",
        "PYTHON_GET_PIP_SHA256": "394be00f13fa1b9aaa47e911bdb59a09c3b2986472130f30aa0bfaf7f3980637",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d5cb0afaf23b8520f1bbcfed521017b4a95f5c01/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.3.1",
        "PYTHON_SETUPTOOLS_VERSION": "65.5.1",
        "PYTHON_VERSION": "3.11.2",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "Dicom Fixer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-fixer",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-fixer",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-fixer/-/blob/main/README.md",
      "version": "0.9.1"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "Fixes various issues in dicoms.",
      "environment": {
        "BUILD_TIME": "2023-03-20T11:43:06Z",
        "COMMIT": "master.3a9476be",
        "COMMIT_REF": "main",
        "COMMIT_SHA": "fa0da4dd",
        "COMMIT_TAG": "",
        "COMMIT_TIME": "2021-10-25T09:24:15+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GDCM_VERSION": "3.0.9",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.0",
        "PATH": "/root/.cargo/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.11",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PWD": "/flywheel/v0",
        "PYSITE": "/usr/local/lib/python3.11/site-packages",
        "PYTHON_GET_PIP_SHA256": "394be00f13fa1b9aaa47e911bdb59a09c3b2986472130f30aa0bfaf7f3980637",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d5cb0afaf23b8520f1bbcfed521017b4a95f5c01/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.3.1",
        "PYTHON_SETUPTOOLS_VERSION": "65.5.1",
        "PYTHON_VERSION": "3.11.2",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "Dicom Fixer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-fixer",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-fixer",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-fixer/-/blob/main/README.md",
      "version": "0.9.0"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "Fixes various issues in dicoms.",
      "environment": {
        "BUILD_TIME": "2023-03-20T11:43:06Z",
        "COMMIT": "master.3a9476be",
        "COMMIT_REF": "main",
        "COMMIT_SHA": "fa0da4dd",
        "COMMIT_TAG": "",
        "COMMIT_TIME": "2021-10-25T09:24:15+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GDCM_VERSION": "3.0.9",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.0",
        "PATH": "/root/.cargo/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.11",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PWD": "/flywheel/v0",
        "PYSITE": "/usr/local/lib/python3.11/site-packages",
        "PYTHON_GET_PIP_SHA256": "394be00f13fa1b9aaa47e911bdb59a09c3b2986472130f30aa0bfaf7f3980637",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d5cb0afaf23b8520f1bbcfed521017b4a95f5c01/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.3.1",
        "PYTHON_SETUPTOOLS_VERSION": "65.5.1",
        "PYTHON_VERSION": "3.11.2",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "Dicom Fixer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-fixer",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-fixer",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-fixer/-/blob/main/README.md",
      "version": "0.8.3"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "Fixes various issues in dicoms.",
      "environment": {
        "COMMIT": "master.3a9476be",
        "COMMIT_TAG": "",
        "COMMIT_TIME": "2021-10-25T09:24:15+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GDCM_VERSION": "3.0.9",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.0",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.11",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PYTHON_GET_PIP_SHA256": "01249aa3e58ffb3e1686b7141b4e9aac4d398ef4ac3012ed9dff8dd9f685ffe0",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d781367b97acf0ece7e9e304bf281e99b618bf10/public/get-pip.py",
        "PYTHON_PIP_VERSION": "21.2.4",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.9.7"
      },
      "label": "Dicom Fixer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-fixer",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-fixer",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-fixer/-/blob/main/README.md",
      "version": "0.7.4"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Fixes various issues in dicoms.",
      "environment": {
        "COMMIT": "master.3a9476be",
        "COMMIT_TAG": "",
        "COMMIT_TIME": "2021-10-25T09:24:15+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GDCM_VERSION": "3.0.9",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.0",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.11",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PYTHON_GET_PIP_SHA256": "01249aa3e58ffb3e1686b7141b4e9aac4d398ef4ac3012ed9dff8dd9f685ffe0",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d781367b97acf0ece7e9e304bf281e99b618bf10/public/get-pip.py",
        "PYTHON_PIP_VERSION": "21.2.4",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.9.7"
      },
      "label": "Dicom Fixer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-fixer",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-fixer",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-fixer/-/blob/main/README.md",
      "version": "0.5.3"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Fixes various issues in dicoms.",
      "environment": {
        "COMMIT": "master.3a9476be",
        "COMMIT_TAG": "",
        "COMMIT_TIME": "2021-10-25T09:24:15+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GDCM_VERSION": "3.0.9",
        "GJO_VERSION": "1.0.2",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.0",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.11",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PYTHON_GET_PIP_SHA256": "01249aa3e58ffb3e1686b7141b4e9aac4d398ef4ac3012ed9dff8dd9f685ffe0",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d781367b97acf0ece7e9e304bf281e99b618bf10/public/get-pip.py",
        "PYTHON_PIP_VERSION": "21.2.4",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.9.7"
      },
      "label": "Dicom Fixer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-fixer",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-fixer",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-fixer/-/blob/main/README.md",
      "version": "0.4.0"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Fixes various issues in dicoms.",
      "environment": {},
      "label": "Dicom Fixer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-fixer",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-fixer",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-fixer/-/blob/main/README.md",
      "version": "0.3.6"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Fixes various issues in dicoms.",
      "environment": {},
      "label": "Dicom Fixer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-fixer",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-fixer",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-fixer/-/blob/main/README.md",
      "version": "0.2.1"
    }
  ],
  [
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/flywheel-apps/dicom-mr-classifier/releases",
      "url": "https://github.com/flywheel-apps/dicom-mr-classifier",
      "version": "1.4.8"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/flywheel-apps/dicom-mr-classifier/releases",
      "url": "https://github.com/flywheel-apps/dicom-mr-classifier",
      "version": "1.4.7"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/flywheel-apps/dicom-mr-classifier/releases",
      "url": "https://github.com/flywheel-apps/dicom-mr-classifier",
      "version": "1.4.6"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/flywheel-apps/dicom-mr-classifier/releases",
      "url": "https://github.com/flywheel-apps/dicom-mr-classifier",
      "version": "1.4.5"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/flywheel-apps/dicom-mr-classifier/releases",
      "url": "https://github.com/flywheel-apps/dicom-mr-classifier",
      "version": "1.4.4"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier/releases",
      "url": "https://github.com/scitran-apps/dicom-mr-classifier",
      "version": "1.4.2"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/flywheel-apps/dicom-mr-classifier/releases",
      "url": "https://github.com/flywheel-apps/dicom-mr-classifier",
      "version": "1.4.10"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier/releases",
      "url": "https://github.com/scitran-apps/dicom-mr-classifier",
      "version": "1.4.1"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier/releases",
      "url": "https://github.com/scitran-apps/dicom-mr-classifier",
      "version": "1.4.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier/releases",
      "url": "https://github.com/scitran-apps/dicom-mr-classifier",
      "version": "1.3.2"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier/releases",
      "url": "https://github.com/scitran-apps/dicom-mr-classifier",
      "version": "1.3.1"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier/releases/tag/1.3.0",
      "url": "https://github.com/scitran-apps/dicom-mr-classifier",
      "version": "1.3.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "1.2.2"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "1.2.1"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "1.2.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "1.1.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "1.0.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.9.1"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.9.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.8.2"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.8.1"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.8.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.7.6"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran: DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.7.5"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.7.4"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.7.3"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.7.1"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.7.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.6.1"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.6.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata and determine classification from raw DICOM data. Compatible with Siemens, Philips, and GE DICOMs.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.5.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract DICOM header metadata and determine measurement classification. Works with Siemens, Philips, and GE DICOM data.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.4.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract DICOM header metadata and determine measurement classification. Works with Siemens, Philips, and GE DICOM data.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.3.3"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract DICOM header metadata and determine measurement classification. Works with Siemens, Philips, and GE DICOM data.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.3.2"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract DICOM header metadata and determine measurement classification. Works with Siemens, Philips, and GE DICOM data.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.3.1"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract DICOM header metadata and determine measurement classification. Works with Siemens, Philips, and GE DICOM data.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.3.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract DICOM header metadata and determine measurement classification. Works with Siemens, Philips, and GE DICOM data.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.2.7"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract DICOM header metadata and determine measurement classification. Works with Siemens, Philips, and GE DICOM data.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.2.6"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract DICOM header metadata and determine measurement classification. Works with Siemens, Philips, and GE DICOM data.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.2.5"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract DICOM header metadata and determine measurement classification. Works with Siemens, Philips, and GE DICOM data.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.2.4"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata from raw DICOM data from Siemens, Philips, or GE.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.2.3"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata from raw DICOM data from Siemens, Philips, or GE.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.2.2"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata from raw DICOM data from Siemens, Philips, or GE.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.2.1"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata from raw DICOM data from Siemens, Philips, or GE.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.2"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata from raw DICOM data from Siemens, Philips, or GE.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.1.9"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata from raw DICOM data from Siemens, Philips, or GE.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.1.8"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata from raw DICOM data from Siemens, Philips, or GE.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.1.12"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata from raw DICOM data from Siemens, Philips, or GE.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.1.11"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "Extract metadata from raw DICOM data from Siemens, Philips, or GE.",
      "label": "SciTran DICOM MR Classifier",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dicom-mr-classifier",
      "source": "https://github.com/scitran-apps/dicom-mr-classifier",
      "url": "https://scitran.github.io",
      "version": "0.1.10"
    }
  ],
  [
    {
      "author": "Flywheel <support@flywheel.io>",
      "cite": "dicom3tools: 1993-2021, David A. Clunie DBA PixelMed Publishing.",
      "command": "poetry run python run.py",
      "description": "Validate dicom archive on a set of hardcoded and user-specified rules",
      "environment": {
        "COMMIT": "main.bcc9ef6b",
        "COMMIT_TIME": "2022-01-21T16:12:11+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GDCM_VERSION": "3.0.10",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.1",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.12",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PYTHON_GET_PIP_SHA256": "c518250e91a70d7b20cceb15272209a4ded2a0c263ae5776f129e0d9b5674309",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/3cb8888cc2869620f57d5d2da64da38f516078c7/public/get-pip.py",
        "PYTHON_PIP_VERSION": "21.2.4",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.9.10",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "Dicom QC",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-qc",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-qc",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-qc/-/blob/master/README.md",
      "version": "0.4.9"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "cite": "dicom3tools: 1993-2021, David A. Clunie DBA PixelMed Publishing.",
      "command": "poetry run python run.py",
      "description": "Validate dicom archive on a set of hardcoded and user-specified rules",
      "environment": {
        "COMMIT": "main.bcc9ef6b",
        "COMMIT_TIME": "2022-01-21T16:12:11+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GDCM_VERSION": "3.0.10",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.1",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.12",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PYTHON_GET_PIP_SHA256": "c518250e91a70d7b20cceb15272209a4ded2a0c263ae5776f129e0d9b5674309",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/3cb8888cc2869620f57d5d2da64da38f516078c7/public/get-pip.py",
        "PYTHON_PIP_VERSION": "21.2.4",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.9.10",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "Dicom QC",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-qc",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-qc",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-qc/-/blob/master/README.md",
      "version": "0.4.1"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Validate dicom archive on a set of hardcoded and user-specified rules",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.11",
        "POETRY_VIRTUALENVS_CREATE": "false"
      },
      "label": "Dicom QC",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-qc",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-qc",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-qc/-/blob/master/README.md",
      "version": "0.3.0"
    }
  ],
  [
    {
      "author": "Flywheel",
      "command": "poetry run python run.py",
      "description": "DICOM Send utilizes DCMTK's storescu to send DICOM data from a Flywheel instance to a destination DICOM server, hosted externally. This Gear supports the transmission of individual DICOM files and archives, as well as the transmission of an entire session when a specific input is not provided. Note that a private tag is added to each DICOM file to be transmitted (Flywheel:DICOM Send, at group 0x0021). Importantly, the external DICOM server must be reachable from the engine host of the Flywheel instance.",
      "environment": {
        "COMMIT": "main.66a70563",
        "COMMIT_TIME": "2022-04-04T09:04:44+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.1",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.13",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PYSITE": "/usr/local/lib/python3.10/site-packages",
        "PYTHON_GET_PIP_SHA256": "e235c437e5c7d7524fbce3880ca39b917a73dc565e0c813465b7a7a329bb279a",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/38e54e5de07c66e875c11a1ebbdb938854625dd8/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "58.1.0",
        "PYTHON_VERSION": "3.10.4",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "DICOM Send",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-send",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-send",
      "url": "http://support.dcmtk.org/docs/storescu.html",
      "version": "4.0.2"
    },
    {
      "author": "Flywheel",
      "command": "poetry run python run.py",
      "description": "DICOM Send utilizes DCMTK's storescu to send DICOM data from a Flywheel instance to a destination DICOM server, hosted externally. This Gear supports the transmission of individual DICOM files and archives, as well as the transmission of an entire session when a specific input is not provided. Note that a private tag is added to each DICOM file to be transmitted (Flywheel:DICOM Send, at group 0x0021). Importantly, the external DICOM server must be reachable from the engine host of the Flywheel instance.",
      "environment": {
        "COMMIT": "main.66a70563",
        "COMMIT_TIME": "2022-04-04T09:04:44+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.1",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.13",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PYSITE": "/usr/local/lib/python3.10/site-packages",
        "PYTHON_GET_PIP_SHA256": "e235c437e5c7d7524fbce3880ca39b917a73dc565e0c813465b7a7a329bb279a",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/38e54e5de07c66e875c11a1ebbdb938854625dd8/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "58.1.0",
        "PYTHON_VERSION": "3.10.4",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "DICOM Send",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-send",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-send",
      "url": "http://support.dcmtk.org/docs/storescu.html",
      "version": "4.0.1"
    },
    {
      "author": "Flywheel",
      "command": "poetry run python run.py",
      "description": "DICOM Send utilizes DCMTK's storescu to send DICOM data from a Flywheel instance to a destination DICOM server, hosted externally. This Gear supports the transmission of individual DICOM files and archives, as well as the transmission of an entire session when a specific input is not provided. Note that a private tag is added to each DICOM file to be transmitted (Flywheel:DICOM Send, at group 0x0021). Importantly, the external DICOM server must be reachable from the engine host of the Flywheel instance.",
      "environment": {
        "COMMIT": "main.66a70563",
        "COMMIT_TIME": "2022-04-04T09:04:44+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.1",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.13",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PYSITE": "/usr/local/lib/python3.10/site-packages",
        "PYTHON_GET_PIP_SHA256": "e235c437e5c7d7524fbce3880ca39b917a73dc565e0c813465b7a7a329bb279a",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/38e54e5de07c66e875c11a1ebbdb938854625dd8/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "58.1.0",
        "PYTHON_VERSION": "3.10.4",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "DICOM Send",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-send",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-send",
      "url": "http://support.dcmtk.org/docs/storescu.html",
      "version": "3.0.3"
    },
    {
      "author": "Flywheel",
      "command": "poetry run python run.py",
      "description": "DICOM Send utilizes DCMTK's storescu to send DICOM data from a Flywheel instance to a destination DICOM server, hosted externally. This Gear supports the transmission of individual DICOM files and archives, as well as the transmission of an entire session when a specific input is not provided. Note that a private tag is added to each DICOM file to be transmitted (Flywheel:DICOM Send, at group 0x0021). Importantly, the external DICOM server must be reachable from the engine host of the Flywheel instance.",
      "environment": {
        "COMMIT": "main.66a70563",
        "COMMIT_TIME": "2022-04-04T09:04:44+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.1",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.13",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PYSITE": "/usr/local/lib/python3.10/site-packages",
        "PYTHON_GET_PIP_SHA256": "e235c437e5c7d7524fbce3880ca39b917a73dc565e0c813465b7a7a329bb279a",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/38e54e5de07c66e875c11a1ebbdb938854625dd8/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "58.1.0",
        "PYTHON_VERSION": "3.10.4",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "DICOM Send",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-send",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-send",
      "url": "http://support.dcmtk.org/docs/storescu.html",
      "version": "3.0.2"
    },
    {
      "author": "Flywheel",
      "command": "poetry run python run.py",
      "description": "DICOM Send utilizes DCMTK's storescu to send DICOM data from a Flywheel instance to a destination DICOM server, hosted externally. This Gear supports the transmission of individual DICOM files and archives, as well as the transmission of an entire session when a specific input is not provided. Note that a private tag is added to each DICOM file to be transmitted (Flywheel:DICOM Send, at group 0x0021). Importantly, the external DICOM server must be reachable from the engine host of the Flywheel instance.",
      "environment": {
        "COMMIT": "main.66a70563",
        "COMMIT_TIME": "2022-04-04T09:04:44+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.1",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.13",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PYSITE": "/usr/local/lib/python3.10/site-packages",
        "PYTHON_GET_PIP_SHA256": "e235c437e5c7d7524fbce3880ca39b917a73dc565e0c813465b7a7a329bb279a",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/38e54e5de07c66e875c11a1ebbdb938854625dd8/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "58.1.0",
        "PYTHON_VERSION": "3.10.4",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "DICOM Send",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-send",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/dicom-send",
      "url": "http://support.dcmtk.org/docs/storescu.html",
      "version": "3.0.1"
    },
    {
      "author": "Flywheel",
      "command": "python3 run.py",
      "description": "DICOM Send utilizes DCMTK's storescu to send DICOM data from a Flywheel instance to a destination DICOM server, hosted externally. This Gear supports the transmission of individual DICOM files and archives, as well as the transmission of an entire session when a specific input is not provided. Note that a private tag is added to each DICOM file to be transmitted (Flywheel:DICOM Send, at group 0x0021). Importantly, the external DICOM server must be reachable from the engine host of the Flywheel instance.",
      "label": "DCMTK: DICOM Send",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-send",
      "source": "https://github.com/flywheel-apps/dicom-send",
      "url": "http://support.dcmtk.org/docs/storescu.html",
      "version": "2.1.1"
    },
    {
      "author": "Flywheel",
      "command": "python3 run.py",
      "description": "DICOM Send utilizes DCMTK's storescu to send DICOM data from a Flywheel instance to a destination DICOM server, hosted externally. This Gear supports the transmission of individual DICOM files and archives, as well as the transmission of an entire session when a specific input is not provided. Note that a private tag is added to each DICOM file to be transmitted (Flywheel:DICOM Send, at group 0x0021). Importantly, the external DICOM server must be reachable from the engine host of the Flywheel instance.",
      "label": "DCMTK: DICOM Send",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-send",
      "source": "https://github.com/flywheel-apps/dicom-send",
      "url": "http://support.dcmtk.org/docs/storescu.html",
      "version": "2.1.0"
    },
    {
      "author": "Flywheel",
      "command": "python3 run.py",
      "description": "DICOM Send utilizes DCMTK's storescu to send DICOM data from a Flywheel instance to a destination DICOM server, hosted externally. This Gear supports the transmission of individual DICOM files and archives, as well as the transmission of an entire session when a specific input is not provided. Note that a private tag is added to each DICOM file to be transmitted (Flywheel:DICOM Send, at group 0x0021). Importantly, the external DICOM server must be reachable from the engine host of the Flywheel instance.",
      "label": "DCMTK: DICOM Send",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-send",
      "source": "https://github.com/flywheel-apps/dicom-send",
      "url": "http://support.dcmtk.org/docs/storescu.html",
      "version": "2.0.0"
    },
    {
      "author": "Flywheel",
      "command": "python3 run.py",
      "description": "DICOM Send utilizes DCMTK's storescu to send DICOM data from a Flywheel instance to a destination DICOM server, hosted externally. This Gear supports the transmission of individual DICOM files and archives, as well as the transmission of an entire session when a specific input is not provided. Note that a private tag is added to each DICOM file to be transmitted (Flywheel:DICOM Send, at group 0x0021). Importantly, the external DICOM server must be reachable from the engine host of the Flywheel instance.",
      "label": "DCMTK: DICOM Send",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-send",
      "source": "https://github.com/flywheel-apps/dicom-send",
      "url": "http://support.dcmtk.org/docs/storescu.html",
      "version": "1.1.2"
    },
    {
      "author": "Flywheel",
      "command": "python3 run.py",
      "description": "DICOM Send utilizes DCMTK's storescu to send DICOM data from a Flywheel instance to a destination DICOM server, hosted externally. This Gear supports the transmission of individual DICOM files and archives, as well as the transmission of an entire session when a specific input is not provided. Note that a private tag is added to each DICOM file to be transmitted (Flywheel:DICOM Send, at group 0x0021). Importantly, the external DICOM server must be reachable from the engine host of the Flywheel instance.",
      "label": "DCMTK: DICOM Send",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-send",
      "source": "https://github.com/flywheel-apps/dicom-send",
      "url": "http://support.dcmtk.org/docs/storescu.html",
      "version": "1.1.1"
    },
    {
      "author": "Flywheel",
      "command": "python3 run.py",
      "description": "DICOM Send utilizes DCMTK's storescu to send DICOM data from a Flywheel instance to a destination DICOM server, hosted externally. This Gear supports the transmission of individual DICOM files and archives, as well as the transmission of an entire session when a specific input is not provided. Note that a private tag is added to each DICOM file to be transmitted (Flywheel:DICOM Send, at group 0x0021). Importantly, the external DICOM server must be reachable from the engine host of the Flywheel instance.",
      "label": "DCMTK: DICOM Send",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-send",
      "source": "https://github.com/flywheel-apps/dicom-send",
      "url": "http://support.dcmtk.org/docs/storescu.html",
      "version": "1.1.0"
    },
    {
      "author": "Flywheel",
      "command": "python3 run.py",
      "description": "DICOM Send utilizes DCMTK's storescu to send DICOM data from a Flywheel instance to a destination DICOM server, hosted externally. This Gear supports the transmission of individual DICOM files and archives, as well as the transmission of an entire session when a specific input is not provided. Note that a private tag is added to each DICOM file to be transmitted (Flywheel:DICOM Send, at group 0x0021). Importantly, the external DICOM server must be reachable from the engine host of the Flywheel instance.",
      "label": "DCMTK: DICOM Send",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-send",
      "source": "https://github.com/flywheel-apps/dicom-send",
      "url": "http://support.dcmtk.org/docs/storescu.html",
      "version": "1.0.0"
    },
    {
      "author": "Imad Nijim",
      "description": "The DICOM Send Gear uses DCMTK dcmstoresu to send DICOM data from Flywheel to a DICOM server.  The DICOM server must be reachable from the host of the Flywheel instance.",
      "label": "DICOM Send",
      "license": "Other",
      "maintainer": "support@flywheel.io",
      "name": "dicom-send",
      "source": "https://flywheel.io",
      "url": "http://support.dcmtk.org/docs/storescu.html",
      "version": "0.9"
    },
    {
      "author": "Imad Nijim",
      "description": "The DICOM Send Gear uses DCMTK dcmstoresu to send DICOM data from Flywheel to a DICOM server.  The DICOM server must be reachable from the host of the Flywheel instance.",
      "label": "DICOM Send",
      "license": "Other",
      "maintainer": "support@flywheel.io",
      "name": "dicom-send",
      "source": "https://flywheel.io",
      "url": "http://support.dcmtk.org/docs/storescu.html",
      "version": "0.6.2"
    },
    {
      "author": "Flywheel",
      "description": "The DICOM Send Gear uses DCMTK storescu to send DICOM data from a Flywheel instance to a DICOM server. The DICOM server must be reachable from the host of the Flywheel instance.",
      "label": "DCMTK: DICOM Send - storescu",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-send",
      "source": "https://flywheel.io",
      "url": "http://support.dcmtk.org/docs/storescu.html",
      "version": "0.14.1"
    },
    {
      "author": "Flywheel",
      "description": "The DICOM Send Gear uses DCMTK storescu to send DICOM data from a Flywheel instance to a DICOM server. The DICOM server must be reachable from the host of the Flywheel instance.",
      "label": "DCMTK: DICOM Send - storescu",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-send",
      "source": "https://flywheel.io",
      "url": "http://support.dcmtk.org/docs/storescu.html",
      "version": "0.14.0"
    },
    {
      "author": "Flywheel",
      "description": "The DICOM Send Gear uses DCMTK storescu to send DICOM data from a Flywheel instance to a DICOM server. The DICOM server must be reachable from the host of the Flywheel instance.",
      "label": "DCMTK: DICOM Send - storescu",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-send",
      "source": "https://flywheel.io",
      "url": "http://support.dcmtk.org/docs/storescu.html",
      "version": "0.13.0"
    },
    {
      "author": "Flywheel",
      "description": "The DICOM Send Gear uses DCMTK storescu to send DICOM data from a Flywheel instance to a DICOM server. The DICOM server must be reachable from the host of the Flywheel instance.",
      "label": "DCMTK: DICOM Send - storescu",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-send",
      "source": "https://flywheel.io",
      "url": "http://support.dcmtk.org/docs/storescu.html",
      "version": "0.12.0"
    },
    {
      "author": "Flywheel",
      "description": "The DICOM Send Gear uses DCMTK storescu to send DICOM data from a Flywheel instance to a DICOM server. The DICOM server must be reachable from the host of the Flywheel instance.",
      "label": "DCMTK: DICOM Send - storescu",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-send",
      "source": "https://flywheel.io",
      "url": "http://support.dcmtk.org/docs/storescu.html",
      "version": "0.11.0"
    },
    {
      "author": "Flywheel",
      "description": "The DICOM Send Gear uses DCMTK storescu to send DICOM data from a Flywheel instance to a DICOM server. The DICOM server must be reachable from the host of the Flywheel instance.",
      "label": "DCMTK: DICOM Send - storescu",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "dicom-send",
      "source": "https://flywheel.io",
      "url": "http://support.dcmtk.org/docs/storescu.html",
      "version": "0.10.0"
    }
  ],
  [
    {
      "author": "Brian Wandell <wandell@stanford.edu>, Michael Perry <lmperry@stanford.edu>",
      "description": "Find RMSE between the measured and ADC (or dSIG) based on tensor model. Calculate the histogram of differences between dti based predictions (ADC or dSig) with the actual ADC or dSig data. Larger deviations suggest noisier data.",
      "label": "VISTALAB: DTI Error",
      "license": "GPL-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dti-error",
      "source": "https://github.com/scitran-apps/dtiError/src",
      "url": "https://github.com/scitran-apps/dtiError",
      "version": "0.1.0"
    }
  ],
  [
    {
      "author": "Stanford VISTA Lab",
      "description": "VISTALAB's dtiInit (DTI Initialization) runs the VISTASOFT/mrDiffusion pre-processing pipeline on raw DWI data. This Gear allows all dtiInit parameters to be set from within the configuration UI. All outputs are archived in a zip file for easy download. dtiInit.json is saved for easy reference to configuration parameters used at runtime. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "VISTALAB: dtiInit - Diffusion Data Initialization Pipeline",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dtiinit",
      "source": "https://github.com/scitran-apps/dtiinit",
      "url": "https://github.com/vistalab/vistasoft/wiki/dwi-Initialization",
      "version": "0.2.1"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "description": "dtiInit (DTI Initialization) runs the VISTASOFT/mrDiffusion pre-processing pipeline on raw DWI data. See: http://white.stanford.edu/newlm/index.php/DTI_Preprocessing for more information regarding the pipeline. This dtiInit gear will output motion-corrected diffusion data (nifti, bval, bvecs) aligned to the first b0 image in the acquisition. It will also calculate FA, MD, RD, and AD maps. Tensors, vector RGB, brain mask, white-matter mask, and white-matter probability maps will also be output. All outputs will be included in a zip file. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "Diffusion Data Initialization Pipeline",
      "license": "Other",
      "name": "dtiinit",
      "source": "https://github.com/scitran-apps/dtiinit",
      "url": "https://github.com/vistalab/vistasoft/wiki",
      "version": "0.1.2"
    }
  ],
  [
    {
      "author": "Stanford VISTA Lab (vistalab.stanford.edu)",
      "command": "/usr/local/bin/run_dtiinitDiffusionMaps.sh /opt/mcr/v92 /flywheel/v0/config.json",
      "description": "Generate diffusion maps, including Fractional Anisotropy (FA), Axial Diffusivity (AD), Mean Diffusivity (MD), and Radial Diffusivity (RD). The input to this Gear is a dtiInit archive, containing a 'dt6.mat' file. This archive is generated from either the dtiInit Flywheel Gear, or from the Flywheel Gear which executes the AFQ processing pipeline. Outputs are fa, md, rd, and ad files (in gzipped NIfTI format).",
      "environment": {
        "LD_LIBRARY_PATH": "/opt/mcr/v92/runtime/glnxa64:/opt/mcr/v92/bin/glnxa64:/opt/mcr/v92/sys/os/glnxa64",
        "XAPPLRESDIR": "XAPPLRESDIR"
      },
      "label": "dtiInit: Diffusion Map Generation",
      "license": "GPL-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "dtiinit-diffusion-maps",
      "source": "https://github.com/vistalab/fw-gear-dtiinit-diffusion-maps",
      "url": "https://github.com/vistalab/vistasoft/wiki",
      "version": "1.0.0"
    }
  ],
  [
    {
      "author": "GLU <glerma@stanford.edu>",
      "description": "Flips the sign of the the specified B-vector(s).",
      "label": "VISTA Lab: DWI Flip BVEC",
      "license": "MIT",
      "maintainer": "GLU <glerma@stanford.edu>",
      "name": "dwi-flip-bvec",
      "source": "https://github.com/vistalab/dwi-flip-bvec",
      "url": "https://github.com/vistalab/dwi-flip-bvec",
      "version": "1.0.0"
    }
  ],
  [
    {
      "author": "Travis Richardson",
      "description": "Classifies Brain Vision EEG data and appends metadata attributes to the file's custom info structure within Flywheel. Input to this gear is a Flywheel packaged EEG archive (.eeg.zip) containing Brain Vision EEG data (in .vhdr format). Output is a JSON file (.metadata.json) containing metadata that will be used by the Flywheel platform to populate the input file's custom info fields.",
      "label": "Brain Vision EEG Classifier",
      "license": "MIT",
      "maintainer": "Travis Richardson",
      "name": "eeg-classifier",
      "source": "https://github.com/flywheel-apps/eeg-classifier",
      "url": "https://github.com/flywheel-apps/eeg-classifier",
      "version": "1.0.0"
    }
  ],
  [
    {
      "author": "Flywheel SSE",
      "command": "python3.7 /flywheel/v0/run.py",
      "description": "A gear for exporting ROI's saved in the OHIF viewer to CSV's",
      "environment": {},
      "label": "Export ROIs",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "export-rois",
      "source": "https://github.com/flywheel-apps/ROI_export",
      "url": "https://github.com/flywheel-apps/ROI_export",
      "version": "1.1.11"
    },
    {
      "author": "Flywheel SSE",
      "command": "python3.7 /flywheel/v0/run.py",
      "description": "A gear for exporting ROI's saved in the OHIF viewer to CSV's",
      "environment": {},
      "label": "Export ROIs",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "export-rois",
      "source": "https://github.com/flywheel-apps/ROI_export",
      "url": "https://github.com/flywheel-apps/ROI_export",
      "version": "1.1.10"
    },
    {
      "author": "Flywheel SSE",
      "command": "python3.7 /flywheel/v0/run.py",
      "description": "A gear for exporting ROI's saved in the OHIF viewer to CSV's",
      "environment": {},
      "label": "Export ROIs",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "export-rois",
      "source": "https://github.com/flywheel-apps/ROI_export",
      "url": "https://github.com/flywheel-apps/ROI_export",
      "version": "1.1.1"
    },
    {
      "author": "Flywheel SSE",
      "command": "python3.7 /flywheel/v0/run.py",
      "description": "A gear for exporting ROI's saved in the OHIF viewer to CSV's",
      "environment": {},
      "label": "Export ROIs",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "export-rois",
      "source": "https://github.com/flywheel-apps/ROI_export",
      "url": "https://github.com/flywheel-apps/ROI_export",
      "version": "1.0.3"
    }
  ],
  [
    {
      "author": "E. Auerbach, CMRR, 2016",
      "command": "python /flywheel/v0/run.py",
      "description": "Extract physiological log files from encoded '_PHYSIO' DICOM file generated by CMRR MB sequences (>=R015, >=VD13A), Generate BIDs compliant files if desired",
      "label": "CMRR: Extract CMRR Physio",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "extract-cmrr-physio",
      "source": "https://github.com/flywheel-apps/extract-cmrr-physio/releases",
      "url": "https://github.com/CMRR-C2P/MB",
      "version": "1.2.7"
    },
    {
      "author": "E. Auerbach, CMRR, 2016",
      "command": "python /flywheel/v0/run.py",
      "description": "Extract physiological log files from encoded '_PHYSIO' DICOM file generated by CMRR MB sequences (>=R015, >=VD13A), Generate BIDs compliant files if desired",
      "label": "CMRR: Extract CMRR Physio",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "extract-cmrr-physio",
      "source": "https://github.com/flywheel-apps/extract-cmrr-physio/releases",
      "url": "https://github.com/CMRR-C2P/MB",
      "version": "1.2.4"
    },
    {
      "author": "E. Auerbach, CMRR, 2016",
      "command": "python /flywheel/v0/run.py",
      "description": "Extract physiological log files from encoded '_PHYSIO' DICOM file generated by CMRR MB sequences (>=R015, >=VD13A), Generate BIDs compliant files if desired",
      "label": "CMRR: Extract CMRR Physio",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "extract-cmrr-physio",
      "source": "https://github.com/flywheel-apps/extract-cmrr-physio/releases",
      "url": "https://github.com/CMRR-C2P/MB",
      "version": "1.2.3"
    },
    {
      "author": "E. Auerbach, CMRR, 2016",
      "command": "python /flywheel/v0/run.py",
      "description": "Extract physiological log files from encoded '_PHYSIO' DICOM file generated by CMRR MB sequences (>=R015, >=VD13A), Generate BIDs compliant files if desired",
      "label": "CMRR: Extract CMRR Physio",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "extract-cmrr-physio",
      "source": "https://github.com/flywheel-apps/extract-cmrr-physio/releases/tag/1.2.2",
      "url": "https://github.com/CMRR-C2P/MB",
      "version": "1.2.2"
    },
    {
      "author": "E. Auerbach, CMRR, 2016",
      "command": "python /flywheel/v0/run.py",
      "description": "Extract physiological log files from encoded '_PHYSIO' DICOM file generated by CMRR MB sequences (>=R015, >=VD13A), Generate BIDs compliant files if desired",
      "label": "CMRR: Extract CMRR Physio",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "extract-cmrr-physio",
      "source": "https://github.com/flywheel-apps/extract-cmrr-physio/releases/tag/1.1.0",
      "url": "https://github.com/CMRR-C2P/MB",
      "version": "1.2.1"
    },
    {
      "author": "E. Auerbach, CMRR, 2016",
      "command": "python /flywheel/v0/run.py",
      "description": "Extract physiological log files from encoded '_PHYSIO' DICOM file generated by CMRR MB sequences (>=R015, >=VD13A), Generate BIDs compliant files if desired",
      "label": "CMRR: Extract CMRR Physio",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "extract-cmrr-physio",
      "source": "https://github.com/flywheel-apps/extract-cmrr-physio/releases/tag/1.0.0",
      "url": "https://github.com/CMRR-C2P/MB",
      "version": "1.0.0"
    },
    {
      "author": "E. Auerbach, CMRR, 2016",
      "description": "Extract physiological log files from encoded '_PHYSIO' DICOM file generated by CMRR MB sequences (>=R015, >=VD13A)",
      "label": "CMRR: Extract CMRR Physio",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "extract-cmrr-physio",
      "source": "https://github.com/flywheel-apps/extract-cmrr-physio",
      "url": "https://github.com/CMRR-C2P/MB",
      "version": "0.1.1"
    },
    {
      "author": "E. Auerbach, CMRR, 2016",
      "description": "Extract physiological log files from encoded '_PHYSIO' DICOM file generated by CMRR MB sequences (>=R015, >=VD13A)",
      "label": "CMRR: Extract CMRR Physio",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "extract-cmrr-physio",
      "source": "https://github.com/flywheel-apps/extract-cmrr-physio",
      "url": "https://github.com/CMRR-C2P/MB",
      "version": "0.1"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "Henschel L, Conjeti S, Estrada S, Diers K, Fischl B, Reuter M, FastSurfer - A fast and accurate deep learning based neuroimaging pipeline, NeuroImage 219 (2020), 117012",
      "command": "python run.py",
      "description": "FastSurferCNN - an advanced deep learning architecture capable of whole brain segmentation into 95 classes in under 1 minute, mimicking FreeSurfer anatomical segmentation and cortical parcellation (DKTatlas)",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "NVIDIA_DRIVER_CAPABILITIES": "compute,utility",
        "NVIDIA_REQUIRE_CUDA": "cuda>=11.2 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=440,driver<441 driver>=450",
        "NVIDIA_VISIBLE_DEVICES": "all",
        "PATH": "/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/FastSurferCNN:/venv/bin/"
      },
      "label": "Fast Surfer",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "fastsurfer",
      "source": "https://github.com/Deep-MI/FastSurfer",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/fastsurfer",
      "version": "1.0.4_v1.1.0"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "Generic file classifier. This gear update the classification of a file based on the metadata attached to it, and therefore should only run AFTER gears which populate metadata on the file, such as file-metadata-curator. The gear takes as input a file, and an optional classification profile. The gear tags the input file upon completion.",
      "environment": {
        "COMMIT": "main.a30a2597",
        "COMMIT_TIME": "2022-06-21T13:24:40+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.1",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.13",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PWD": "/flywheel/v0",
        "PYSITE": "/usr/local/lib/python3.10/site-packages",
        "PYTHONPATH": "/flywheel/v0",
        "PYTHON_GET_PIP_SHA256": "ba3ab8267d91fd41c58dbce08f76db99f747f716d85ce1865813842bb035524d",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/6ce3639da143c5d79b44f94b04080abf2531fd6e/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "58.1.0",
        "PYTHON_VERSION": "3.10.5",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "File Classifier",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-classifier",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/file-classifier.git",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/file-classifier.git",
      "version": "0.6.2"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "Generic file classifier. This gear update the classification of a file based on the metadata attached to it, and therefore should only run AFTER gears which populate metadata on the file, such as file-metadata-curator. The gear takes as input a file, and an optional classification profile. The gear tags the input file upon completion.",
      "environment": {
        "COMMIT": "main.a30a2597",
        "COMMIT_TIME": "2022-06-21T13:24:40+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.1",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.13",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PWD": "/flywheel/v0",
        "PYSITE": "/usr/local/lib/python3.10/site-packages",
        "PYTHONPATH": "/flywheel/v0",
        "PYTHON_GET_PIP_SHA256": "ba3ab8267d91fd41c58dbce08f76db99f747f716d85ce1865813842bb035524d",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/6ce3639da143c5d79b44f94b04080abf2531fd6e/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "58.1.0",
        "PYTHON_VERSION": "3.10.5",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "File Classifier",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-classifier",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/file-classifier.git",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/file-classifier.git",
      "version": "0.6.1"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "Generic file classifier. This gear update the classification of a file based on the metadata attached to it, and therefore should only run AFTER gears which populate metadata on the file, such as file-metadata-curator. The gear takes as input a file, and an optional classification profile. The gear tags the input file upon completion.",
      "environment": {
        "COMMIT": "main.a30a2597",
        "COMMIT_TIME": "2022-06-21T13:24:40+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.1",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.13",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PWD": "/flywheel/v0",
        "PYSITE": "/usr/local/lib/python3.10/site-packages",
        "PYTHONPATH": "/flywheel/v0",
        "PYTHON_GET_PIP_SHA256": "ba3ab8267d91fd41c58dbce08f76db99f747f716d85ce1865813842bb035524d",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/6ce3639da143c5d79b44f94b04080abf2531fd6e/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "58.1.0",
        "PYTHON_VERSION": "3.10.5",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "File Classifier",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-classifier",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/file-classifier.git",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/file-classifier.git",
      "version": "0.6.0"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "Generic file classifier. This gear update the classification of a file based on the metadata attached to it, and therefore should only run AFTER gears which populate metadata on the file, such as file-metadata-curator. The gear takes as input a file, and an optional classification profile. The gear tags the input file upon completion.",
      "environment": {
        "COMMIT": "main.a30a2597",
        "COMMIT_TIME": "2022-06-21T13:24:40+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.1",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.13",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PYSITE": "/usr/local/lib/python3.10/site-packages",
        "PYTHONPATH": "/flywheel/v0",
        "PYTHON_GET_PIP_SHA256": "ba3ab8267d91fd41c58dbce08f76db99f747f716d85ce1865813842bb035524d",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/6ce3639da143c5d79b44f94b04080abf2531fd6e/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "58.1.0",
        "PYTHON_VERSION": "3.10.5",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "File Classifier",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-classifier",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/file-classifier.git",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/file-classifier.git",
      "version": "0.5.1"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "Generic file classifier. This gear update the classification of a file based on the metadata attached to it, and therefore should only run AFTER gears which populate metadata on the file, such as file-metadata-curator. The gear takes as input a file, and an optional classification profile. The gear tags the input file upon completion.",
      "environment": {
        "COMMIT": "main.a30a2597",
        "COMMIT_TIME": "2022-06-21T13:24:40+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.1",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.13",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PYSITE": "/usr/local/lib/python3.10/site-packages",
        "PYTHONPATH": "/flywheel/v0",
        "PYTHON_GET_PIP_SHA256": "ba3ab8267d91fd41c58dbce08f76db99f747f716d85ce1865813842bb035524d",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/6ce3639da143c5d79b44f94b04080abf2531fd6e/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "58.1.0",
        "PYTHON_VERSION": "3.10.5",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "File Classifier",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-classifier",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/file-classifier.git",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/file-classifier.git",
      "version": "0.5.0"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Generic file classifier",
      "environment": {},
      "label": "File Classifier",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-classifier",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/file-classifier.git",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/file-classifier.git",
      "version": "0.4.6"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Generic file classifier",
      "environment": {},
      "label": "File Classifier",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-classifier",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/file-classifier.git",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/file-classifier.git",
      "version": "0.2.0"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "Curates a given file, to be used as a gear rule",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "LANG": "C.UTF-8",
        "PATH": "/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PWD": "/flywheel/v0",
        "PYTHON_GET_PIP_SHA256": "d1d09b0f9e745610657a528689ba3ea44a73bd19c60f4c954271b790c71c2653",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/1a96dc5acd0303c4700e02655aefd3bc68c78958/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.8.16"
      },
      "label": "File Curator",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-curator",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/file-curator",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/file-curator",
      "version": "0.4.0"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "Curates a given file, to be used as a gear rule",
      "environment": {},
      "label": "File Curator",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-curator",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/file-curator",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/file-curator",
      "version": "0.3.0"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Curates a given file, to be used as a gear rule",
      "environment": {},
      "label": "File Curator",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-curator",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/file-curator",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/file-curator",
      "version": "0.2.0"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Curates a given file, to be used as a gear rule",
      "environment": {},
      "label": "File Curator",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-curator",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/file-curator",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/file-curator",
      "version": "0.1.3"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Curates a given file, to be used as a gear rule",
      "environment": {},
      "label": "File Curator",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-curator",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/file-curator",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/file-curator",
      "version": "0.1.0"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Import file metadata into Flywheel. Metadata is stored under file.info.header. Supports DICOM and DICOM Zip Archives, PTD (Siemens PT format), NIfTI, ParaVision (Bruker format), and PAR/REC (Philips format)",
      "environment": {
        "COMMIT": "main.a30a2597",
        "COMMIT_TIME": "2022-06-21T13:24:40+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.1",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.13",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PWD": "/flywheel/v0",
        "PYSITE": "/usr/local/lib/python3.10/site-packages",
        "PYTHON_GET_PIP_SHA256": "ba3ab8267d91fd41c58dbce08f76db99f747f716d85ce1865813842bb035524d",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/6ce3639da143c5d79b44f94b04080abf2531fd6e/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "58.1.0",
        "PYTHON_VERSION": "3.10.5",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "File metadata importer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-metadata-importer",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/file-metadata-importer",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/file-metadata-importer",
      "version": "1.4.0"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Import file metadata into Flywheel. Metadata is stored under file.info.header. Supports DICOM and DICOM Zip Archives, PTD (Siemens PT format), NIfTI, ParaVision (Bruker format), and PAR/REC (Philips format)",
      "environment": {
        "COMMIT": "main.a30a2597",
        "COMMIT_TIME": "2022-06-21T13:24:40+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.1",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.13",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PWD": "/flywheel/v0",
        "PYSITE": "/usr/local/lib/python3.10/site-packages",
        "PYTHON_GET_PIP_SHA256": "ba3ab8267d91fd41c58dbce08f76db99f747f716d85ce1865813842bb035524d",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/6ce3639da143c5d79b44f94b04080abf2531fd6e/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "58.1.0",
        "PYTHON_VERSION": "3.10.5",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "File metadata importer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-metadata-importer",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/file-metadata-importer",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/file-metadata-importer",
      "version": "1.3.0"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Import file metadata into Flywheel. Metadata is stored under file.info.header. Supports DICOM and DICOM Zip Archives, PTD (Siemens PT format), NIfTI, ParaVision (Bruker format), PAR/REC (Philips format)",
      "environment": {
        "COMMIT": "main.a30a2597",
        "COMMIT_TIME": "2022-06-21T13:24:40+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.1",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.13",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PYSITE": "/usr/local/lib/python3.10/site-packages",
        "PYTHON_GET_PIP_SHA256": "ba3ab8267d91fd41c58dbce08f76db99f747f716d85ce1865813842bb035524d",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/6ce3639da143c5d79b44f94b04080abf2531fd6e/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "58.1.0",
        "PYTHON_VERSION": "3.10.5",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "File metadata importer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-metadata-importer",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/file-metadata-importer",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/file-metadata-importer",
      "version": "1.2.5"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Import file metadata into Flywheel.",
      "environment": {},
      "label": "File metadata importer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-metadata-importer",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/file-metadata-importer",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/file-metadata-importer",
      "version": "1.2.1"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Parse and import file metadata into Flywheel.",
      "environment": {},
      "label": "File metadata importer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-metadata-importer",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/file-metadata-importer",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/file-metadata-importer",
      "version": "1.2.0"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Import file metadata into Flywheel.",
      "environment": {},
      "label": "File metadata importer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-metadata-importer",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/file-metadata-importer",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/file-metadata-importer",
      "version": "1.1.0"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Import file metadata into Flywheel.",
      "environment": {},
      "label": "File metadata importer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-metadata-importer",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/file-metadata-importer",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/file-metadata-importer",
      "version": "1.0.1"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Import file metadata into Flywheel.",
      "environment": {},
      "label": "File metadata importer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-metadata-importer",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/file-metadata-importer",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/file-metadata-importer",
      "version": "0.2.1"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Import file metadata into Flywheel.",
      "environment": {},
      "label": "File metadata importer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "file-metadata-importer",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/file-metadata-importer",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/file-metadata-importer",
      "version": "0.2.0"
    }
  ],
  [
    {
      "author": "Tinashe Michael Tapera",
      "cite": "",
      "description": "Audit your Flywheel project for sequence completeness, BIDS curation summaries, gear and job runs, workflow completeness, and more.",
      "label": "Flaudit: Flywheel Audit",
      "license": "BSD-3-Clause",
      "maintainer": "Tinashe Michael Tapera",
      "name": "flaudit",
      "source": "",
      "url": "https://fw-heudiconv.readthedocs.io/en/latest/",
      "version": "0.0.5_0.1.6"
    }
  ],
  [
    {
      "author": "Flywheel <support@flywheel.io>",
      "description": "Sample gear to demonstrate a simple use case of outputting the name of each input file.",
      "label": "Flywheel Example Gear",
      "license": "MIT",
      "maintainer": "Ryan Sanford <ryansanford@flywheel.io>",
      "name": "flywheel-example-gear",
      "source": "https://github.com/flywheel-apps/example-gear",
      "url": "https://flywheel.io/",
      "version": "0.0.4"
    },
    {
      "author": "Flywheel <support@flywheel.io>",
      "description": "Sample gear to demonstrate a simple use case of outputting the name of each input file.",
      "label": "Flywheel Example Gear",
      "license": "MIT",
      "maintainer": "Ryan Sanford <ryansanford@flywheel.io>",
      "name": "flywheel-example-gear",
      "source": "https://github.com/flywheel-apps/example-gear",
      "url": "https://flywheel.io/",
      "version": "0.0.3"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "/flywheel/v0/run.py",
      "description": "Export Form Responses and/or Annotations to CSV file(s).",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "LANG": "C.UTF-8",
        "PATH": "/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PWD": "/flywheel/v0",
        "PYTHON_GET_PIP_SHA256": "5aefe6ade911d997af080b315ebcb7f882212d070465df544e1175ac2be519b4",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/5eaac1050023df1f5c98b173b248c260023f2278/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.8.13"
      },
      "label": "Form and Annotation Exporter",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "form-and-annotations-exporter",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/form-and-annotations-exporter",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/form-and-annotations-exporter",
      "version": "0.1.1"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "/flywheel/v0/run.py",
      "description": "Export Form Responses and/or Annotations to CSV file(s). ",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "LANG": "C.UTF-8",
        "PATH": "/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PWD": "/flywheel/v0",
        "PYTHON_GET_PIP_SHA256": "5aefe6ade911d997af080b315ebcb7f882212d070465df544e1175ac2be519b4",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/5eaac1050023df1f5c98b173b248c260023f2278/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.8.13"
      },
      "label": "Form and Annotation Exporter",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "form-and-annotations-exporter",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/form-and-annotations-exporter",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/form-and-annotations-exporter",
      "version": "0.1.0"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "/flywheel/v0/run.py",
      "description": "Export Form Responses and/or Annotations to CSV file(s).",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "LANG": "C.UTF-8",
        "PATH": "/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PWD": "/flywheel/v0",
        "PYTHON_GET_PIP_SHA256": "96461deced5c2a487ddc65207ec5a9cffeca0d34e7af7ea1afc470ff0d746207",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/0d8570dc44796f4369b652222cf176b3db6ac70e/public/get-pip.py",
        "PYTHON_PIP_VERSION": "23.0.1",
        "PYTHON_SETUPTOOLS_VERSION": "65.5.1",
        "PYTHON_VERSION": "3.10.12"
      },
      "label": "Form and Annotation Exporter",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "form-and-annotations-exporter",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/form-and-annotations-exporter",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/form-and-annotations-exporter",
      "version": "0.0.6"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "/flywheel/v0/run.py",
      "description": "Export Form Responses and/or Annotations to CSV file(s).",
      "environment": {},
      "label": "Form and Annotation Exporter",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "form-and-annotations-exporter",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/form-and-annotations-exporter",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/form-and-annotations-exporter",
      "version": "0.0.4"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "/flywheel/v0/run.py",
      "description": "Export Form Responses and/or Annotations to CSV file(s).",
      "environment": {},
      "label": "Form and Annotation Exporter",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "form-and-annotations-exporter",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/form-and-annotations-exporter",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/form-and-annotations-exporter",
      "version": "0.0.3"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "Import form metadata into Flywheel. Metadata is stored under file.info.forms.<form_type>. Supports json.",
      "environment": {
        "COMMIT": "main.a30a2597",
        "COMMIT_TIME": "2022-06-21T13:24:40+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.1",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.13",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PYSITE": "/usr/local/lib/python3.10/site-packages",
        "PYTHON_GET_PIP_SHA256": "ba3ab8267d91fd41c58dbce08f76db99f747f716d85ce1865813842bb035524d",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/6ce3639da143c5d79b44f94b04080abf2531fd6e/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "58.1.0",
        "PYTHON_VERSION": "3.10.5",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib"
      },
      "label": "Form importer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "form-importer",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/form-importer",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/form-importer",
      "version": "0.1.0"
    }
  ],
  [
    {
      "author": "Laboratory for Computational Neuroimaging <freesurfer@nmr.mgh.harvard.edu>",
      "cite": "For citation information, please visit: https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferMethodsCitation.",
      "command": "/root/miniconda3/bin/python3 run.py",
      "description": "FreeSurfer version 7.2.0 Release (July 19, 2021). This gear takes an anatomical NIfTI file and performs all of the FreeSurfer cortical reconstruction process. Outputs are provided in a zip file and include the entire output directory tree from Recon-All. Configuration options exist for setting the subject ID and for converting outputs to NIfTI, OBJ, and CSV. FreeSurfer is a software package for the analysis and visualization of structural and functional neuroimaging data from cross-sectional or longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. Please see https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense for license information.",
      "environment": {
        "PYTHONUNBUFFERED": "1"
      },
      "label": "FreeSurfer 7.2.0: run recon-all",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "freesurfer-recon-all",
      "source": "https://github.com/flywheel-apps/freesurfer-recon-all",
      "url": "https://surfer.nmr.mgh.harvard.edu",
      "version": "1.2.1_7.2.0"
    },
    {
      "author": "Laboratory for Computational Neuroimaging <freesurfer@nmr.mgh.harvard.edu>",
      "cite": "For citation information, please visit: https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferMethodsCitation.",
      "command": "/root/miniconda3/bin/python3 run.py",
      "description": "FreeSurfer version 7.2.0 Release (July 19, 2021). This gear takes an anatomical NIfTI file and performs all of the FreeSurfer cortical reconstruction process. Outputs are provided in a zip file and include the entire output directory tree from Recon-All. Configuration options exist for setting the subject ID and for converting outputs to NIfTI, OBJ, and CSV. FreeSurfer is a software package for the analysis and visualization of structural and functional neuroimaging data from cross-sectional or longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. Please see https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense for license information.",
      "environment": {
        "PYTHONUNBUFFERED": "1"
      },
      "label": "FreeSurfer 7.2.0: run recon-all",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "freesurfer-recon-all",
      "source": "https://github.com/flywheel-apps/freesurfer-recon-all",
      "url": "https://surfer.nmr.mgh.harvard.edu",
      "version": "1.2.0_7.2.0"
    },
    {
      "author": "Laboratory for Computational Neuroimaging <freesurfer@nmr.mgh.harvard.edu>",
      "cite": "For citation information, please visit: https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferMethodsCitation.",
      "command": "/root/miniconda3/bin/python3 run.py",
      "description": "FreeSurfer version 7.2.0 Release (July 19, 2021). This gear takes an anatomical NIfTI file and performs all of the FreeSurfer cortical reconstruction process. Outputs are provided in a zip file and include the entire output directory tree from Recon-All. Configuration options exist for setting the subject ID and for converting outputs to NIfTI, OBJ, and CSV. FreeSurfer is a software package for the analysis and visualization of structural and functional neuroimaging data from cross-sectional or longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. Please see https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense for license information.",
      "environment": {
        "PYTHONUNBUFFERED": "1"
      },
      "label": "FreeSurfer 7.2.0: run recon-all",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "freesurfer-recon-all",
      "source": "https://github.com/flywheel-apps/freesurfer-recon-all",
      "url": "https://surfer.nmr.mgh.harvard.edu",
      "version": "1.1.2_7.2.0"
    },
    {
      "author": "Laboratory for Computational Neuroimaging <freesurfer@nmr.mgh.harvard.edu>",
      "cite": "For citation information, please visit: https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferMethodsCitation.",
      "command": "/root/miniconda3/bin/python3 run.py",
      "description": "FreeSurfer version 7.1.1 Release (July 27, 2020). This gear takes an anatomical NIfTI file and performs all of the FreeSurfer cortical reconstruction process. Outputs are provided in a zip file and include the entire output directory tree from Recon-All. Configuration options exist for setting the subject ID and for converting outputs to NIfTI, OBJ, and CSV. FreeSurfer is a software package for the analysis and visualization of structural and functional neuroimaging data from cross-sectional or longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. Please see https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense for license information.",
      "environment": {
        "PYTHONUNBUFFERED": "1"
      },
      "label": "FreeSurfer 7.2.0: run recon-all",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "freesurfer-recon-all",
      "source": "https://github.com/flywheel-apps/freesurfer-recon-all",
      "url": "https://surfer.nmr.mgh.harvard.edu",
      "version": "1.1.1_7.2.0"
    },
    {
      "author": "Laboratory for Computational Neuroimaging <freesurfer@nmr.mgh.harvard.edu>",
      "cite": "For citation information, please visit: https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferMethodsCitation.",
      "command": "/root/miniconda3/bin/python3 run.py",
      "description": "FreeSurfer version 7.1.1 Release (July 27, 2020). This gear takes an anatomical NIfTI file and performs all of the FreeSurfer cortical reconstruction process. Outputs are provided in a zip file and include the entire output directory tree from Recon-All. Configuration options exist for setting the subject ID and for converting outputs to NIfTI, OBJ, and CSV. FreeSurfer is a software package for the analysis and visualization of structural and functional neuroimaging data from cross-sectional or longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. Please see https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense for license information.",
      "environment": {
        "PYTHONUNBUFFERED": "1"
      },
      "label": "FreeSurfer 7.1.1: run recon-all",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "freesurfer-recon-all",
      "source": "https://github.com/flywheel-apps/freesurfer-recon-all",
      "url": "https://surfer.nmr.mgh.harvard.edu",
      "version": "1.1.0_7.1.1"
    },
    {
      "author": "Laboratory for Computational Neuroimaging <freesurfer@nmr.mgh.harvard.edu>",
      "cite": "For citation information, please visit: https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferMethodsCitation.",
      "command": "/root/miniconda3/bin/python3 run.py",
      "description": "FreeSurfer version 7.1.1 Release (July 27, 2020). This gear takes an anatomical NIfTI file and performs all of the FreeSurfer cortical reconstruction process. Outputs are provided in a zip file and include the entire output directory tree from Recon-All. Configuration options exist for setting the subject ID and for converting outputs to NIfTI, OBJ, and CSV. FreeSurfer is a software package for the analysis and visualization of structural and functional neuroimaging data from cross-sectional or longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. Please see https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense for license information.",
      "environment": {
        "PYTHONUNBUFFERED": "1"
      },
      "label": "FreeSurfer 7.1.1: run recon-all",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "freesurfer-recon-all",
      "source": "https://github.com/flywheel-apps/freesurfer-recon-all",
      "url": "https://surfer.nmr.mgh.harvard.edu",
      "version": "1.0.0_7.1.1_rc0"
    },
    {
      "author": "Laboratory for Computational Neuroimaging <freesurfer@nmr.mgh.harvard.edu>",
      "cite": "For citation information, please visit: https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferMethodsCitation.",
      "command": "/root/miniconda3/bin/python3 run.py",
      "description": "FreeSurfer version 7.1.1 Release (July 27, 2020). This gear takes an anatomical NIfTI file and performs all of the FreeSurfer cortical reconstruction process. Outputs are provided in a zip file and include the entire output directory tree from Recon-All. Configuration options exist for setting the subject ID and for converting outputs to NIfTI, OBJ, and CSV. FreeSurfer is a software package for the analysis and visualization of structural and functional neuroimaging data from cross-sectional or longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. Please see https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense for license information.",
      "environment": {
        "PYTHONUNBUFFERED": "1"
      },
      "label": "FreeSurfer 7.1.1: run recon-all",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "freesurfer-recon-all",
      "source": "https://github.com/flywheel-apps/freesurfer-recon-all",
      "url": "https://surfer.nmr.mgh.harvard.edu",
      "version": "1.0.0_7.1.1"
    },
    {
      "author": "Laboratory for Computational Neuroimaging <freesurfer@nmr.mgh.harvard.edu>",
      "cite": "For citation information, please visit: https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferMethodsCitation.",
      "description": "This gear takes an anatomical NIfTI file and performs all of the FreeSurfer cortical reconstruction process. Outputs are provided in a zip file and include the entire output directory tree from Recon-All. Configuration options exist for setting the subject ID and for converting outputs to NIfTI, OBJ, and CSV. FreeSurfer is a software package for the analysis and visualization of structural and functional neuroimaging data from cross-sectional or longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. Please see https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense for license information.",
      "label": "FreeSurfer (v6.0.1): Recon-All",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "freesurfer-recon-all",
      "source": "https://github.com/scitran-apps/freesurfer-recon-all",
      "url": "https://surfer.nmr.mgh.harvard.edu",
      "version": "0.4.2_6.0.1"
    },
    {
      "author": "Laboratory for Computational Neuroimaging <freesurfer@nmr.mgh.harvard.edu>",
      "cite": "For citation information, please visit: https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferMethodsCitation.",
      "description": "This gear takes an anatomical NIfTI file and performs all of the FreeSurfer cortical reconstruction process. Outputs are provided in a zip file and include the entire output directory tree from Recon-All. Configuration options exist for setting the subject ID and for converting outputs to NIfTI, OBJ, and CSV. FreeSurfer is a software package for the analysis and visualization of structural and functional neuroimaging data from cross-sectional or longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. Please see https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense for license information.",
      "label": "FreeSurfer (v6.0.1): Recon-All",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "freesurfer-recon-all",
      "source": "https://github.com/scitran-apps/freesurfer-recon-all",
      "url": "https://surfer.nmr.mgh.harvard.edu",
      "version": "0.4.1_6.0.1"
    },
    {
      "author": "Laboratory for Computational Neuroimaging <freesurfer@nmr.mgh.harvard.edu>",
      "cite": "For citation information, please visit: https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferMethodsCitation.",
      "description": "This gear takes an anatomical NIfTI file and performs all of the FreeSurfer cortical reconstruction process. Outputs are provided in a zip file and include the entire output directory tree from Recon-All. Configuration options exist for setting the subject ID and for converting outputs to NIfTI, OBJ, and CSV. FreeSurfer is a software package for the analysis and visualization of structural and functional neuroimaging data from cross-sectional or longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. Please see https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense for license information.",
      "label": "FreeSurfer (v6.0.1): Recon-All",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "freesurfer-recon-all",
      "source": "https://github.com/scitran-apps/freesurfer-recon-all",
      "url": "https://surfer.nmr.mgh.harvard.edu",
      "version": "0.4.0_6.0.1"
    },
    {
      "author": "Laboratory for Computational Neuroimaging <freesurfer@nmr.mgh.harvard.edu>",
      "cite": "For citation information, please visit: https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferMethodsCitation.",
      "description": "This gear takes an anatomical NIfTI file and performs all of the FreeSurfer cortical reconstruction process. Outputs are provided in a zip file and include the entire output directory tree from Recon-All. Configuration options exist for setting the subject ID and for converting outputs to NIfTI, OBJ, and CSV. FreeSurfer is a software package for the analysis and visualization of structural and functional neuroimaging data from cross-sectional or longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. Please see https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense for license information.",
      "label": "FreeSurfer (v6.0.1): Recon-All",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "freesurfer-recon-all",
      "source": "https://github.com/scitran-apps/freesurfer-recon-all",
      "url": "https://surfer.nmr.mgh.harvard.edu",
      "version": "0.3.1_6.0.1"
    },
    {
      "author": "Laboratory for Computational Neuroimaging <freesurfer@nmr.mgh.harvard.edu>",
      "cite": "For citation information, please visit: https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferMethodsCitation.",
      "description": "This gear takes an anatomical NIfTI file and performs all of the FreeSurfer cortical reconstruction process. Outputs are provided in a zip file and include the entire output directory tree from Recon-All. Configuration options exist for setting the subject ID and for converting outputs to NIfTI, OBJ, and CSV. FreeSurfer is a software package for the analysis and visualization of structural and functional neuroimaging data from cross-sectional or longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. Please see https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense for license information.",
      "label": "FreeSurfer (v6.0.0): Recon-All",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "freesurfer-recon-all",
      "source": "https://github.com/scitran-apps/freesurfer-recon-all",
      "url": "https://surfer.nmr.mgh.harvard.edu",
      "version": "0.3.0"
    },
    {
      "author": "Laboratory for Computational Neuroimaging <freesurfer@nmr.mgh.harvard.edu>",
      "cite": "For citation information, please visit: https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferMethodsCitation.",
      "description": "This gear takes an anatomical NIfTI file and performs all of the FreeSurfer cortical reconstruction process. Outputs are provided in a zip file and include the entire output directory tree from Recon-All. Configuration options exist for setting the subject ID and for converting outputs to NIfTI, OBJ, and CSV. FreeSurfer is a software package for the analysis and visualization of structural and functional neuroimaging data from cross-sectional or longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. Please see https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense for license information.",
      "label": "FreeSurfer (v6.0.0): Recon-All",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "freesurfer-recon-all",
      "source": "https://github.com/scitran-apps/freesurfer-recon-all",
      "url": "https://surfer.nmr.mgh.harvard.edu",
      "version": "0.2.0"
    },
    {
      "author": "Laboratory for Computational Neuroimaging <freesurfer@nmr.mgh.harvard.edu>",
      "cite": "For citation information, please visit: https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferMethodsCitation.",
      "description": "This gear takes an anatomical NIfTI file and performs all of the FreeSurfer cortical reconstruction process. Outputs are provided in a zip file and include the entire output directory tree from Recon-All. Configuration options exist for setting the subject ID and for converting outputs to NIfTI, OBJ, and CSV. FreeSurfer is a software package for the analysis and visualization of structural and functional neuroimaging data from cross-sectional or longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. Please see https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense for license information.",
      "label": "FreeSurfer (v6.0.0): Recon-All",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "freesurfer-recon-all",
      "source": "https://github.com/scitran-apps/freesurfer-recon-all",
      "url": "https://surfer.nmr.mgh.harvard.edu",
      "version": "0.1.4"
    },
    {
      "author": "Laboratory for Computational Neuroimaging <freesurfer@nmr.mgh.harvard.edu>",
      "cite": "For citation information, please visit: https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferMethodsCitation.",
      "description": "This gear takes an anatomical NIfTI file and performs all of the FreeSurfer cortical reconstruction process. Outputs are provided in a zip file and include the entire output directory tree from Recon-All. Configuration options exist for setting the subject ID and for converting outputs to NIfTI, OBJ, and CSV. FreeSurfer is a software package for the analysis and visualization of structural and functional neuroimaging data from cross-sectional or longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. Please see https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense for license information.",
      "label": "FreeSurfer (v6.0.0): Recon-All",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "freesurfer-recon-all",
      "source": "https://github.com/scitran-apps/freesurfer-recon-all",
      "url": "https://surfer.nmr.mgh.harvard.edu",
      "version": "0.1.3"
    },
    {
      "author": "Laboratory for Computational Neuroimaging <freesurfer@nmr.mgh.harvard.edu>",
      "description": "This gear takes an anatomical NIfTI file and performs all of the FreeSurfer cortical reconstruction process. Outputs are provided in a zip file and include the entire output directory tree from Recon-All. Configuration options exist for setting the subject ID and for converting outputs to NIfTI, OBJ, and CSV. FreeSurfer is a software package for the analysis and visualization of structural and functional neuroimaging data from cross-sectional or longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. Please see https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense for license information.",
      "label": "FreeSurfer (v6.0.0): Recon-All",
      "license": "GPL-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "freesurfer-recon-all",
      "source": "https://github.com/scitran-apps/freesurfer-recon-all",
      "url": "https://surfer.nmr.mgh.harvard.edu",
      "version": "0.1.2"
    },
    {
      "author": "Laboratory for Computational Neuroimaging <freesurfer@nmr.mgh.harvard.edu>",
      "cite": "For citation information, please visit: https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferMethodsCitation.",
      "command": "/root/miniconda3/bin/python3 run.py",
      "description": "FreeSurfer version 7.1.1 Release (July 27, 2020). This gear takes an anatomical NIfTI file and performs all of the FreeSurfer cortical reconstruction process. Outputs are provided in a zip file and include the entire output directory tree from Recon-All. Configuration options exist for setting the subject ID and for converting outputs to NIfTI, OBJ, and CSV. FreeSurfer is a software package for the analysis and visualization of structural and functional neuroimaging data from cross-sectional or longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. Please see https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense for license information.",
      "environment": {
        "PYTHONUNBUFFERED": "1"
      },
      "label": "FreeSurfer 7.1.1: run recon-all",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "freesurfer-recon-all",
      "source": "https://github.com/flywheel-apps/freesurfer-recon-all",
      "url": "https://surfer.nmr.mgh.harvard.edu",
      "version": "0.1.0_7.1.1_rc0"
    },
    {
      "author": "Laboratory for Computational Neuroimaging <freesurfer@nmr.mgh.harvard.edu>",
      "description": " This gear takes an anatomical NIfTI file and performs all of the FreeSurfer cortical reconstruction process. Outputs are provided in a zip file and include the entire output directory tree from Recon-All. Configuration options exist for setting the subejct ID and for converting outputs to NIfTI, OBJ, and CSV. FreeSurfer is a software package for the analysis and visualization of structural and functional neuroimaging data from cross-sectional or longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. Please see https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense for license information.",
      "label": "FreeSurfer (v6.0.0): Recon-All",
      "license": "GPL-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "freesurfer-recon-all",
      "source": "https://github.com/scitran-apps/freesurfer-recon-all",
      "url": "https://surfer.nmr.mgh.harvard.edu",
      "version": "0.1.0"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "For citation information, please visit: https://www.biorxiv.org/content/10.1101/2022.03.17.484761v1",
      "command": "python run.py",
      "description": "This gear takes either an existing FS zipped run, or an anatomical NIfTI file and performs all of the FreeSurfer cortical reconstruction process. Outputs are provided in a zip file and include the entire output directory tree from Recon-All. Configuration options exist for setting the subject ID and for converting outputs to NIfTI, OBJ, and CSV. FreeSurfer is a software package for the analysis and visualization of structural and functional neuroimaging data from cross-sectional or longitudinal studies. It is developed by the Laboratory for Computational Neuroimaging at the Athinoula A. Martinos Center for Biomedical Imaging. Please see https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense for license information. This gear includes a bunch of atlases (cerebellum, HCP, Neuropythy...) and depending on the configuration options it will create many ROIs in subject space that can later be incorporated to other neuroimaging tools (PETsurfer, RTP2-pipeline for DWI, fMRI, ...)",
      "environment": {
        "ANTSPATH": "/opt/ants/bin/",
        "ANTS_VERSION": "v2.4.2",
        "DISPLAY": ":50.0",
        "FLYWHEEL": "/flywheel/v0",
        "FMRI_ANALYSIS_DIR": "/opt/freesurfer/fsfast",
        "FREESURFER": "/opt/freesurfer",
        "FREESURFER_HOME": "/opt/freesurfer",
        "FSFAST_HOME": "/opt/freesurfer/fsfast",
        "FSF_OUTPUT_FORMAT": "nii.gz",
        "FSL_OUTPUT_FORMAT": "nii.gz",
        "FS_LICENSE": "/opt/freesurfer/license.txt",
        "FS_OVERRIDE": "0",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "LANG": "C.UTF-8",
        "LOCAL_DIR": "/opt/freesurfer/local",
        "MCR_CACHE_DIR": "/flywheel/v0/output/.mcrCache9.7",
        "MCR_CACHE_ROOT": "/flywheel/v0/output",
        "MINC_BIN_DIR": "/opt/freesurfer/mni/bin",
        "MINC_LIB_DIR": "/opt/freesurfer/mni/lib",
        "MNI_DATAPATH": "/opt/freesurfer/mni/data",
        "MNI_DIR": "/opt/freesurfer/mni",
        "MNI_PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "OS": "Linux",
        "PATH": "/opt/freesurfer/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/freesurfer/fsfast/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/sbin:/bin:/opt/ants/bin",
        "PERL5LIB": "/opt/freesurfer/mni/lib/perl5/5.8.5",
        "PYTHON_GET_PIP_SHA256": "1e501cf004eac1b7eb1f97266d28f995ae835d30250bec7f8850562703067dc6",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/66030fa03382b4914d4c4d0896961a0bdeeeb274/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "58.1.0",
        "PYTHON_VERSION": "3.9.15",
        "QT_QPA_PLATFORM": "xcb",
        "XAPPLRESDIR": "/opt/freesurfer/MCRv97/X11/app-defaults"
      },
      "label": "freesurferator: create anatomical ROIs for DWI, PET or fMRI in subject space.",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "freesurferator",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/freesurferator.git",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/freesurferator.git",
      "version": "0.1.2_7.3.2"
    }
  ],
  [
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "cite": "M.W. Woolrich, S. Jbabdi, B. Patenaude, M. Chappell, S. Makni, T. Behrens, C. Beckmann, M. Jenkinson, S.M. Smith. Bayesian analysis of neuroimaging data in FSL. NeuroImage, 45:S173-86, 2009.",
      "command": "/flywheel/v0/run.py",
      "description": "This tool provides a general pipeline for processing anatomical images (e.g. T1-weighted scans). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "DEBIAN_FRONTEND": "noninteractive",
        "FLYWHEEL": "/flywheel/v0",
        "FSLDIR": "/usr/share/fsl/6.0",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "FSL_DIR": "/usr/share/fsl/6.0",
        "GPG_KEY": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D",
        "LANG": "C.UTF-8",
        "LD_LIBRARY_PATH": "/usr/share/fsl/6.0/lib",
        "PATH": "/usr/share/fsl/6.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "POSSUMDIR": "/usr/share/fsl/6.0",
        "PYTHON_PIP_VERSION": "19.1.1",
        "PYTHON_VERSION": "3.7.3",
        "TZ": "Etc/UTC"
      },
      "label": "FSL-ANAT - Anatomical Processing Pipeline",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "fsl-anat",
      "source": "https://github.com/flywheel-apps/fsl-anat",
      "url": "https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/fsl_anat",
      "version": "1.1.2_6.0.1"
    },
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "cite": "M.W. Woolrich, S. Jbabdi, B. Patenaude, M. Chappell, S. Makni, T. Behrens, C. Beckmann, M. Jenkinson, S.M. Smith. Bayesian analysis of neuroimaging data in FSL. NeuroImage, 45:S173-86, 2009.",
      "command": "/flywheel/v0/run.py",
      "description": "This tool provides a general pipeline for processing anatomical images (e.g. T1-weighted scans). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "DEBIAN_FRONTEND": "noninteractive",
        "FLYWHEEL": "/flywheel/v0",
        "FSLDIR": "/usr/share/fsl/6.0",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "FSL_DIR": "/usr/share/fsl/6.0",
        "GPG_KEY": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D",
        "LANG": "C.UTF-8",
        "LD_LIBRARY_PATH": "/usr/share/fsl/6.0/lib",
        "PATH": "/usr/share/fsl/6.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "POSSUMDIR": "/usr/share/fsl/6.0",
        "PYTHON_PIP_VERSION": "19.1.1",
        "PYTHON_VERSION": "3.7.3",
        "TZ": "Etc/UTC"
      },
      "label": "FSL-ANAT - Anatomical Processing Pipeline",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "fsl-anat",
      "source": "https://github.com/flywheel-apps/fsl-anat",
      "url": "https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/fsl_anat",
      "version": "1.1.1_6.0.1"
    },
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "cite": "M.W. Woolrich, S. Jbabdi, B. Patenaude, M. Chappell, S. Makni, T. Behrens, C. Beckmann, M. Jenkinson, S.M. Smith. Bayesian analysis of neuroimaging data in FSL. NeuroImage, 45:S173-86, 2009.",
      "command": "/flywheel/v0/run.py",
      "description": "This tool provides a general pipeline for processing anatomical images (e.g. T1-weighted scans). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "DEBIAN_FRONTEND": "noninteractive",
        "FLYWHEEL": "/flywheel/v0",
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "FSL_DIR": "/usr/share/fsl/5.0",
        "GPG_KEY": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D",
        "LANG": "C.UTF-8",
        "LD_LIBRARY_PATH": "/usr/share/fsl/5.0/lib",
        "PATH": "/usr/share/fsl/5.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "POSSUMDIR": "/usr/share/fsl/5.0",
        "PYTHON_PIP_VERSION": "19.1.1",
        "PYTHON_VERSION": "3.7.3",
        "TZ": "Etc/UTC"
      },
      "label": "FSL-ANAT - Anatomical Processing Pipeline",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "fsl-anat",
      "source": "https://github.com/flywheel-apps/fsl-anat",
      "url": "https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/fsl_anat",
      "version": "1.1.1_5.0.9"
    },
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "cite": "M.W. Woolrich, S. Jbabdi, B. Patenaude, M. Chappell, S. Makni, T. Behrens, C. Beckmann, M. Jenkinson, S.M. Smith. Bayesian analysis of neuroimaging data in FSL. NeuroImage, 45:S173-86, 2009.",
      "command": "/flywheel/v0/run.py",
      "description": "This tool provides a general pipeline for processing anatomical images (e.g. T1-weighted scans). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "DEBIAN_FRONTEND": "noninteractive",
        "FLYWHEEL": "/flywheel/v0",
        "FSLDIR": "/usr/share/fsl/6.0",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "FSL_DIR": "/usr/share/fsl/6.0",
        "GPG_KEY": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D",
        "LANG": "C.UTF-8",
        "LD_LIBRARY_PATH": "/usr/share/fsl/6.0/lib",
        "PATH": "/usr/share/fsl/6.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "POSSUMDIR": "/usr/share/fsl/6.0",
        "PYTHON_PIP_VERSION": "19.1.1",
        "PYTHON_VERSION": "3.7.3",
        "TZ": "Etc/UTC"
      },
      "label": "FSL-ANAT - Anatomical Processing Pipeline",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "fsl-anat",
      "source": "https://github.com/flywheel-apps/fsl-anat",
      "url": "https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/fsl_anat",
      "version": "1.1.0_6.0.1"
    },
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "cite": "M.W. Woolrich, S. Jbabdi, B. Patenaude, M. Chappell, S. Makni, T. Behrens, C. Beckmann, M. Jenkinson, S.M. Smith. Bayesian analysis of neuroimaging data in FSL. NeuroImage, 45:S173-86, 2009.",
      "command": "/flywheel/v0/run.py",
      "description": "This tool provides a general pipeline for processing anatomical images (e.g. T1-weighted scans). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "DEBIAN_FRONTEND": "noninteractive",
        "FLYWHEEL": "/flywheel/v0",
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "FSL_DIR": "/usr/share/fsl/5.0",
        "GPG_KEY": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D",
        "LANG": "C.UTF-8",
        "LD_LIBRARY_PATH": "/usr/share/fsl/5.0/lib",
        "PATH": "/usr/share/fsl/5.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "POSSUMDIR": "/usr/share/fsl/5.0",
        "PYTHON_PIP_VERSION": "19.1.1",
        "PYTHON_VERSION": "3.7.3",
        "TZ": "Etc/UTC"
      },
      "label": "FSL-ANAT - Anatomical Processing Pipeline",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "fsl-anat",
      "source": "https://github.com/flywheel-apps/fsl-anat",
      "url": "https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/fsl_anat",
      "version": "1.1.0_5.0.9"
    },
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "cite": "M.W. Woolrich, S. Jbabdi, B. Patenaude, M. Chappell, S. Makni, T. Behrens, C. Beckmann, M. Jenkinson, S.M. Smith. Bayesian analysis of neuroimaging data in FSL. NeuroImage, 45:S173-86, 2009.",
      "command": "/flywheel/v0/run.py",
      "description": "This tool provides a general pipeline for processing anatomical images (e.g. T1-weighted scans). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "DEBIAN_FRONTEND": "noninteractive",
        "FLYWHEEL": "/flywheel/v0",
        "FSLDIR": "/usr/share/fsl/6.0",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "FSL_DIR": "/usr/share/fsl/5.0",
        "GPG_KEY": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D",
        "LANG": "C.UTF-8",
        "LD_LIBRARY_PATH": "/usr/share/fsl/6.0/lib",
        "PATH": "/usr/share/fsl/6.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "POSSUMDIR": "/usr/share/fsl/6.0",
        "PYTHON_PIP_VERSION": "19.1.1",
        "PYTHON_VERSION": "3.7.3",
        "TZ": "Etc/UTC"
      },
      "label": "FSL-ANAT - Anatomical Processing Pipeline",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "fsl-anat",
      "source": "https://github.com/flywheel-apps/fsl-anat",
      "url": "https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/fsl_anat",
      "version": "1.0.0_6.0.1"
    },
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "cite": "M.W. Woolrich, S. Jbabdi, B. Patenaude, M. Chappell, S. Makni, T. Behrens, C. Beckmann, M. Jenkinson, S.M. Smith. Bayesian analysis of neuroimaging data in FSL. NeuroImage, 45:S173-86, 2009.",
      "command": "/flywheel/v0/run.py",
      "description": "This tool provides a general pipeline for processing anatomical images (e.g. T1-weighted scans).<br>Most of the pipeline involves standard use of FSL tools, but the bias-field correction has been substantially improved, especially for strong bias-fields typical of multi-coil arrays and high-field scanners.<br>The stages in the pipeline (in order) are:<br>reorient the images to the standard (MNI) orientation [fslreorient2std]\nautomatically crop the image [robustfov]\nbias-field correction (RF/B1-inhomogeneity-correction) [FAST]\nregistration to standard space (linear and non-linear) [FLIRT and FNIRT]\nbrain-extraction [FNIRT-based or BET]\ntissue-type segmentation [FAST]\nsubcortical structure segmentation [FIRST]<br>The overall run-time is heavily dependent on the resolution of the image but anything between 30 and 90 minutes would be typical. Outputs include a zipped archive and output file manifest. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "DEBIAN_FRONTEND": "noninteractive",
        "FLYWHEEL": "/flywheel/v0",
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "FSL_DIR": "/usr/share/fsl/5.0",
        "GPG_KEY": "0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D",
        "LANG": "C.UTF-8",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0:/usr/lib/fsl/5.0:",
        "PATH": "/usr/lib/fsl/5.0:/usr/lib/fsl/5.0:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "POSSUMDIR": "/usr/share/fsl/5.0",
        "PYTHON_PIP_VERSION": "19.1.1",
        "PYTHON_VERSION": "3.7.3",
        "TZ": "Etc/UTC"
      },
      "label": "FSL-ANAT - Anatomical Processing Pipeline",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "fsl-anat",
      "source": "https://github.com/flywheel-apps/fsl-anat",
      "url": "https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/fsl_anat",
      "version": "1.0.0_5.0.9"
    }
  ],
  [
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "description": "Brain Extraction Tool (BET2) from FMRIB Software Library (FSL) v5.0. BET (Brain Extraction Tool) deletes non-brain tissue from an image of the whole head. It can also estimate the inner and outer skull surfaces, and outer scalp surface, if you have good quality T1 and T2 input images. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "FSL: Brain Extraction Tool (BET2)",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "fsl-bet",
      "source": "https://github.com/scitran-apps/fsl-bet",
      "url": "http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/BET",
      "version": "0.2.2"
    },
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "description": "Brain Extraction Tool (BET2) from FMRIB Software Library (FSL) v5.0. BET (Brain Extraction Tool) deletes non-brain tissue from an image of the whole head. It can also estimate the inner and outer skull surfaces, and outer scalp surface, if you have good quality T1 and T2 input images. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "FSL: Brain Extraction Tool (BET2)",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "fsl-bet",
      "source": "https://github.com/scitran-apps/fsl-bet",
      "url": "http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/BET",
      "version": "0.2.1"
    },
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "description": "Brain Extraction Tool (BET2) from FMRIB Software Library (FSL) v5.0. BET (Brain Extraction Tool) deletes non-brain tissue from an image of the whole head. It can also estimate the inner and outer skull surfaces, and outer scalp surface, if you have good quality T1 and T2 input images. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "FSL: Brain Extraction Tool (BET2)",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "fsl-bet",
      "source": "https://github.com/scitran-apps/fsl-bet",
      "url": "http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/BET",
      "version": "0.2.0"
    },
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "description": "Brain Extraction Tool (BET2) from FMRIB Software Library (FSL) v5.0. BET (Brain Extraction Tool) deletes non-brain tissue from an image of the whole head. It can also estimate the inner and outer skull surfaces, and outer scalp surface, if you have good quality T1 and T2 input images. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "FSL: Brain Extraction Tool (BET2)",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "fsl-bet",
      "source": "https://github.com/scitran-apps/fsl-bet",
      "url": "http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/BET",
      "version": "0.1.0"
    }
  ],
  [
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "cite": "Zhang, Y. and Brady, M. and Smith, S. Segmentation of brain MR images through a hidden Markov random field model and the expectation-maximization algorithm. IEEE Trans Med Imag, 20(1):45-57, 2001.",
      "description": "FAST (FMRIB's Automated Segmentation Tool) segments a 3D image of the brain into different tissue types (Grey Matter, White Matter, CSF, etc.), whilst also correcting for spatial intensity variations (also known as bias field or RF inhomogeneities). The underlying method is based on a hidden Markov random field model and an associated Expectation-Maximization algorithm. The whole process is fully automated and can also produce a bias field-corrected input image and a probabilistic and/or partial volume tissue segmentation. It is robust and reliable, compared to most finite mixture model-based methods, which are sensitive to noise.",
      "label": "FSL: FMRIB Automated Segmentation Tool (FAST4, v5.0.9)",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "fsl-fast",
      "source": "https://github.com/scitran-apps/fsl-fast",
      "url": "http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FAST",
      "version": "0.1.1"
    },
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "description": "FAST (FMRIB's Automated Segmentation Tool) segments a 3D image of the brain into different tissue types (Grey Matter, White Matter, CSF, etc.), whilst also correcting for spatial intensity variations (also known as bias field or RF inhomogeneities). The underlying method is based on a hidden Markov random field model and an associated Expectation-Maximization algorithm. The whole process is fully automated and can also produce a bias field-corrected input image and a probabilistic and/or partial volume tissue segmentation. It is robust and reliable, compared to most finite mixture model-based methods, which are sensitive to noise.",
      "label": "FSL: FMRIB Automated Segmentation Tool (FAST4, v5.0.9)",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "fsl-fast",
      "source": "https://github.com/scitran-apps/fsl-fast",
      "url": "http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FAST",
      "version": "0.1"
    }
  ],
  [
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "description": "FSL's FEAT (FMRI Expert Analysis Tool). As implemented in this Gear FEAT allows for basic preprocessing of an fMRI dataset including motion correction using MCFLIRT [Jenkinson 2002]; slice-timing correction using Fourier-space time-series phase-shifting; non-brain removal using BET [Smith 2002]; spatial smoothing using a Gaussian kernel; multiplicative mean intensity normalization of the volume at each timepoint; and highpass temporal filtering (Gaussian-weighted least-squares straight line fitting), brain extraction, and registration to a standard image (MNI152). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "FSL: FEAT - fMRI preprocessing (v6.0)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "fsl-feat",
      "source": "https://github.com/flywheel-apps/fsl-feat",
      "url": "http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FEAT",
      "version": "1.0.3_6.0"
    },
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "description": "FSL's FEAT (FMRI Expert Analysis Tool). As implemented in this Gear FEAT allows for basic preprocessing of an fMRI dataset including motion correction using MCFLIRT [Jenkinson 2002]; slice-timing correction using Fourier-space time-series phase-shifting; non-brain removal using BET [Smith 2002]; spatial smoothing using a Gaussian kernel; multiplicative mean intensity normalization of the volume at each timepoint; and highpass temporal filtering (Gaussian-weighted least-squares straight line fitting), brain extraction, and registration to a standard image (MNI152). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "FSL: FEAT - fMRI preprocessing (v6.0)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "fsl-feat",
      "source": "https://github.com/flywheel-apps/fsl-feat",
      "url": "http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FEAT",
      "version": "0.1.4"
    },
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "description": "FSL's FEAT (FMRI Expert Analysis Tool). As implemented in this Gear FEAT allows for basic preprocessing of an fMRI dataset including motion correction using MCFLIRT [Jenkinson 2002]; slice-timing correction using Fourier-space time-series phase-shifting; non-brain removal using BET [Smith 2002]; spatial smoothing using a Gaussian kernel; multiplicative mean intensity normalization of the volume at each timepoint; and highpass temporal filtering (Gaussian-weighted least-squares straight line fitting), brain extraction, and registration to a standard image (MNI152). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "FSL: FEAT - fMRI preprocessing (v6.0)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "fsl-feat",
      "source": "https://github.com/flywheel-apps/fsl-feat",
      "url": "http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FEAT",
      "version": "0.1.3"
    },
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "description": "FSL's FEAT (FMRI Expert Analysis Tool). As implemented in this Gear FEAT allows for basic preprocessing of an fMRI dataset including motion correction using MCFLIRT [Jenkinson 2002]; slice-timing correction using Fourier-space time-series phase-shifting; non-brain removal using BET [Smith 2002]; spatial smoothing using a Gaussian kernel; multiplicative mean intensity normalization of the volume at each timepoint; and highpass temporal filtering (Gaussian-weighted least-squares straight line fitting), brain extraction, and registration to a standard image (MNI152). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "FSL: FEAT - fMRI preprocessing (v6.0)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "fsl-feat",
      "source": "https://github.com/flywheel-apps/fsl-feat",
      "url": "http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FEAT",
      "version": "0.1.1"
    },
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "description": "FSL's FEAT (FMRI Expert Analysis Tool). As implemented in this Gear FEAT allows for basic preprocessing of an fMRI dataset including motion correction using MCFLIRT [Jenkinson 2002]; slice-timing correction using Fourier-space time-series phase-shifting; non-brain removal using BET [Smith 2002]; spatial smoothing using a Gaussian kernel; multiplicative mean intensity normalization of the volume at each timepoint; and highpass temporal filtering (Gaussian-weighted least-squares straight line fitting). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "FSL: FEAT - fMRI preprocessing (v6.0)",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "fsl-feat",
      "source": "https://github.com/flywheel-apps/fsl-feat",
      "url": "http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FEAT",
      "version": "0.1"
    }
  ],
  [
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "description": "fslreorient2std is a tool for reorienting the image to match the approximate orientation of the standard template images (MNI152). It only applies 0, 90, 180 or 270 degree rotations. It is not a registration tool. It requires NIfTI images with valid orientation information in them (seen by valid labels in FSLView).  This tool assumes the labels are correct - if not, fix that before using this Gear.",
      "label": "FSL: fslreorient2std - Reorient Image to Standard Template",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "fsl-fslreorient2std",
      "source": "https://github.com/flywheel-apps/fsl-fslreorient2std",
      "url": "https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Fslutils",
      "version": "1.0.0"
    }
  ],
  [
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "cite": "S.M. Smith, Y. Zhang, M. Jenkinson, J. Chen, P.M. Matthews, A. Federico, and N. De Stefano. Accurate, robust and automated longitudinal and cross-sectional brain change analysis. NeuroImage, 17(1):479-489, 2002.  S.M. Smith, M. Jenkinson, M.W. Woolrich, C.F. Beckmann, T.E.J. Behrens, H. Johansen-Berg, P.R. Bannister, M. De Luca, I. Drobnjak, D.E. Flitney, R. Niazy, J. Saunders, J. Vickers, Y. Zhang, N. De Stefano, J.M. Brady, and P.M. Matthews. Advances in functional and structural MR image analysis and implementation as FSL. NeuroImage, 23(S1):208-219, 2004.",
      "command": "python3 run.py",
      "description": "Siena estimates percentage brain volume change (PBVC) betweem two input images, taken of the same subject, at different points in time. It calls a series of FSL programs to strip the non-brain tissue from the two images, register the two brains (under the constraint that the skulls are used to hold the scaling constant during the registration) and analyse the brain change between the two time points. As implemented in this Gear Siena allows for analysis of 14 subcortical regions as well as the Brain-Stem/4th Ventricle (with VENT option). Inputs should be structural images (T1-weighted, T2-weighted, PD, etc) where the in-plane resolution is better than 2mm (ideally 1mm). Outputs consist of an archive containing the results of the analysis, as well as an HTML report summarizing the analysis findings. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "FSLBROWSER": "/etc/alternatives/x-www-browser",
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLLOCKDIR": "",
        "FSLMACHINELIST": "",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLREMOTECALL": "",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0",
        "PATH": "/usr/lib/fsl/5.0:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "POSSUMDIR": "/usr/share/fsl/5.0"
      },
      "label": "FSL: SIENA - Longitudinal analysis of brain change",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "fsl-siena",
      "source": "https://github.com/flywheel-apps/fsl-siena-sienax",
      "url": "https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/SIENA",
      "version": "1.0.1_5.0"
    },
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "cite": "S.M. Smith, Y. Zhang, M. Jenkinson, J. Chen, P.M. Matthews, A. Federico, and N. De Stefano. Accurate, robust and automated longitudinal and cross-sectional brain change analysis. NeuroImage, 17(1):479-489, 2002.  S.M. Smith, M. Jenkinson, M.W. Woolrich, C.F. Beckmann, T.E.J. Behrens, H. Johansen-Berg, P.R. Bannister, M. De Luca, I. Drobnjak, D.E. Flitney, R. Niazy, J. Saunders, J. Vickers, Y. Zhang, N. De Stefano, J.M. Brady, and P.M. Matthews. Advances in functional and structural MR image analysis and implementation as FSL. NeuroImage, 23(S1):208-219, 2004.",
      "command": "python3 run.py",
      "description": "Siena estimates percentage brain volume change (PBVC) betweem two input images, taken of the same subject, at different points in time. It calls a series of FSL programs to strip the non-brain tissue from the two images, register the two brains (under the constraint that the skulls are used to hold the scaling constant during the registration) and analyse the brain change between the two time points. As implemented in this Gear Siena allows for analysis of 14 subcortical regions as well as the Brain-Stem/4th Ventricle (with VENT option). Inputs should be structural images (T1-weighted, T2-weighted, PD, etc) where the in-plane resolution is better than 2mm (ideally 1mm). Outputs consist of an archive containing the results of the analysis, as well as an HTML report summarizing the analysis findings. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "FSLBROWSER": "/etc/alternatives/x-www-browser",
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLLOCKDIR": "",
        "FSLMACHINELIST": "",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLREMOTECALL": "",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0",
        "PATH": "/usr/lib/fsl/5.0:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "POSSUMDIR": "/usr/share/fsl/5.0"
      },
      "label": "FSL: SIENA - Longitudinal analysis of brain change",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "fsl-siena",
      "source": "https://github.com/flywheel-apps/fsl-siena-sienax",
      "url": "https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/SIENA",
      "version": "1.0.0_5.0"
    }
  ],
  [
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "cite": "S.M. Smith, Y. Zhang, M. Jenkinson, J. Chen, P.M. Matthews, A. Federico, and N. De Stefano. Accurate, robust and automated longitudinal and cross-sectional brain change analysis. NeuroImage, 17(1):479-489, 2002.  S.M. Smith, M. Jenkinson, M.W. Woolrich, C.F. Beckmann, T.E.J. Behrens, H. Johansen-Berg, P.R. Bannister, M. De Luca, I. Drobnjak, D.E. Flitney, R. Niazy, J. Saunders, J. Vickers, Y. Zhang, N. De Stefano, J.M. Brady, and P.M. Matthews. Advances in functional and structural MR image analysis and implementation as FSL. NeuroImage, 23(S1):208-219, 2004.",
      "command": "python3 run.py",
      "description": "FSL's SIENAX. Sienax estimates total brain tissue volume, from a single image, normalised for skull size. It calls a series of FSL programs: It first strips non-brain tissue, and then uses the brain and skull images to estimate the scaling between the subject's image and standard space. It then runs tissue segmentation to estimate the volume of brain tissue, and multiplies this by the estimated scaling factor, to reduce head-size-related variability between subjects. Inputs should be structural image (T1-weighted, T2-weighted, PD, etc) where the in-plane resolution is better than 2mm (ideally 1mm). Outputs consist of an archive containing the results of the analysis, as well as an HTML report summarizing the analysis findings. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "FSLBROWSER": "/etc/alternatives/x-www-browser",
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLLOCKDIR": "",
        "FSLMACHINELIST": "",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLREMOTECALL": "",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0",
        "PATH": "/usr/lib/fsl/5.0:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "POSSUMDIR": "/usr/share/fsl/5.0"
      },
      "label": "FSL: SIENAX - Brain tissue volume, normalised for subject head size",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "fsl-sienax",
      "source": "https://github.com/flywheel-apps/fsl-siena-sienax",
      "url": "https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/SIENA",
      "version": "1.0.1_5.0"
    },
    {
      "author": "Analysis Group, FMRIB, Oxford, UK.",
      "cite": "S.M. Smith, Y. Zhang, M. Jenkinson, J. Chen, P.M. Matthews, A. Federico, and N. De Stefano. Accurate, robust and automated longitudinal and cross-sectional brain change analysis. NeuroImage, 17(1):479-489, 2002.  S.M. Smith, M. Jenkinson, M.W. Woolrich, C.F. Beckmann, T.E.J. Behrens, H. Johansen-Berg, P.R. Bannister, M. De Luca, I. Drobnjak, D.E. Flitney, R. Niazy, J. Saunders, J. Vickers, Y. Zhang, N. De Stefano, J.M. Brady, and P.M. Matthews. Advances in functional and structural MR image analysis and implementation as FSL. NeuroImage, 23(S1):208-219, 2004.",
      "command": "python3 run.py",
      "description": "FSL's SIENAX. Sienax estimates total brain tissue volume, from a single image, normalised for skull size. It calls a series of FSL programs: It first strips non-brain tissue, and then uses the brain and skull images to estimate the scaling between the subject's image and standard space. It then runs tissue segmentation to estimate the volume of brain tissue, and multiplies this by the estimated scaling factor, to reduce head-size-related variability between subjects. Inputs should be structural image (T1-weighted, T2-weighted, PD, etc) where the in-plane resolution is better than 2mm (ideally 1mm). Outputs consist of an archive containing the results of the analysis, as well as an HTML report summarizing the analysis findings. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {
        "FSLBROWSER": "/etc/alternatives/x-www-browser",
        "FSLDIR": "/usr/share/fsl/5.0",
        "FSLLOCKDIR": "",
        "FSLMACHINELIST": "",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLREMOTECALL": "",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "LD_LIBRARY_PATH": "/usr/lib/fsl/5.0",
        "PATH": "/usr/lib/fsl/5.0:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "POSSUMDIR": "/usr/share/fsl/5.0"
      },
      "label": "FSL: SIENAX - Brain tissue volume, normalised for subject head size",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "fsl-sienax",
      "source": "https://github.com/flywheel-apps/fsl-siena-sienax",
      "url": "https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/SIENA",
      "version": "1.0.0_5.0"
    }
  ],
  [
    {
      "author": "Sina Aslan, Ph.D.",
      "description": "Modified Brain Extraction Tool 2 (BET2) from FMRIB Software Library (FSL) v5.0 called SuperBET2 deletes non-brain tissue from an image of the whole head. It can also estimate the inner and outer skull surfaces, and outer scalp surface, if you have good quality T1. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.\n",
      "label": "FSL: SUPER Brain Extraction Tool (BET2)",
      "license": "Other",
      "maintainer": "Flywheel Support <support@flywheel.io>",
      "name": "fsl-superbet2",
      "source": "https://github.com/flywheel-apps/fsl-superbet2",
      "url": "https://github.com/saslan-7/super-bet2",
      "version": "1.0.0_5.0.7"
    }
  ],
  [
    {
      "author": "FSL",
      "command": "source /venv/bin/activate && python run.py",
      "description": "Estimates a distortion correction field given one or more pairs of images with opposite PE directions LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {},
      "label": "FSL: TOPUP correction for susceptibility induced distortions",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "fsl-topup",
      "source": "https://github.com/flywheel-apps/fsl-topup",
      "url": "https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/topup",
      "version": "0.0.6"
    },
    {
      "author": "FSL",
      "command": "python3 run.py",
      "description": "Estimates a distortion correction field given one or more pairs of images with opposite PE directions LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {},
      "label": "FSL: TOPUP correction for susceptibility induced distortions",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "fsl-topup",
      "source": "https://github.com/flywheel-apps/fsl-topup",
      "url": "https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/topup",
      "version": "0.0.3"
    },
    {
      "author": "FSL",
      "command": "python3 run.py",
      "description": "Estimates a distortion correction field given one or more pairs of images with opposite PE directions LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "environment": {},
      "label": "FSL: TOPUP correction for susceptibility induced distortions",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "fsl-topup",
      "source": "https://github.com/flywheel-apps/fsl-topup",
      "url": "https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/topup",
      "version": "0.0.2"
    }
  ],
  [
    {
      "author": "Tinashe Michael Tapera",
      "cite": "",
      "command": "./fw_heudiconv_run.py",
      "description": "HeuDiConv-style BIDS curation on Flywheel. Flywheel HeuDiConv (or fw-heudiconv, pronounced /fwuː di kɑː n(v)/) is a Python-based toolkit that leverages the flexibility and comprehensiveness of HeuDiConv to curate neuroimaging data on Flywheel into a BIDS-valid format.",
      "label": "Flywheel HeuDiConv",
      "license": "Other",
      "maintainer": "Tinashe Michael Tapera",
      "name": "fw-heudiconv",
      "source": "",
      "url": "https://github.com/PennBBL/fw-heudiconv/wiki",
      "version": "0.1.15_0.1.0"
    }
  ],
  [
    {
      "author": "Jen Vickerman",
      "cite": "List citations here.",
      "command": "python run.py",
      "description": "Analysis Gear that can be configured to pass or fail",
      "environment": {},
      "label": "FW QA Test Analysis Gear",
      "license": "Other",
      "maintainer": "Jen Vickerman",
      "name": "fw-test-analysis",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/fw-test-analysis",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/fw-test-analysis",
      "version": "1.0.0"
    }
  ],
  [
    {
      "author": "Stephen Di Salvio",
      "cite": "List citations here.",
      "command": "python run.py",
      "description": "Utility Gear that can be configured to pass or fail",
      "environment": {},
      "label": "FW QA Test Utility Gear",
      "license": "Other",
      "maintainer": "Stephen Di Salvio",
      "name": "fw-test-utility",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/fw-test-utility",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/fw-test-utility",
      "version": "1.0.1"
    }
  ],
  [
    {
      "author": "Richard Edden, et. al",
      "description": "Gannet is a software package designed for the analysis of edited magnetic resonance spectroscopy (MRS) data. Gannet runs in Matlab and is available as code rather than executables, empowering users to make local changes. Gannet is designed to run without user intervention, to remove operator variance from the quantification of edited MRS data. This Gear uses a compiled version from huawu02/gannet, which is modified to support latest generation GE P-Files, and is executed using the Matlab Compiler Runtime.",
      "label": "Gannet 3.0: Analysis of edited MRS data",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "gannet",
      "source": "https://github.com/scitran-apps/gannet",
      "url": "http://www.gabamrs.com/",
      "version": "0.1.6_3.0"
    },
    {
      "author": "Richard Edden, et. al",
      "description": "Gannet is a software package designed for the analysis of edited magnetic resonance spectroscopy (MRS) data. Gannet runs in Matlab and is available as code rather than executables, empowering users to make local changes. Gannet is designed to run without user intervention, to remove operator variance from the quantification of edited MRS data. This Gear uses a compiled version from huawu02/gannet, which is modified to support latest generation GE P-Files, and is executed using the Matlab Compiler Runtime.",
      "label": "Gannet 3.0: Analysis of edited MRS data",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "gannet",
      "source": "https://github.com/scitran-apps/gannet",
      "url": "http://www.gabamrs.com/",
      "version": "0.1.5_3.0"
    },
    {
      "author": "Richard Edden, et. al",
      "description": "Gannet is a software package designed for the analysis of edited magnetic resonance spectroscopy (MRS) data. Gannet runs in Matlab and is available as code rather than executables, empowering users to make local changes. Gannet is designed to run without user intervention, to remove operator variance from the quantification of edited MRS data. This Gear uses a compiled version from huawu02/gannet, which is modified to support latest generation GE P-Files, and is executed using the Matlab Compiler Runtime.",
      "label": "Gannet 3.0: Analysis of edited MRS data",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "gannet",
      "source": "https://github.com/scitran-apps/gannet",
      "url": "http://www.gabamrs.com/",
      "version": "0.1.4_3.0"
    },
    {
      "author": "Richard Edden, et. al",
      "description": "Gannet is a software package designed for the analysis of edited magnetic resonance spectroscopy (MRS) data. Gannet runs in Matlab and is available as code rather than executables, empowering users to make local changes. Gannet is designed to run without user intervention, to remove operator variance from the quantification of edited MRS data. This Gear uses a compiled version from huawu02/gannet, which is modified to support latest generation GE P-Files, and is executed using the Matlab Compiler Runtime.",
      "label": "Gannet 2.1: Analysis of edited MRS data",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "gannet",
      "source": "https://github.com/scitran-apps/gannet",
      "url": "http://www.gabamrs.com/",
      "version": "0.1.3_3.0"
    },
    {
      "author": "Richard Edden, et. al",
      "description": "Gannet is a software package designed for the analysis of edited magnetic resonance spectroscopy (MRS) data. Gannet runs in Matlab and is available as code rather than executables, empowering users to make local changes. Gannet is designed to run without user intervention, to remove operator variance from the quantification of edited MRS data. This Gear uses a compiled version from huawu02/gannet, which is modified to support latest generation GE P-Files, and is executed using the Matlab Compiler Runtime.",
      "label": "Gannet 2.1: Analysis of edited MRS data",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "gannet",
      "source": "https://github.com/scitran-apps/gannet",
      "url": "http://www.gabamrs.com/",
      "version": "0.1.2_2.1"
    },
    {
      "author": "Richard Edden, et. al",
      "description": "Gannet is a software package designed for the analysis of edited magnetic resonance spectroscopy (MRS) data. Gannet runs in Matlab and is available as code rather than executables, empowering users to make local changes. Gannet is designed to run without user intervention, to remove operator variance from the quantification of edited MRS data. This Gear uses a compiled version from huawu02/gannet, which is modified to support latest generation GE P-Files, and is executed using the Matlab Compiler Runtime.",
      "label": "Gannet: Analysis of edited MRS data using Gannet version 2.1",
      "license": "Other",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "gannet",
      "source": "https://github.com/scitran-apps/gannet",
      "url": "http://www.gabamrs.com/",
      "version": "0.1.0_2.1"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "This is a gear for inspecting and redacting sensitive information from DICOM files via the Google DLP API.",
      "label": "PHI Screen (Google DLP)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "google-dlp-phi-screen",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/google-dlp-phi-screen",
      "url": "https://cloud.google.com/dlp",
      "version": "1.0.0"
    }
  ],
  [
    {
      "author": "Schneider Lab, University of Pittsburgh",
      "description": "Computes a transformation of multi-shell diffusion weighted data to a set of Spherical Harmonic coefficients and outputs 4D Spherical Harmonic coefficient data. This is a first step in the Schneider Lab HDFT diffusion reconstruction process. See: Pathak, S. K., Fissell, C., Krishnaswamy, D., Aggarwal, S., Hachey, R., Schneider, W. (2015). Diffusion reconstruction by combining spherical harmonics and generalized q-sampling imaging. ISMRM, Toronto, Canada.",
      "label": "HDFT Subsampled Diffusion Reconstruction",
      "license": "GPL-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "hdft-subsampled-recon",
      "source": "https://github.com/schlabhdft/ALDIT",
      "url": "http://www.lrdc.pitt.edu/schneiderlab/",
      "version": "0.0.1"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "Curates a container in the flywheel hierarchy given a python HierarchyCurator class. Using an implementation of the HierarchyCurator Class (provided as an input file (e.g., curator.py)) this gear is able to curate an entire project, walking down the hierarchy through project, subject, session, acquisition, analysis, and file containers.",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "LANG": "C.UTF-8",
        "PATH": "/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PYTHON_GET_PIP_SHA256": "e235c437e5c7d7524fbce3880ca39b917a73dc565e0c813465b7a7a329bb279a",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/38e54e5de07c66e875c11a1ebbdb938854625dd8/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.8.13"
      },
      "label": "Hierarchy Curator",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "hierarchy-curator",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/hierarchy-curator",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/hierarchy-curator",
      "version": "2.1.6"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Curates a container in the flywheel hierarchy given a python HierarchyCurator class. Using an implementation of the HierarchyCurator Class (provided as an input file (e.g., curator.py)) this gear is able to curate an entire project, walking down the hierarchy through project, subject, session, acquisition, analysis, and file containers.",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "LANG": "C.UTF-8",
        "PATH": "/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PYTHON_GET_PIP_SHA256": "e235c437e5c7d7524fbce3880ca39b917a73dc565e0c813465b7a7a329bb279a",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/38e54e5de07c66e875c11a1ebbdb938854625dd8/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.8.13"
      },
      "label": "Hierarchy Curator",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "hierarchy-curator",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/hierarchy-curator",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/hierarchy-curator",
      "version": "2.1.4"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Curates a container in the flywheel hierarchy given a python HierarchyCurator class. Using an implementation of the HierarchyCurator Class (provided as an input file (e.g., curator.py)) this gear is able to curate an entire project, walking down the hierarchy through project, subject, session, acquisition, analysis, and file containers.",
      "environment": {},
      "label": "Hierarchy Curator",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "hierarchy-curator",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/hierarchy-curator",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/hierarchy-curator",
      "version": "2.1.0"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Curates a container in the flywheel hierarchy given a python HierarchyCurator class. Using an implementation of the HierarchyCurator Class (provided as an input file (e.g., curator.py)) this gear is able to curate an entire project, walking down the hierarchy through project, subject, session, acquisition, analysis, and file containers.",
      "environment": {},
      "label": "Hierarchy Curator",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "hierarchy-curator",
      "source": "https://github.com/flywheel-apps/custom-curator",
      "url": "https://github.com/flywheel-apps/custom-curator",
      "version": "1.1.0"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Curates a container in the flywheel hierarchy given a python HierarchyCurator class. Using an implementation of the HierarchyCurator Class (provided as an input file (e.g., curator.py)) this gear is able to curate an entire project, walking down the hierarchy through project, subject, session, acquisition, analysis, and file containers.",
      "environment": {},
      "label": "Hierarchy Curator",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "hierarchy-curator",
      "source": "https://github.com/flywheel-apps/custom-curator",
      "url": "https://github.com/flywheel-apps/custom-curator",
      "version": "1.0.0"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Histogram Matching Intensity Standardization",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "PATH": "/opt/qt/5.15.2/gcc_64/:/opt/rh/devtoolset-4/root/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/src/Slicer-build/Slicer-build/lib/Slicer-4.13/cli-modules"
      },
      "label": "Histogram Matching Intensity Standardization",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "intensity-standardization",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/intensity-standardization",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/intensity-standardization",
      "version": "0.2.0_4.13.0"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Histogram Matching Intensity Standardization",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "PATH": "/opt/qt/5.15.2/gcc_64/:/opt/rh/devtoolset-4/root/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/src/Slicer-build/Slicer-build/lib/Slicer-4.13/cli-modules"
      },
      "label": "Histogram Matching Intensity Standardization",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "intensity-standardization",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/intensity-standardization",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/intensity-standardization",
      "version": "0.1.0_4.13.0"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "Estimation of metabolite concentrations from localized in vivo proton NMR spectra. Magn Reson Med 30, 672 (1993). Stephen Provencher",
      "command": "poetry run python run.py",
      "description": "LCMODEL: Automatic quantification of in vivo proton MR spectra. Fully automatic, non-interactive, operator-independent: time-domain data input, one-page summary output. Fully developed, over 27 years, with spectra analyzed from a wide variety of scanners and field strengths at more than 1000 sites.",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "LD_LIBRARY_PATH": "~/.lcmodel",
        "PATH": "~/.lcmodel/bin:/opt/poetry/bin:/usr/bin/python3:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      },
      "label": "LC Model",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "lcmodel",
      "source": "http://s-provencher.com/lcmodel.shtml",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/lcmodel",
      "version": "0.0.5_6.3"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python /flywheel/v0/run.py",
      "description": "This gear converts ROIs created in Flywheel's OHIF viewer to NIfTI files.",
      "environment": {
        "BUILD_TIME": "2023-03-01T08:58:30Z",
        "COMMIT_REF": "main",
        "COMMIT_SHA": "0481c74f",
        "CXX": "/usr/bin/gcc",
        "DCMCOMMIT": "fe2f26005109f396a4f828aa438241f73fc25fe8",
        "DEBIAN_FRONTEND": "noninteractive",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "HOME": "/root",
        "LANG": "C.UTF-8",
        "OJ_VERSION": "2.4.0",
        "OPENJPEGDIR": "/flywheel/v0/openjpeg",
        "PATH": "/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PWD": "/flywheel/v0",
        "PYSITE": "/usr/local/lib/python3.11/site-packages",
        "PYTHON_GET_PIP_SHA256": "394be00f13fa1b9aaa47e911bdb59a09c3b2986472130f30aa0bfaf7f3980637",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d5cb0afaf23b8520f1bbcfed521017b4a95f5c01/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.3.1",
        "PYTHON_SETUPTOOLS_VERSION": "65.5.1",
        "PYTHON_VERSION": "3.11.2",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib",
        "SHLVL": "1",
        "TERM": "xterm",
        "XDG_RUNTIME_DIR": "/tmp/runtime-sliceruser",
        "_": "/usr/bin/env"
      },
      "label": "Mask Exporter",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "mask-exporter",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/mask-exporter",
      "url": "",
      "version": "1.1.4"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python /flywheel/v0/run.py",
      "description": "This gear converts ROIs created in Flywheel's OHIF viewer to NIfTI files.",
      "environment": {
        "BUILD_TIME": "2023-03-01T08:58:30Z",
        "COMMIT_REF": "main",
        "COMMIT_SHA": "0481c74f",
        "CXX": "/usr/bin/gcc",
        "DCMCOMMIT": "fe2f26005109f396a4f828aa438241f73fc25fe8",
        "DEBIAN_FRONTEND": "noninteractive",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "HOME": "/root",
        "LANG": "C.UTF-8",
        "OJ_VERSION": "2.4.0",
        "OPENJPEGDIR": "/flywheel/v0/openjpeg",
        "PATH": "/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PWD": "/flywheel/v0",
        "PYSITE": "/usr/local/lib/python3.11/site-packages",
        "PYTHON_GET_PIP_SHA256": "394be00f13fa1b9aaa47e911bdb59a09c3b2986472130f30aa0bfaf7f3980637",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d5cb0afaf23b8520f1bbcfed521017b4a95f5c01/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.3.1",
        "PYTHON_SETUPTOOLS_VERSION": "65.5.1",
        "PYTHON_VERSION": "3.11.2",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib",
        "SHLVL": "1",
        "TERM": "xterm",
        "XDG_RUNTIME_DIR": "/tmp/runtime-sliceruser",
        "_": "/usr/bin/env"
      },
      "label": "Mask Exporter",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "mask-exporter",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/mask-exporter",
      "url": "",
      "version": "1.1.3"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python /flywheel/v0/run.py",
      "description": "This gear converts ROIs created in Flywheel's OHIF viewer to NIfTI files.",
      "environment": {
        "BUILD_TIME": "2023-03-01T08:58:30Z",
        "COMMIT_REF": "main",
        "COMMIT_SHA": "0481c74f",
        "CXX": "/usr/bin/gcc",
        "DCMCOMMIT": "fe2f26005109f396a4f828aa438241f73fc25fe8",
        "DEBIAN_FRONTEND": "noninteractive",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "HOME": "/root",
        "LANG": "C.UTF-8",
        "OJ_VERSION": "2.4.0",
        "OPENJPEGDIR": "/flywheel/v0/openjpeg",
        "PATH": "/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PWD": "/flywheel/v0",
        "PYSITE": "/usr/local/lib/python3.11/site-packages",
        "PYTHON_GET_PIP_SHA256": "394be00f13fa1b9aaa47e911bdb59a09c3b2986472130f30aa0bfaf7f3980637",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d5cb0afaf23b8520f1bbcfed521017b4a95f5c01/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.3.1",
        "PYTHON_SETUPTOOLS_VERSION": "65.5.1",
        "PYTHON_VERSION": "3.11.2",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib",
        "SHLVL": "1",
        "TERM": "xterm",
        "XDG_RUNTIME_DIR": "/tmp/runtime-sliceruser",
        "_": "/usr/bin/env"
      },
      "label": "Mask Exporter",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "mask-exporter",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/mask-exporter",
      "url": "",
      "version": "1.1.2"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python /flywheel/v0/run.py",
      "description": "This gear converts ROIs created in Flywheel's OHIF viewer to NIfTI files.",
      "environment": {
        "BUILD_TIME": "2023-03-01T08:58:30Z",
        "COMMIT_REF": "main",
        "COMMIT_SHA": "0481c74f",
        "CXX": "/usr/bin/gcc",
        "DCMCOMMIT": "fe2f26005109f396a4f828aa438241f73fc25fe8",
        "DEBIAN_FRONTEND": "noninteractive",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "HOME": "/root",
        "LANG": "C.UTF-8",
        "OJ_VERSION": "2.4.0",
        "OPENJPEGDIR": "/flywheel/v0/openjpeg",
        "PATH": "/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PWD": "/flywheel/v0",
        "PYSITE": "/usr/local/lib/python3.11/site-packages",
        "PYTHON_GET_PIP_SHA256": "394be00f13fa1b9aaa47e911bdb59a09c3b2986472130f30aa0bfaf7f3980637",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d5cb0afaf23b8520f1bbcfed521017b4a95f5c01/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.3.1",
        "PYTHON_SETUPTOOLS_VERSION": "65.5.1",
        "PYTHON_VERSION": "3.11.2",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib",
        "SHLVL": "1",
        "TERM": "xterm",
        "XDG_RUNTIME_DIR": "/tmp/runtime-sliceruser",
        "_": "/usr/bin/env"
      },
      "label": "Mask Exporter",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "mask-exporter",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/mask-exporter",
      "url": "",
      "version": "1.1.0"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python /flywheel/v0/run.py",
      "description": "This gear converts ROIs created in Flywheel's OHIF viewer to NIfTI files.",
      "environment": {
        "BUILD_TIME": "2023-03-01T08:58:30Z",
        "COMMIT_REF": "main",
        "COMMIT_SHA": "0481c74f",
        "CXX": "/usr/bin/gcc",
        "DCMCOMMIT": "fe2f26005109f396a4f828aa438241f73fc25fe8",
        "DEBIAN_FRONTEND": "noninteractive",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "HOME": "/root",
        "LANG": "C.UTF-8",
        "OJ_VERSION": "2.4.0",
        "OPENJPEGDIR": "/flywheel/v0/openjpeg",
        "PATH": "/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PWD": "/flywheel/v0",
        "PYSITE": "/usr/local/lib/python3.11/site-packages",
        "PYTHON_GET_PIP_SHA256": "394be00f13fa1b9aaa47e911bdb59a09c3b2986472130f30aa0bfaf7f3980637",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d5cb0afaf23b8520f1bbcfed521017b4a95f5c01/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.3.1",
        "PYTHON_SETUPTOOLS_VERSION": "65.5.1",
        "PYTHON_VERSION": "3.11.2",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib",
        "SHLVL": "1",
        "TERM": "xterm",
        "XDG_RUNTIME_DIR": "/tmp/runtime-sliceruser",
        "_": "/usr/bin/env"
      },
      "label": "Mask Exporter",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "mask-exporter",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/mask-exporter",
      "url": "",
      "version": "1.0.4"
    }
  ],
  [
    {
      "author": "Prantik Kundu",
      "cite": "Kundu, P., Brenowitz, N.D., Voon, V., Worbe, Y., Vertes, P.E., Inati, S.J., Saad, Z.S., Bandettini, P.A. & Bullmore, E.T. Integrated strategy for improving functional connectivity mapping using multiecho fMRI. PNAS (2013). Kundu, P., Inati, S.J., Evans, J.W., Luh, W.M. & Bandettini, P.A. Differentiating BOLD and non-BOLD signals in fMRI time series using multi-echo EPI. NeuroImage (2011). http://dx.doi.org/10.1016/j.neuroimage.2011.12.028",
      "command": "python3 /flywheel/v0/run.py",
      "description": "Multi-Echo Independent Components Analysis (ME-ICA) is a method for fMRI analysis and denoising based on the T2* decay of BOLD signals, as measured using multi-echo fMRI. ME-ICA decomposes multi-echo fMRI datasets into independent components (ICs) using FastICA, then categorizes ICs as BOLD or noise using their BOLD and non-BOLD weightings (measured as Kappa and Rho values, respectively). Removing non-BOLD weighted components robustly denoises data for motion, physiology and scanner artifacts, in a simple and physically principled way. Pipeline includes: 1. Preprocess multi-echo datasets and apply multi-echo ICA based on spatial concatenation. 2. Calculation of motion parameters based on images with highest contrast. 3. Application of motion correction and coregistration parameters. 4. EPI preprocessing (temporal alignment, smoothing, etc) in appropriate order. 5. Compute PCA and ICA in conjunction with TE-dependence analysis.",
      "label": "ME-ICA: Multi-Echo Independent Components Analysis",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "me-ica",
      "source": "https://github.com/flywheel-apps/me-ica",
      "url": "https://github.com/ME-ICA/me-ica/blob/master/README.meica",
      "version": "0.3.8"
    },
    {
      "author": "Prantik Kundu",
      "cite": "Kundu, P., Brenowitz, N.D., Voon, V., Worbe, Y., Vertes, P.E., Inati, S.J., Saad, Z.S., Bandettini, P.A. & Bullmore, E.T. Integrated strategy for improving functional connectivity mapping using multiecho fMRI. PNAS (2013). Kundu, P., Inati, S.J., Evans, J.W., Luh, W.M. & Bandettini, P.A. Differentiating BOLD and non-BOLD signals in fMRI time series using multi-echo EPI. NeuroImage (2011). http://dx.doi.org/10.1016/j.neuroimage.2011.12.028",
      "description": "Multi-Echo Independent Components Analysis (ME-ICA) is a method for fMRI analysis and denoising based on the T2* decay of BOLD signals, as measured using multi-echo fMRI. ME-ICA decomposes multi-echo fMRI datasets into independent components (ICs) using FastICA, then categorizes ICs as BOLD or noise using their BOLD and non-BOLD weightings (measured as Kappa and Rho values, respectively). Removing non-BOLD weighted components robustly denoises data for motion, physiology and scanner artifacts, in a simple and physically principled way. Pipeline includes: 1. Preprocess multi-echo datasets and apply multi-echo ICA based on spatial concatenation. 2. Calculation of motion parameters based on images with highest contrast. 3. Application of motion correction and coregistration parameters. 4. EPI preprocessing (temporal alignment, smoothing, etc) in appropriate order. 5. Compute PCA and ICA in conjunction with TE-dependence analysis.",
      "label": "ME-ICA: Multi-Echo Independent Components Analysis",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "me-ica",
      "source": "https://github.com/flywheel-apps/me-ica",
      "url": "https://github.com/ME-ICA/me-ica/blob/master/README.meica",
      "version": "0.3.4_3.2beta1"
    },
    {
      "author": "Prantik Kundu",
      "cite": "Kundu, P., Brenowitz, N.D., Voon, V., Worbe, Y., Vertes, P.E., Inati, S.J., Saad, Z.S., Bandettini, P.A. & Bullmore, E.T. Integrated strategy for improving functional connectivity mapping using multiecho fMRI. PNAS (2013). Kundu, P., Inati, S.J., Evans, J.W., Luh, W.M. & Bandettini, P.A. Differentiating BOLD and non-BOLD signals in fMRI time series using multi-echo EPI. NeuroImage (2011). http://dx.doi.org/10.1016/j.neuroimage.2011.12.028",
      "command": "python3 /flywheel/v0/run.py",
      "description": "Multi-Echo Independent Components Analysis (ME-ICA) is a method for fMRI analysis and denoising based on the T2* decay of BOLD signals, as measured using multi-echo fMRI. ME-ICA decomposes multi-echo fMRI datasets into independent components (ICs) using FastICA, then categorizes ICs as BOLD or noise using their BOLD and non-BOLD weightings (measured as Kappa and Rho values, respectively). Removing non-BOLD weighted components robustly denoises data for motion, physiology and scanner artifacts, in a simple and physically principled way. Pipeline includes: 1. Preprocess multi-echo datasets and apply multi-echo ICA based on spatial concatenation. 2. Calculation of motion parameters based on images with highest contrast. 3. Application of motion correction and coregistration parameters. 4. EPI preprocessing (temporal alignment, smoothing, etc) in appropriate order. 5. Compute PCA and ICA in conjunction with TE-dependence analysis.",
      "environment": {
        "DEBIAN_FRONTEND": "noninteractive",
        "FLYWHEEL": "/flywheel/v0",
        "HOME": "/root",
        "HOSTNAME": "9a1dbfee1bc5",
        "LESSCLOSE": "/usr/bin/lesspipe %s %s",
        "LESSOPEN": " | /usr/bin/lesspipe %s",
        "OLDPWD": "/flywheel/v0",
        "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/abin",
        "PWD": "/flywheel/v0/output",
        "SHLVL": "1",
        "TERM": "xterm",
        "_": "/usr/bin/env"
      },
      "label": "ME-ICA: Multi-Echo Independent Components Analysis",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "me-ica",
      "source": "https://github.com/flywheel-apps/me-ica",
      "url": "https://github.com/ME-ICA/me-ica/blob/master/README.meica",
      "version": "0.3.14"
    },
    {
      "author": "Prantik Kundu",
      "cite": "Kundu, P., Brenowitz, N.D., Voon, V., Worbe, Y., Vertes, P.E., Inati, S.J., Saad, Z.S., Bandettini, P.A. & Bullmore, E.T. Integrated strategy for improving functional connectivity mapping using multiecho fMRI. PNAS (2013). Kundu, P., Inati, S.J., Evans, J.W., Luh, W.M. & Bandettini, P.A. Differentiating BOLD and non-BOLD signals in fMRI time series using multi-echo EPI. NeuroImage (2011). http://dx.doi.org/10.1016/j.neuroimage.2011.12.028",
      "description": "Multi-Echo Independent Components Analysis (ME-ICA) is a method for fMRI analysis and denoising based on the T2* decay of BOLD signals, as measured using multi-echo fMRI. ME-ICA decomposes multi-echo fMRI datasets into independent components (ICs) using FastICA, then categorizes ICs as BOLD or noise using their BOLD and non-BOLD weightings (measured as Kappa and Rho values, respectively). Removing non-BOLD weighted components robustly denoises data for motion, physiology and scanner artifacts, in a simple and physically principled way. Pipeline includes: 1. Preprocess multi-echo datasets and apply multi-echo ICA based on spatial concatenation. 2. Calculation of motion parameters based on images with highest contrast. 3. Application of motion correction and coregistration parameters. 4. EPI preprocessing (temporal alignment, smoothing, etc) in appropriate order. 5. Compute PCA and ICA in conjunction with TE-dependence analysis.",
      "label": "ME-ICA: Multi-Echo Independent Components Analysis",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "me-ica",
      "source": "https://github.com/flywheel-apps/me-ica",
      "url": "https://github.com/ME-ICA/me-ica/blob/master/README.meica",
      "version": "0.2.4"
    },
    {
      "author": "Prantik Kundu",
      "cite": "Kundu, P., Brenowitz, N.D., Voon, V., Worbe, Y., Vertes, P.E., Inati, S.J., Saad, Z.S., Bandettini, P.A. & Bullmore, E.T. Integrated strategy for improving functional connectivity mapping using multiecho fMRI. PNAS (2013). Kundu, P., Inati, S.J., Evans, J.W., Luh, W.M. & Bandettini, P.A. Differentiating BOLD and non-BOLD signals in fMRI time series using multi-echo EPI. NeuroImage (2011). http://dx.doi.org/10.1016/j.neuroimage.2011.12.028",
      "description": "Multi-Echo Independent Components Analysis (ME-ICA) is a method for fMRI analysis and denoising based on the T2* decay of BOLD signals, as measured using multi-echo fMRI. ME-ICA decomposes multi-echo fMRI datasets into independent components (ICs) using FastICA, then categorizes ICs as BOLD or noise using their BOLD and non-BOLD weightings (measured as Kappa and Rho values, respectively). Removing non-BOLD weighted components robustly denoises data for motion, physiology and scanner artifacts, in a simple and physically principled way. Pipeline includes: 1. Preprocess multi-echo datasets and apply multi-echo ICA based on spatial concatenation. 2. Calculation of motion parameters based on images with highest contrast. 3. Application of motion correction and coregistration parameters. 4. EPI preprocessing (temporal alignment, smoothing, etc) in appropriate order. 5. Compute PCA and ICA in conjunction with TE-dependence analysis.",
      "label": "ME-ICA: Multi-Echo Independent Components Analysis",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "me-ica",
      "source": "https://github.com/flywheel-apps/me-ica",
      "url": "https://github.com/ME-ICA/me-ica/blob/master/README.meica",
      "version": "0.2.0"
    },
    {
      "author": "Prantik Kundu",
      "cite": "Kundu, P., Brenowitz, N.D., Voon, V., Worbe, Y., Vertes, P.E., Inati, S.J., Saad, Z.S., Bandettini, P.A. & Bullmore, E.T. Integrated strategy for improving functional connectivity mapping using multiecho fMRI. PNAS (2013). Kundu, P., Inati, S.J., Evans, J.W., Luh, W.M. & Bandettini, P.A. Differentiating BOLD and non-BOLD signals in fMRI time series using multi-echo EPI. NeuroImage (2011). http://dx.doi.org/10.1016/j.neuroimage.2011.12.028",
      "description": "Multi-Echo Independent Components Analysis (ME-ICA) is a method for fMRI analysis and denoising based on the T2* decay of BOLD signals, as measured using multi-echo fMRI. ME-ICA decomposes multi-echo fMRI datasets into independent components (ICs) using FastICA, then categorizes ICs as BOLD or noise using their BOLD and non-BOLD weightings (measured as Kappa and Rho values, respectively). Removing non-BOLD weighted components robustly denoises data for motion, physiology and scanner artifacts, in a simple and physically principled way. Pipeline includes: 1. Preprocess multi-echo datasets and apply multi-echo ICA based on spatial concatenation. 2. Calculation of motion parameters based on images with highest contrast. 3. Application of motion correction and coregistration parameters. 4. EPI preprocessing (temporal alignment, smoothing, etc) in appropriate order. 5. Compute PCA and ICA in conjunction with TE-dependence analysis",
      "label": "ME-ICA: Multi-Echo Independent Components Analysis",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "me-ica",
      "source": "https://github.com/flywheel-apps/me-ica",
      "url": "https://github.com/ME-ICA/me-ica/blob/master/README.meica",
      "version": "0.1.1"
    },
    {
      "author": "Prantik Kundu",
      "cite": "Kundu, P., Brenowitz, N.D., Voon, V., Worbe, Y., Vertes, P.E., Inati, S.J., Saad, Z.S., Bandettini, P.A. & Bullmore, E.T. Integrated strategy for improving functional connectivity mapping using multiecho fMRI. PNAS (2013). Kundu, P., Inati, S.J., Evans, J.W., Luh, W.M. & Bandettini, P.A. Differentiating BOLD and non-BOLD signals in fMRI time series using multi-echo EPI. NeuroImage (2011). http://dx.doi.org/10.1016/j.neuroimage.2011.12.028",
      "description": "Multi-Echo Independent Components Analysis (ME-ICA) is a method for fMRI analysis and denoising based on the T2* decay of BOLD signals, as measured using multi-echo fMRI. ME-ICA decomposes multi-echo fMRI datasets into independent components (ICs) using FastICA, then categorizes ICs as BOLD or noise using their BOLD and non-BOLD weightings (measured as Kappa and Rho values, respectively). Removing non-BOLD weighted components robustly denoises data for motion, physiology and scanner artifacts, in a simple and physically principled way. Pipeline includes: 1. Preprocess multi-echo datasets and apply multi-echo ICA based on spatial concatenation. 2. Calculation of motion parameters based on images with highest contrast. 3. Application of motion correction and coregistration parameters. 4. EPI preprocessing (temporal alignment, smoothing, etc) in appropriate order. 5. Compute PCA and ICA in conjunction with TE-dependence analysis",
      "label": "ME-ICA: Multi-Echo Independent Components Analysis",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "me-ica",
      "source": "https://github.com/ME-ICA/me-ica",
      "url": "https://github.com/ME-ICA/me-ica/blob/master/README.meica",
      "version": "0.1.0"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferMethodsCitation",
      "command": "python run.py",
      "description": "Flywheel gear for the implementation of FreeSurfer's MiDeFace to remove facial structures from MRI images.",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "FREESURFER": "/usr/local/freesurfer",
        "FREESURFER_HOME": "/usr/local/freesurfer",
        "FSL_OUTPUT_FORMAT": "nii.gz",
        "FS_LICENSE": "/usr/local/freesurfer/license.txt",
        "FS_OVERRIDE": "0",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "LANG": "C.UTF-8",
        "LD_LIBRARY_PATH": "/usr/local/ImageMagick-7.1.1/lib:/usr/local/lib",
        "MAGICK_HOME": "/usr/local/ImageMagick-7.1.1",
        "OS": "Linux",
        "PATH": "/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/freesurfer/bin:/usr/local/freesurfer/fsfast/bin:/usr/local/ImageMagick-7.1.1/bin",
        "PWD": "/flywheel/v0",
        "PYTHON_GET_PIP_SHA256": "394be00f13fa1b9aaa47e911bdb59a09c3b2986472130f30aa0bfaf7f3980637",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d5cb0afaf23b8520f1bbcfed521017b4a95f5c01/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.3.1",
        "PYTHON_SETUPTOOLS_VERSION": "65.5.1",
        "PYTHON_VERSION": "3.11.3",
        "SUBJECTS_DIR": "/usr/local/freesurfer/subjects"
      },
      "label": "MiDeface",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "mideface",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/mideface",
      "url": "https://surfer.nmr.mgh.harvard.edu/fswiki/MiDeFace",
      "version": "0.1.1_7.3.2"
    }
  ],
  [
    {
      "author": "Flywheel, Inc",
      "cite": "https://doi.org/10.5281/zenodo.4323058",
      "command": "poetry run ./run.py",
      "description": "Apply the MONAI tranforms as specified by the user script and save output in the destination container",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "LANG": "C.UTF-8",
        "PATH": "/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PYTHON_GET_PIP_SHA256": "e235c437e5c7d7524fbce3880ca39b917a73dc565e0c813465b7a7a329bb279a",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/38e54e5de07c66e875c11a1ebbdb938854625dd8/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.8.13"
      },
      "label": "MONAI Transforms",
      "license": "MIT",
      "name": "monai-transforms",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/monai-transforms",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/monai-transforms",
      "version": "0.1.0"
    }
  ],
  [
    {
      "author": "Oscar Esteban, Krzysztof F. Gorgolewski. Poldrack Lab, Psychology, CRN, Stanford University",
      "cite": "Esteban O, Birman D, Schaer M, Koyejo OO, Poldrack RA, Gorgolewski KJ; MRIQC: Advancing the Automatic Prediction of Image Quality in MRI from Unseen Sites; PLOS ONE 12(9):e0184661; doi:10.1371/journal.pone.0184661.",
      "description": "MRIQC (v0.10.1) extracts no-reference IQMs (image quality metrics) from structural (T1w and T2w) and functional MRI (magnetic resonance imaging) data. Note, this gear only supports the generation of individual scan reports; group reports are not generated. Also note, for the auto-detection config option to work for this gear, the follow gears must be run beforehand: (1) dicom-mr-classifier then (2) dcm2niix (version 0.3.1 or higher). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "MRIQC: No-reference image quality metrics for quality assessment of MRI ",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "mriqc",
      "source": "https://github.com/flywheel-apps/mriqc",
      "url": "https://github.com/poldracklab/mriqc",
      "version": "0.6.4_0.15.1"
    },
    {
      "author": "Oscar Esteban, Krzysztof F. Gorgolewski. Poldrack Lab, Psychology, CRN, Stanford University",
      "cite": "Esteban O, Birman D, Schaer M, Koyejo OO, Poldrack RA, Gorgolewski KJ; MRIQC: Advancing the Automatic Prediction of Image Quality in MRI from Unseen Sites; PLOS ONE 12(9):e0184661; doi:10.1371/journal.pone.0184661.",
      "description": "MRIQC (v0.10.1) extracts no-reference IQMs (image quality metrics) from structural (T1w and T2w) and functional MRI (magnetic resonance imaging) data. Note, this gear only supports the generation of individual scan reports; group reports are not generated. Also note, for the auto-detection config option to work for this gear, the follow gears must be run beforehand: (1) dicom-mr-classifier then (2) dcm2niix (version 0.3.1 or higher). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "MRIQC: No-reference image quality metrics for quality assessment of MRI ",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "mriqc",
      "source": "https://github.com/flywheel-apps/mriqc",
      "url": "https://github.com/poldracklab/mriqc",
      "version": "0.6.3_0.11.0"
    },
    {
      "author": "Oscar Esteban, Krzysztof F. Gorgolewski. Poldrack Lab, Psychology, CRN, Stanford University",
      "cite": "Esteban O, Birman D, Schaer M, Koyejo OO, Poldrack RA, Gorgolewski KJ; MRIQC: Advancing the Automatic Prediction of Image Quality in MRI from Unseen Sites; PLOS ONE 12(9):e0184661; doi:10.1371/journal.pone.0184661.",
      "description": "MRIQC (v0.10.1) extracts no-reference IQMs (image quality metrics) from structural (T1w and T2w) and functional MRI (magnetic resonance imaging) data. Note, this gear only supports the generation of individual scan reports; group reports are not generated. Also note, for the auto-detection config option to work for this gear, the follow gears must be run beforehand: (1) dicom-mr-classifier then (2) dcm2niix (version 0.3.1 or higher). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "MRIQC: No-reference image quality metrics for quality assessment of MRI ",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "mriqc",
      "source": "https://github.com/flywheel-apps/mriqc",
      "url": "https://github.com/poldracklab/mriqc",
      "version": "0.6.2_0.11.0"
    },
    {
      "author": "Oscar Esteban, Krzysztof F. Gorgolewski. Poldrack Lab, Psychology, CRN, Stanford University",
      "cite": "Esteban O, Birman D, Schaer M, Koyejo OO, Poldrack RA, Gorgolewski KJ; MRIQC: Advancing the Automatic Prediction of Image Quality in MRI from Unseen Sites; PLOS ONE 12(9):e0184661; doi:10.1371/journal.pone.0184661.",
      "description": "MRIQC (v0.10.1) extracts no-reference IQMs (image quality metrics) from structural (T1w and T2w) and functional MRI (magnetic resonance imaging) data. Note, this gear only supports the generation of individual scan reports; group reports are not generated. Also note, for the auto-detection config option to work for this gear, the follow gears must be run beforehand: (1) dicom-mr-classifier then (2) dcm2niix (version 0.3.1 or higher). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "MRIQC: No-reference image quality metrics for quality assessment of MRI ",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "mriqc",
      "source": "https://github.com/flywheel-apps/mriqc",
      "url": "https://github.com/poldracklab/mriqc",
      "version": "0.6.1_0.11.0"
    },
    {
      "author": "Oscar Esteban, Krzysztof F. Gorgolewski. Poldrack Lab, Psychology, CRN, Stanford University",
      "cite": "Esteban O, Birman D, Schaer M, Koyejo OO, Poldrack RA, Gorgolewski KJ; MRIQC: Advancing the Automatic Prediction of Image Quality in MRI from Unseen Sites; PLOS ONE 12(9):e0184661; doi:10.1371/journal.pone.0184661.",
      "description": "MRIQC (v0.10.1) extracts no-reference IQMs (image quality metrics) from structural (T1w and T2w) and functional MRI (magnetic resonance imaging) data. Note, this gear only supports the generation of individual scan reports; group reports are not generated. Also note, for the auto-detection config option to work for this gear, the follow gears must be run beforehand: (1) dicom-mr-classifier then (2) dcm2niix (version 0.3.1 or higher). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "MRIQC: No-reference image quality metrics for quality assessment of MRI ",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "mriqc",
      "source": "https://github.com/flywheel-apps/mriqc",
      "url": "https://github.com/poldracklab/mriqc",
      "version": "0.6.0"
    },
    {
      "author": "Oscar Esteban, Krzysztof F. Gorgolewski. Poldrack Lab, Psychology, CRN, Stanford University",
      "cite": "Esteban O, Birman D, Schaer M, Koyejo OO, Poldrack RA, Gorgolewski KJ; MRIQC: Advancing the Automatic Prediction of Image Quality in MRI from Unseen Sites; PLOS ONE 12(9):e0184661; doi:10.1371/journal.pone.0184661.",
      "description": "MRIQC (v0.10.1) extracts no-reference IQMs (image quality metrics) from structural (T1w and T2w) and functional MRI (magnetic resonance imaging) data. Note, this gear only supports the generation of individual scan reports; group reports are not generated. Also note, for the auto-detection config option to work for this gear, the follow gears must be run beforehand: (1) dicom-mr-classifier then (2) dcm2niix (version 0.3.1 or higher). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "MRIQC: No-reference image quality metrics for quality assessment of MRI (v0.10.1)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "mriqc",
      "source": "https://github.com/flywheel-apps/mriqc",
      "url": "https://github.com/poldracklab/mriqc",
      "version": "0.5.1"
    },
    {
      "author": "Oscar Esteban, Krzysztof F. Gorgolewski. Poldrack Lab, Psychology, CRN, Stanford University",
      "cite": "Esteban O, Birman D, Schaer M, Koyejo OO, Poldrack RA, Gorgolewski KJ; MRIQC: Advancing the Automatic Prediction of Image Quality in MRI from Unseen Sites; PLOS ONE 12(9):e0184661; doi:10.1371/journal.pone.0184661.",
      "description": "MRIQC (v0.10.1) extracts no-reference IQMs (image quality metrics) from structural (T1w and T2w) and functional MRI (magnetic resonance imaging) data. Note, this gear only supports the generation of individual scan reports; group reports are not generated. Also note, for the auto-detection config option to work for this gear, the follow gears must be run beforehand: (1) dicom-mr-classifier then (2) dcm2niix (version 0.3.1 or higher). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "MRIQC: No-reference image quality metrics for quality assessment of MRI (v0.10.1)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "mriqc",
      "source": "https://github.com/flywheel-apps/mriqc",
      "url": "https://github.com/poldracklab/mriqc",
      "version": "0.5.0"
    },
    {
      "author": "Oscar Esteban, Krzysztof F. Gorgolewski. Poldrack Lab, Psychology, CRN, Stanford University",
      "cite": "Esteban O, Birman D, Schaer M, Koyejo OO, Poldrack RA, Gorgolewski KJ; MRIQC: Advancing the Automatic Prediction of Image Quality in MRI from Unseen Sites; PLOS ONE 12(9):e0184661; doi:10.1371/journal.pone.0184661.",
      "description": "MRIQC (v0.10.1) extracts no-reference IQMs (image quality metrics) from structural (T1w and T2w) and functional MRI (magnetic resonance imaging) data. Note, this gear only supports the generation of individual scan reports; group reports are not generated. Also note, for the auto-detection config option to work for this gear, the follow gears must be run beforehand: (1) dicom-mr-classifier then (2) dcm2niix (version 0.3.1 or higher). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "MRIQC: No-reference image quality metrics for quality assessment of MRI (v0.10.1)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "mriqc",
      "source": "https://github.com/flywheel-apps/mriqc",
      "url": "https://github.com/poldracklab/mriqc",
      "version": "0.4.1"
    },
    {
      "author": "Oscar Esteban, Krzysztof F. Gorgolewski. Poldrack Lab, Psychology, CRN, Stanford University",
      "cite": "Esteban O, Birman D, Schaer M, Koyejo OO, Poldrack RA, Gorgolewski KJ; MRIQC: Advancing the Automatic Prediction of Image Quality in MRI from Unseen Sites; PLOS ONE 12(9):e0184661; doi:10.1371/journal.pone.0184661.",
      "description": "MRIQC (v0.10.1) extracts no-reference IQMs (image quality metrics) from structural (T1w and T2w) and functional MRI (magnetic resonance imaging) data. Note, this gear only supports the generation of individual scan reports; group reports are not generated. Also note, for the auto-detection config option to work for this gear, the follow gears must be run beforehand: (1) dicom-mr-classifier then (2) dcm2niix (version 0.3.1 or higher). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "MRIQC: No-reference image quality metrics for quality assessment of MRI (v0.10.1)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "mriqc",
      "source": "https://github.com/flywheel-apps/mriqc",
      "url": "https://github.com/poldracklab/mriqc",
      "version": "0.4.0"
    },
    {
      "author": "Oscar Esteban, Krzysztof F. Gorgolewski. Poldrack Lab, Psychology, CRN, Stanford University",
      "cite": "Esteban O, Birman D, Schaer M, Koyejo OO, Poldrack RA, Gorgolewski KJ; MRIQC: Advancing the Automatic Prediction of Image Quality in MRI from Unseen Sites; PLOS ONE 12(9):e0184661; doi:10.1371/journal.pone.0184661.",
      "description": "MRIQC extracts no-reference IQMs (image quality metrics) from structural (T1w and T2w) and functional MRI (magnetic resonance imaging) data. Note, this gear only supports the generation of individual scan reports; group reports are not generated. Also note, for the auto-detection config option to work for this gear, the follow gears must be run beforehand: (1) dicom-mr-classifier then (2) dcm2niix (version 0.3.1 or higher). LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "MRIQC: No-reference image quality metrics for quality assessment of MRI (v0.9.4)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "mriqc",
      "source": "https://github.com/flywheel-apps/mriqc",
      "url": "https://github.com/poldracklab/mriqc",
      "version": "0.3.3"
    },
    {
      "author": "Oscar Esteban, Krzysztof F. Gorgolewski. Poldrack Lab, Psychology, CRN, Stanford University",
      "cite": "Esteban O, Birman D, Schaer M, Koyejo OO, Poldrack RA, Gorgolewski KJ; MRIQC: Advancing the Automatic Prediction of Image Quality in MRI from Unseen Sites; PLOS ONE 12(9):e0184661; doi:10.1371/journal.pone.0184661.",
      "description": "MRIQC extracts no-reference IQMs (image quality metrics) from structural (T1w and T2w) and functional MRI (magnetic resonance imaging) data. Note, this gear only supports the generation of individual scan reports; group reports are not generated. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "MRIQC: No-reference image quality metrics for quality assessment of MRI (v0.9.4)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "mriqc",
      "source": "https://github.com/flywheel-apps/mriqc",
      "url": "https://github.com/poldracklab/mriqc",
      "version": "0.3.2"
    },
    {
      "author": "Oscar Esteban and Krzysztof F. Gorgolewski. Stanford University",
      "description": "The MRIQC package provides a series of image processing workflows to extract and compute a series of NR (no-reference), IQMs (image quality metrics) to be used in QAPs (quality assessment protocols) for MRI (magnetic resonance imaging). This tool extracts a series of IQMs from structural or functional MRI data. Note, this gear only supports the generation of individual scan reports; group reports are not generated. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "MRIQC: No-reference image quality metrics for quality assessment of MRI (v0.9.4)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "mriqc",
      "source": "https://github.com/flywheel-apps/mriqc",
      "url": "https://github.com/poldracklab/mriqc",
      "version": "0.3.1"
    },
    {
      "author": "Oscar Esteban and Krzysztof F. Gorgolewski. Stanford University",
      "description": "The MRIQC package provides a series of image processing workflows to extract and compute a series of NR (no-reference), IQMs (image quality metrics) to be used in QAPs (quality assessment protocols) for MRI (magnetic resonance imaging). This tool extracts a series of IQMs from structural or functional MRI data. Note, this gear only supports the generation of individual scan reports; group reports are not generated. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "MRIQC: No-reference image quality metrics for quality assessment of MRI (v0.9.4)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "mriqc",
      "source": "https://github.com/flywheel-apps/mriqc",
      "url": "https://github.com/poldracklab/mriqc",
      "version": "0.3"
    },
    {
      "author": "Oscar Esteban and Krzysztof F. Gorgolewski. Stanford University",
      "description": "The MRIQC package provides a series of image processing workflows to extract and compute a series of NR (no-reference), IQMs (image quality metrics) to be used in QAPs (quality assessment protocols) for MRI (magnetic resonance imaging). This tool extracts a series of IQMs from structural or functional MRI data. Note, this gear only supports the generation of individual scan reports; group reports are not generated. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "MRIQC: No-reference image quality metrics for quality assessment of MRI (v0.9.4)",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "mriqc",
      "source": "https://github.com/flywheel-apps/mriqc",
      "url": "https://github.com/poldracklab/mriqc",
      "version": "0.2"
    },
    {
      "author": "Poldrack Lab at Stanford University",
      "description": "The package provides a series of image processing workflows to extract and compute a series of NR (no-reference), IQMs (image quality metrics) to be used in QAPs (quality assessment protocols) for MRI (magnetic resonance imaging). This tool extracts a series of IQMs from structural or functional MRI data. Note, this gear only supports the generation of individual scan reports; group reports are not generated. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "MRIQC: NR-IQMs for Functional MRI (mriqc v0.9.0-0)",
      "license": "Other",
      "maintainer": "Jennifer Reiter <jenniferreiter@invenshure.com>",
      "name": "mriqc",
      "source": "https://github.com/flywheel-apps/mriqc",
      "url": "https://github.com/poldracklab/mriqc",
      "version": "0.1"
    }
  ],
  [
    {
      "author": "MRtrix, FSL, and Brain-Life teams.",
      "cite": "Gear adapted from https://github.com/brain-life/app-mrtrix3-preproc. Ref: https://mrtrix.readthedocs.io/en/latest/reference/scripts/dwipreproc.html#references",
      "description": "mrtrix3preproc runs the MRtrix3 preprocessing pipeline. It uses FSL's topup when the optional inverse phase encoded data are provided, otherwise the pipeline uses FSL's eddy tool. The pipeline can also perform de-noising, reslicing, and alignment to an anatomical image. Required inputs are diffusion NIfTI, BVEC, BVAL, and Anatomical (ACPC aligned) NIfTI. LICENSING NOTE: FSL software are owned by Oxford University Innovation and license is required for any commercial applications. For commercial licence please contact fsl@innovation.ox.ac.uk. For academic use, an academic license is required which is available by registering on the FSL website. Any use of the software requires that the user obtain the appropriate license. See https://fsl.fmrib.ox.ac.uk/fsldownloads_registration for more information.",
      "label": "MRtrix3: Preprocessing Pipeline",
      "license": "Other",
      "maintainer": "Garikoitz Lerma-Usabiaga <glerma@stanford.edu>",
      "name": "mrtrix3preproc",
      "source": "https://github.com/scitran-apps/mrtrix3preproc",
      "url": "https://mrtrix.readthedocs.io/en/latest/reference/scripts/dwipreproc.html#dwipreproc",
      "version": "1.0.0"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "N4 Bias Field Correction.",
      "environment": {
        "ANTSPATH": "/opt/ants/bin/",
        "FLYWHEEL": "/flywheel/v0",
        "PATH": "/opt/ants/bin/:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      },
      "label": "N4 Bias Correction",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "n4-bias-correction",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/n4-bias-correction",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/n4-bias-correction",
      "version": "0.1.0_2.3.5"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Convert NIfTI file into PNG images using Maximum Intensity Projection(MIP) technique",
      "environment": {},
      "label": "NIFTI to MIPS",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "nifti-to-mips",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/nifti-to-mips/",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/nifti-to-mips/",
      "version": "0.1.0"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "/flywheel/v0/run.py",
      "description": "A framework for developing neural network models for 3D image processing.",
      "label": "Nobrainer",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "nobrainer",
      "source": "https://github.com/neuronets/nobrainer",
      "url": "https://github.com/flywheel-apps/nobrainer-gear",
      "version": "0.1.0"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "OCT Quality Assessment.\n\nThis gear assesses the quality of OCT volumes and their slices. The criteria to flag a \nslice is being bigger than 1.5 * Interquartile Range (IQR) or smaller than 1.5 * IQR in \neach of the four measurement tests. If any slices are flagged for any of the four tests, \nthe `overall_qc` test will be set to `fail`. All test results are saved in the input \nfile's info dictionary under `\"qc\":\"oct-qa\"`",
      "environment": {},
      "label": "OCT QA",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "oct-qa",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/oct-qa",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/oct-qa",
      "version": "0.0.5"
    }
  ],
  [
    {
      "author": "Adam Goode, M. Satyanarayanan, Carnegie Mellon University <https://openslide.org/>",
      "command": "python run.py",
      "description": "OpenSlide: Uses the OpenSlide library to convert whole-slide image files to .png for viewing in Flywheel. Supported file types include Aperio (.svs, .tif), Hamamatsu (.ndpi, .vms, .vmu), Leica (.scn), MIRAX (.mrxs), Philips (.tiff), Sakura (.svslide), Trestle (.tif), Ventana (.bif, .tif), Generic tiled TIFF (.tif)",
      "label": "OpenSlide to PNG file converter",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "openslide-to-png",
      "source": "https://github.com/flywheel-apps/openslide-to-png",
      "url": "https://github.com/openslide/openslide-python",
      "version": "0.0.1_1.1.1"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "Greve, D. N., Svarer, C., Fisher, P. M., Feng, L., Hansen, A. E., Baare, W., ... & Knudsen, G. M. (2014). Cortical surface-based analysis reduces bias and variance in kinetic modeling of brain PET data. Neuroimage, 92, 225-236; Greve, D. N., Salat, D. H., Bowen, S. L., Izquierdo-Garcia, D., Schultz, A. P., Catana, C., ... & Johnson, K. A. (2016). Different partial volume correction methods lead to different conclusions: An 18 F-FDG-PET study of aging. NeuroImage, 132, 334-343.",
      "command": "python run.py",
      "description": "Coregisters PET and anatomical images, following PetSurfer's instructions",
      "environment": {
        "ANTSPATH": "/opt/ants/bin/",
        "ARTHOME": "/opt/art",
        "DISPLAY": ":50.0",
        "FLYWHEEL": "/flywheel/v0",
        "FREESURFER_HOME": "/opt/freesurfer",
        "FSLDIR": "/opt/fsl",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/opt/fsl/bin/fsltclsh",
        "FSLWISH": "/opt/fsl/bin/fslwish",
        "FS_LICENSE": "/opt/freesurfer/license.txt",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "LANG": "C.UTF-8",
        "LD_LIBRARY_PATH": "/opt/fsl/lib:",
        "PATH": "/opt/freesurfer/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PYTHON_GET_PIP_SHA256": "5aefe6ade911d997af080b315ebcb7f882212d070465df544e1175ac2be519b4",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/5eaac1050023df1f5c98b173b248c260023f2278/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "58.1.0",
        "PYTHON_VERSION": "3.9.13",
        "QT_QPA_PLATFORM": "xcb"
      },
      "label": "Co-registration between PET and anatomical images",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "petsurfer-coreg",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/petsurfer-coreg",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/petsurfer-coreg",
      "version": "0.2.1_7.3.2"
    },
    {
      "author": "Flywheel",
      "cite": "Greve, D. N., Svarer, C., Fisher, P. M., Feng, L., Hansen, A. E., Baare, W., ... & Knudsen, G. M. (2014). Cortical surface-based analysis reduces bias and variance in kinetic modeling of brain PET data. Neuroimage, 92, 225-236; Greve, D. N., Salat, D. H., Bowen, S. L., Izquierdo-Garcia, D., Schultz, A. P., Catana, C., ... & Johnson, K. A. (2016). Different partial volume correction methods lead to different conclusions: An 18 F-FDG-PET study of aging. NeuroImage, 132, 334-343.",
      "command": "python run.py",
      "description": "Coregisters PET and anatomical images, following PetSurfer's instructions",
      "environment": {
        "ANTSPATH": "/opt/ants/bin/",
        "ARTHOME": "/opt/art",
        "DISPLAY": ":50.0",
        "FLYWHEEL": "/flywheel/v0",
        "FREESURFER_HOME": "/opt/freesurfer",
        "FSLDIR": "/opt/fsl",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/opt/fsl/bin/fsltclsh",
        "FSLWISH": "/opt/fsl/bin/fslwish",
        "FS_LICENSE": "/opt/freesurfer/license.txt",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "LANG": "C.UTF-8",
        "LD_LIBRARY_PATH": "/opt/fsl/lib:",
        "PATH": "/opt/freesurfer/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PYTHON_GET_PIP_SHA256": "5aefe6ade911d997af080b315ebcb7f882212d070465df544e1175ac2be519b4",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/5eaac1050023df1f5c98b173b248c260023f2278/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "58.1.0",
        "PYTHON_VERSION": "3.9.13",
        "QT_QPA_PLATFORM": "xcb"
      },
      "label": "Co-registration between PET and anatomical images",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "petsurfer-coreg",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/petsurfer-coreg",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/petsurfer-coreg",
      "version": "0.1.1_7.3.2"
    },
    {
      "author": "Flywheel",
      "cite": "Greve, D. N., Svarer, C., Fisher, P. M., Feng, L., Hansen, A. E., Baare, W., ... & Knudsen, G. M. (2014). Cortical surface-based analysis reduces bias and variance in kinetic modeling of brain PET data. Neuroimage, 92, 225-236; Greve, D. N., Salat, D. H., Bowen, S. L., Izquierdo-Garcia, D., Schultz, A. P., Catana, C., ... & Johnson, K. A. (2016). Different partial volume correction methods lead to different conclusions: An 18 F-FDG-PET study of aging. NeuroImage, 132, 334-343.",
      "command": "python run.py",
      "description": "Coregisters PET and anatomical images, following PetSurfer's instructions",
      "environment": {
        "ANTSPATH": "/opt/ants/bin/",
        "ARTHOME": "/opt/art",
        "DISPLAY": ":50.0",
        "FLYWHEEL": "/flywheel/v0",
        "FREESURFER_HOME": "/opt/freesurfer",
        "FSLDIR": "/opt/fsl",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLTCLSH": "/opt/fsl/bin/fsltclsh",
        "FSLWISH": "/opt/fsl/bin/fslwish",
        "FS_LICENSE": "/opt/freesurfer/license.txt",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "LANG": "C.UTF-8",
        "LD_LIBRARY_PATH": "/opt/fsl/lib:",
        "PATH": "/opt/freesurfer/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PYTHON_GET_PIP_SHA256": "5aefe6ade911d997af080b315ebcb7f882212d070465df544e1175ac2be519b4",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/5eaac1050023df1f5c98b173b248c260023f2278/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "58.1.0",
        "PYTHON_VERSION": "3.9.13",
        "QT_QPA_PLATFORM": "xcb"
      },
      "label": "Co-registration between PET and anatomical images",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "petsurfer-coreg",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/petsurfer-coreg",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/petsurfer-coreg",
      "version": "0.1.0_7.3.2"
    }
  ],
  [
    {
      "author": "Flywheel, Inc",
      "cite": "https://surfer.nmr.mgh.harvard.edu/fswiki/PetSurfer",
      "command": "python run.py",
      "description": "Motion correction of PET volumes (Petsurfer pipeline).",
      "environment": {
        "DEBCONF_NOWARNINGS": "yes",
        "DEBIAN_FRONTEND": "noninteractive",
        "FLYWHEEL": "/flywheel/v0",
        "FMRI_ANALYSIS_DIR": "/opt/freesurfer/fsfast",
        "FREESURFER_HOME": "/opt/freesurfer",
        "FSFAST_HOME": "/opt/freesurfer/fsfast",
        "FSF_OUTPUT_FORMAT": "nii.gz",
        "FS_LICENSE": "/opt/freesurfer/license.txt",
        "FS_OVERRIDE": "0",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "LANG": "C.UTF-8",
        "LOCAL_DIR": "/opt/freesurfer/local",
        "MINC_BIN_DIR": "/opt/freesurfer/mni/bin",
        "MINC_LIB_DIR": "/opt/freesurfer/mni/lib",
        "MNI_DATAPATH": "/opt/freesurfer/mni/data",
        "MNI_DIR": "/opt/freesurfer/mni",
        "MNI_PERL5LIB": "/opt/freesurfer/mni/share/perl5/",
        "OS": "Linux",
        "PATH": "/opt/miniconda-latest/bin:/opt/freesurfer/bin:/opt/freesurfer/fsfast/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/lib/fsl/5.0:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PERL5LIB": "/opt/freesurfer/mni/share/perl5",
        "PYTHON_GET_PIP_SHA256": "45a2bb8bf2bb5eff16fdd00faef6f29731831c7c59bd9fc2bf1f3bed511ff1fe",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/9af82b715db434abb94a0a6f3569f43e72157346/public/get-pip.py",
        "PYTHON_PIP_VERSION": "23.0.1",
        "PYTHON_SETUPTOOLS_VERSION": "65.5.1",
        "PYTHON_VERSION": "3.10.13",
        "SUBJECTS_DIR": "/opt/freesurfer/subjects"
      },
      "label": "Petsurfer motion correction",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "petsurfer-mc",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/petsurfer-mc",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/petsurfer-mc",
      "version": "0.1.4_7.3.2"
    },
    {
      "author": "Flywheel, Inc",
      "cite": "https://surfer.nmr.mgh.harvard.edu/fswiki/PetSurfer",
      "command": "python run.py",
      "description": "Motion correction of PET volumes (Petsurfer pipeline).",
      "environment": {
        "DEBCONF_NOWARNINGS": "yes",
        "DEBIAN_FRONTEND": "noninteractive",
        "FLYWHEEL": "/flywheel/v0",
        "FMRI_ANALYSIS_DIR": "/opt/freesurfer/fsfast",
        "FREESURFER_HOME": "/opt/freesurfer",
        "FSFAST_HOME": "/opt/freesurfer/fsfast",
        "FSF_OUTPUT_FORMAT": "nii.gz",
        "FS_LICENSE": "/opt/freesurfer/license.txt",
        "FS_OVERRIDE": "0",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "LANG": "C.UTF-8",
        "LOCAL_DIR": "/opt/freesurfer/local",
        "MINC_BIN_DIR": "/opt/freesurfer/mni/bin",
        "MINC_LIB_DIR": "/opt/freesurfer/mni/lib",
        "MNI_DATAPATH": "/opt/freesurfer/mni/data",
        "MNI_DIR": "/opt/freesurfer/mni",
        "MNI_PERL5LIB": "/opt/freesurfer/mni/share/perl5/",
        "OS": "Linux",
        "PATH": "/opt/miniconda-latest/bin:/opt/freesurfer/bin:/opt/freesurfer/fsfast/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/lib/fsl/5.0:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PERL5LIB": "/opt/freesurfer/mni/share/perl5",
        "PYTHON_GET_PIP_SHA256": "96461deced5c2a487ddc65207ec5a9cffeca0d34e7af7ea1afc470ff0d746207",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/0d8570dc44796f4369b652222cf176b3db6ac70e/public/get-pip.py",
        "PYTHON_PIP_VERSION": "23.0.1",
        "PYTHON_SETUPTOOLS_VERSION": "65.5.1",
        "PYTHON_VERSION": "3.10.12",
        "SUBJECTS_DIR": "/opt/freesurfer/subjects"
      },
      "label": "Petsurfer motion correction",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "petsurfer-mc",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/petsurfer-mc",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/petsurfer-mc",
      "version": "0.1.2_7.3.2"
    },
    {
      "author": "Flywheel, Inc",
      "cite": "https://surfer.nmr.mgh.harvard.edu/fswiki/PetSurfer",
      "command": "python run.py",
      "description": "Motion correction of PET volumes (Petsurfer pipeline).",
      "environment": {
        "DEBCONF_NOWARNINGS": "yes",
        "DEBIAN_FRONTEND": "noninteractive",
        "FLYWHEEL": "/flywheel/v0",
        "FMRI_ANALYSIS_DIR": "/opt/freesurfer/fsfast",
        "FREESURFER_HOME": "/opt/freesurfer",
        "FSFAST_HOME": "/opt/freesurfer/fsfast",
        "FSF_OUTPUT_FORMAT": "nii.gz",
        "FS_LICENSE": "/opt/freesurfer/license.txt",
        "FS_OVERRIDE": "0",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "LANG": "C.UTF-8",
        "LOCAL_DIR": "/opt/freesurfer/local",
        "MINC_BIN_DIR": "/opt/freesurfer/mni/bin",
        "MINC_LIB_DIR": "/opt/freesurfer/mni/lib",
        "MNI_DATAPATH": "/opt/freesurfer/mni/data",
        "MNI_DIR": "/opt/freesurfer/mni",
        "MNI_PERL5LIB": "/opt/freesurfer/mni/share/perl5/",
        "OS": "Linux",
        "PATH": "/opt/miniconda-latest/bin:/opt/freesurfer/bin:/opt/freesurfer/fsfast/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/lib/fsl/5.0:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PERL5LIB": "/opt/freesurfer/mni/share/perl5",
        "PYTHON_GET_PIP_SHA256": "394be00f13fa1b9aaa47e911bdb59a09c3b2986472130f30aa0bfaf7f3980637",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d5cb0afaf23b8520f1bbcfed521017b4a95f5c01/public/get-pip.py",
        "PYTHON_PIP_VERSION": "23.0.1",
        "PYTHON_SETUPTOOLS_VERSION": "65.5.1",
        "PYTHON_VERSION": "3.10.11",
        "SUBJECTS_DIR": "/opt/freesurfer/subjects"
      },
      "label": "Petsurfer motion correction",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "petsurfer-mc",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/petsurfer-mc",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/petsurfer-mc",
      "version": "0.1.1_7.3.2"
    },
    {
      "author": "Flywheel, Inc",
      "cite": "https://surfer.nmr.mgh.harvard.edu/fswiki/PetSurfer",
      "command": "python run.py",
      "description": "Motion correction of PET volumes (Petsurfer pipeline).",
      "environment": {
        "DEBCONF_NOWARNINGS": "yes",
        "DEBIAN_FRONTEND": "noninteractive",
        "FLYWHEEL": "/flywheel/v0",
        "FMRI_ANALYSIS_DIR": "/opt/freesurfer/fsfast",
        "FREESURFER_HOME": "/opt/freesurfer",
        "FSFAST_HOME": "/opt/freesurfer/fsfast",
        "FSF_OUTPUT_FORMAT": "nii.gz",
        "FS_LICENSE": "/opt/freesurfer/license.txt",
        "FS_OVERRIDE": "0",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "LANG": "C.UTF-8",
        "LOCAL_DIR": "/opt/freesurfer/local",
        "MINC_BIN_DIR": "/opt/freesurfer/mni/bin",
        "MINC_LIB_DIR": "/opt/freesurfer/mni/lib",
        "MNI_DATAPATH": "/opt/freesurfer/mni/data",
        "MNI_DIR": "/opt/freesurfer/mni",
        "MNI_PERL5LIB": "/opt/freesurfer/mni/share/perl5/",
        "OS": "Linux",
        "PATH": "/opt/miniconda-latest/bin:/opt/freesurfer/bin:/opt/freesurfer/fsfast/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/lib/fsl/5.0:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PERL5LIB": "/opt/freesurfer/mni/share/perl5",
        "PYTHON_GET_PIP_SHA256": "1e501cf004eac1b7eb1f97266d28f995ae835d30250bec7f8850562703067dc6",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/66030fa03382b4914d4c4d0896961a0bdeeeb274/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.3.1",
        "PYTHON_SETUPTOOLS_VERSION": "65.5.1",
        "PYTHON_VERSION": "3.10.9",
        "SUBJECTS_DIR": "/opt/freesurfer/subjects"
      },
      "label": "Petsurfer motion correction",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "petsurfer-mc",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/petsurfer-mc",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/petsurfer-mc",
      "version": "0.1.0_7.3.2"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "Greve, D. N., Svarer, C., Fisher, P. M., Feng, L., Hansen, A. E., Baare, W., ... & Knudsen, G. M. (2014). Cortical surface-based analysis reduces bias and variance in kinetic modeling of brain PET data. Neuroimage, 92, 225-236; Greve, D. N., Salat, D. H., Bowen, S. L., Izquierdo-Garcia, D., Schultz, A. P., Catana, C., ... & Johnson, K. A. (2016). Different partial volume correction methods lead to different conclusions: An 18 F-FDG-PET study of aging. NeuroImage, 132, 334-343.",
      "command": "python run.py",
      "description": "ROI Analysis, Setting Up Reference Regions for KM, and Apply Partial Volume Correction",
      "environment": {
        "ANTSPATH": "/opt/ants/bin/",
        "ANTS_VERSION": "v2.4.2",
        "DISPLAY": ":50.0",
        "FLYWHEEL": "/flywheel/v0",
        "FREESURFER_HOME": "/opt/freesurfer",
        "FS_LICENSE": "/opt/freesurfer/license.txt",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "LANG": "C.UTF-8",
        "PATH": "/opt/freesurfer/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/ants/bin",
        "PYTHON_GET_PIP_SHA256": "1e501cf004eac1b7eb1f97266d28f995ae835d30250bec7f8850562703067dc6",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/66030fa03382b4914d4c4d0896961a0bdeeeb274/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "58.1.0",
        "PYTHON_VERSION": "3.9.15"
      },
      "label": "Petsurfer ROI Analysis, Setting Up Reference Regions for KM, and Apply Partial Volume Correction",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "petsurfer-roi",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/petsurfer-roi",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/petsurfer-roi",
      "version": "0.1.2_7.3.2"
    }
  ],
  [
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.) using information about the sequence, as well as heuristics based upon the series description.",
      "label": "GE P-File Metadata Import and Classification",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "2.4.0_23ec2b6"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "Metadata Import and Classification for GE P-Files",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "2.3.2"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Metadata Import and Classification",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "2.3.1"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Metadata Import and Classification",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "2.3.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Classifier",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "2.2.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Classifier",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier/releases/tag/2.1.0",
      "url": "https://cni.stanford.edu",
      "version": "2.1.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Classifier",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "2.0.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Classifier",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "1.8.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Classifier",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "1.7.1"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Classifier",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "1.7.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Classifier",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "1.6.1"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Classifier",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "1.6.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Classifier",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "1.5.2"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Classifier",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "1.5.1"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Classifier",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "1.5.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Classifier",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "1.4.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Classifier",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "1.3.2"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Classifier",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "1.3.1"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Classifier",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "1.3.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Classifier",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "1.2.1"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Classifier",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "1.2.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Classifier",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "1.1.1"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File header and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-File's classification (measurement, intent, etc.).",
      "label": "CNI: GE P-File Classifier",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "1.1.0"
    },
    {
      "author": "Michael Perry <lmperry@stanford.edu>",
      "cite": "pfile-tools: GE P-File Utilities (https://github.com/njvack/pfile-tools)",
      "description": "Extracts GE P-File headers and generates JSON metadata (.metadata.json) which is saved in Flywheel on the P-File's info object. This gear also attempts to determine the P-Files classification.",
      "label": "CNI: GE P-File Classifier",
      "license": "BSD-2-Clause",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "pfile-mr-classifier",
      "source": "https://github.com/cni/pfile-mr-classifier",
      "url": "https://cni.stanford.edu",
      "version": "1.0.0"
    }
  ],
  [
    {
      "author": "Souheil Inati, Michael Hansen, et al.",
      "description": "The Philips to ISMRM-RD Convertor (philips_to_ismrmrd v0.1.0, ismrmrd v1.3.2) is used to convert data from Philips Raw file (.raw) to ISMRM-RD raw data format (.h5).",
      "label": "Philips to ISMRM-RD Converter (philips_to_ismrmrd v0.1.0, ismrmrd v1.3.2)",
      "license": "Other",
      "maintainer": "Jennifer Reiter <jenniferreiter@invenshure.com>",
      "name": "philips-to-ismrmrd",
      "source": "https://github.com/flywheel-apps/philips_to_ismrmrd",
      "url": "https://github.com/ismrmrd/philips_to_ismrmrd",
      "version": "0.1"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "https://microsoft.github.io/presidio/",
      "command": "python run.py",
      "description": "This gear utilizes Mircosoft's Presidio SDK which utilizes Natural Language Processing techiniques like Regex and Named Entity Recognition to detect and report PII for subject and patient data protection.",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "LANG": "C.UTF-8",
        "PATH": "/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PYTHON_GET_PIP_SHA256": "45a2bb8bf2bb5eff16fdd00faef6f29731831c7c59bd9fc2bf1f3bed511ff1fe",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/9af82b715db434abb94a0a6f3569f43e72157346/public/get-pip.py",
        "PYTHON_PIP_VERSION": "23.0.1",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.8.18"
      },
      "label": "Presidio Analyzer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "presidio-analyzer",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/presidio-analyzer",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/presidio-analyzer",
      "version": "0.1.1"
    },
    {
      "author": "Flywheel",
      "cite": "https://microsoft.github.io/presidio/",
      "command": "python run.py",
      "description": "This gear utilizes Mircosoft's Presidio SDK which utilizes Natural Language Processing techiniques like Regex and Named Entity Recognition to detect and report PII for subject and patient data protection.",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "LANG": "C.UTF-8",
        "PATH": "/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PYTHON_GET_PIP_SHA256": "d1d09b0f9e745610657a528689ba3ea44a73bd19c60f4c954271b790c71c2653",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/1a96dc5acd0303c4700e02655aefd3bc68c78958/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.0.4",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.8.16"
      },
      "label": "Presidio Analyzer",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "presidio-analyzer",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/presidio-analyzer",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/presidio-analyzer",
      "version": "0.1.0"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "https://microsoft.github.io/presidio/",
      "command": "python run.py",
      "description": "This gear utilizes Mircrosoft's open source Presidio SDK to scan images for potential Personal Identifiable Information (PII), report on PII findings, and redact PII contained within pixel data.",
      "environment": {
        "FLYWHEEL": "/flywheel/v0",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "LANG": "C.UTF-8",
        "PATH": "/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PYTHON_GET_PIP_SHA256": "45a2bb8bf2bb5eff16fdd00faef6f29731831c7c59bd9fc2bf1f3bed511ff1fe",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/9af82b715db434abb94a0a6f3569f43e72157346/public/get-pip.py",
        "PYTHON_PIP_VERSION": "23.0.1",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.8.18"
      },
      "label": "Presidio Image Redactor",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "presidio-image-redactor",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/presidio-image-redactor",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/presidio-image-redactor",
      "version": "0.1.1"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "PyDeface doi: 10.5281/zenodo.6856482",
      "command": "python run.py",
      "description": "Flywheel gear for the implementation of Poldrack Lab's PyDeface to remove facial structures from MRI images.",
      "environment": {
        "BUILD_TIME": "2023-03-20T11:43:06Z",
        "COMMIT_REF": "main",
        "COMMIT_SHA": "fa0da4dd",
        "CONDA_DEFAULT_ENV": "neuro",
        "CONDA_DIR": "/opt/conda",
        "CONDA_EXE": "/opt/conda/bin/conda",
        "CONDA_PREFIX": "/opt/conda/envs/neuro",
        "CONDA_PROMPT_MODIFIER": "(neuro) ",
        "CONDA_PYTHON_EXE": "/opt/conda/bin/python",
        "CONDA_SHLVL": "1",
        "DEBIAN_FRONTEND": "noninteractive",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "FSLBROWSER": "/etc/alternatives/x-www-browser",
        "FSLDIR": "/usr/share/fsl/6.0",
        "FSLGECUDAQ": "cuda.q",
        "FSLLOCKDIR": "",
        "FSLMACHINELIST": "",
        "FSLMULTIFILEQUIT": "TRUE",
        "FSLOUTPUTTYPE": "NIFTI_GZ",
        "FSLREMOTECALL": "",
        "FSLTCLSH": "/usr/bin/tclsh",
        "FSLWISH": "/usr/bin/wish",
        "FSL_DIR": "/usr/share/fsl/6.0",
        "GPG_KEY": "A035C8C19219BA821ECEA86B64E628F8D684696D",
        "HOME": "/root",
        "HOSTNAME": "d8012530f084",
        "LANG": "C.UTF-8",
        "LC_ALL": "C.UTF-8",
        "LD_LIBRARY_PATH": "/usr/share/fsl/6.0/lib:",
        "ND_ENTRYPOINT": "/neurodocker/startup.sh",
        "NEURODEB_KEY": "http://neuro.debian.net/_static/neuro.debian.net.asc",
        "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/share/fsl/6.0/bin",
        "POSSUMDIR": "/usr/share/fsl/6.0",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PWD": "/flywheel/v0",
        "PYDEFACE_VERSION": "v2.0.2",
        "PYSITE": "/usr/local/lib/python3.11/site-packages",
        "PYTHON_GET_PIP_SHA256": "394be00f13fa1b9aaa47e911bdb59a09c3b2986472130f30aa0bfaf7f3980637",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d5cb0afaf23b8520f1bbcfed521017b4a95f5c01/public/get-pip.py",
        "PYTHON_PIP_VERSION": "22.3.1",
        "PYTHON_SETUPTOOLS_VERSION": "65.5.1",
        "PYTHON_VERSION": "3.11.2",
        "SETUPTOOLS_USE_DISTUTILS": "stdlib",
        "SHLVL": "1",
        "TERM": "xterm",
        "_": "/opt/conda/envs/neuro/bin/python",
        "_CE_CONDA": "",
        "_CE_M": ""
      },
      "label": "Pydeface",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "pydeface",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/pydeface",
      "url": "https://github.com/poldracklab/pydeface",
      "version": "0.1.0_2.0.2"
    }
  ],
  [
    {
      "author": "van Griethuysen, J. J. M. et al.",
      "cite": "van Griethuysen, J. J. M., Fedorov, A., Parmar, C., Hosny, A., Aucoin, N., Narayan, V., Beets-Tan, R. G. H., Fillon-Robin, J. C., Pieper, S., Aerts, H. J. W. L. (2017). Computational Radiomics System to Decode the Radiographic Phenotype. Cancer Research, 77(21), e104–e107.",
      "command": "poetry run python run.py",
      "description": "Extraction of Radiomics features from medical imaging data using the PyRadiomics module. Supports feature extraction for 2D and 3D images; a mask is required to calculate single values per feature for a region of interest (“segment-based”). If no mask is passed, then (almost, see *mask* input) the entire input image will be used as to generate features.  Extracted features are output in a CSV file. Voxel-based radiomics are not supported at this time.",
      "environment": {},
      "label": "PyRadiomics",
      "license": "BSD-3-Clause",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "pyradiomics",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/pyradiomics",
      "url": "https://pyradiomics.readthedocs.io/en/latest/index.html",
      "version": "2.0.2_3.0.1"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Uses pyRadiomics module to generate a .csv file of image features.",
      "environment": {},
      "label": "pyradiomics",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "pyradiomics",
      "source": "https://pyradiomics.readthedocs.io/en/latest/index.html",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/pyradiomics",
      "version": "1.0.0"
    }
  ],
  [
    {
      "author": "Robert F. Dougherty",
      "description": "Run QA metrics (displacement, signal spikes) to create a quality assurance report (png) for an fMRI NIfTI using modified CNI/NIMS code from @rfdougherty.",
      "label": "Quality Assurance Report (fMRI)",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "qa-report-fmri",
      "source": "https://github.com/scitran-apps/qa-report-fmri",
      "url": "https://github.com/cni/nims/blob/master/nimsproc/qa_report.py",
      "version": "0.1.7"
    }
  ],
  [
    {
      "author": "Ashley Stewart",
      "cite": "Stewart, AW, Robinson, SD, O'Brien, K, et al. QSMxT: Robust masking and artifact reduction for quantitative susceptibility mapping. Magn Reson Med. 2022; 87: 1289-1300. doi:10.1002/mrm.29048 ",
      "command": "python run.py",
      "description": "QSMxT is an end-to-end pipeline for Quantitative Susceptibility Mapping (QSM). This gear is generously provided by the research community. Please address questions regarding the source code or other elements of the gear to the author/maintainer. Due diligence that the code does what you expect should be conducted as usual.",
      "environment": {
        "ANTSPATH": "/opt/ants-2.3.4",
        "FASTSURFER_HOME": "/opt/FastSurfer",
        "JULIA_DEPOT_PATH": "~/.julia:/opt/julia_depot",
        "PATH": "/opt/miniconda-4.7.12.1/bin:/opt/miniconda-4.7.12.1/condabin:/opt/miniconda-4.7.12.1/bin:/opt/dcm2niix-003f0d19f1e57b0129c9dcf3e653f51ca3559028/bin:/opt/ants-2.3.4:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/TGVQSM/tgvqsm-1.0.0:/opt/FastSurfer:/opt/nextqsm/src_tensorflow:/opt/bru2:/opt/julia-1.6.1/bin:/opt/QSMxT:/opt/QSMxT/scripts",
        "PYTHONPATH": "/opt/TGVQSM/TGVQSM-master-011045626121baa8bfdd6633929974c732ae35e3/TGV_QSM:/opt/QSMxT",
        "SUBJECTS_DIR": "/tmp"
      },
      "label": "QSMxT for Automated Quantitative Susceptibility Mapping",
      "license": "GPL-3.0",
      "maintainer": "Ashley Stewart",
      "name": "qsmxt",
      "source": "https://github.com/QSMxT/qsmxt-flywheel",
      "url": "https://github.com/QSMxT/QSMxT",
      "version": "1.3.2_20230220"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "Roy, A.G., Conjeti, S., Navab, N. and Wachinger, C., 2018. QuickNAT: Segmenting\nMRI Neuroanatomy in 20 seconds. arXiv:1801.04161",
      "command": "/flywheel/v0/run.py",
      "description": "Flywheel gear wrapper for QuickNAT_pytorch",
      "environment": {
        "PYTHONPATH": "/opt/quickNAT_pytorch/"
      },
      "label": "QuickNAT Pytorch",
      "license": "Apache-2.0",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "quicknat-gear",
      "source": "https://github.com/ai-med/quickNAT_pytorch",
      "url": "https://github.com/flywheel-apps/quicknat-gear",
      "version": "0.1.0"
    }
  ],
  [
    {
      "author": "Noah C. Benson <nben@nyu.edu>",
      "description": "Runs FreeSurfer's RECON-ALL and applies the V1, V2, and V3 anatomical template of retinotopy from Benson et al. (2014) as well as the ROI template of Wang et al. (2015) to the output images using the Neuropythy neuroscience library for Python by Noah C. Benson. * Note that this Gear does not use the original version of the Benson et al. template, but rather an updated version that has also been published on the website indicated in the original paper. If using this Gear in your work, please cite: Benson NC, Butt OH, Datta R, Radoeva PD, Brainard DH, Aguirre GK (2012) The retinotopic organization of striate cortex is well predicted by surface topology. Curr Biol22(21):2081-5.",
      "label": "NEUROPYTHY: Retinotopy Template Generation (Benson, et. al.)",
      "license": "GPL-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "retinotopy-templates",
      "source": "https://github.com/scitran-apps/retinotopy-templates",
      "url": "https://github.com/noahbenson/neuropythy",
      "version": "0.1.0"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python3 /flywheel/v0/run.py",
      "description": "This gear converts ROIs created in Flywheel's OHIF viewer to NIfTI files.",
      "environment": {
        "CONVERTER_DIR": "/flywheel/v0/converters",
        "CXX": "/usr/bin/gcc",
        "DCM2NIIX_DIR": "/flywheel/v0/converters/dcm2niix",
        "DCMCOMMIT": "003f0d19f1e57b0129c9dcf3e653f51ca3559028",
        "DCMHEAT_DIR": "/flywheel/v0/dcmheat",
        "DEBIAN_FRONTEND": "noninteractive",
        "DICOM2NIFTI_DIR": "/flywheel/v0/converters/dicom2nifti",
        "FLYWHEEL": "/flywheel/v0",
        "HOME": "/root",
        "OJ_VERSION": "2.4.0",
        "OPENJPEGDIR": "/flywheel/v0/openjpeg",
        "PATH": "/flywheel/v0/converters/slicer/slicer:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PLASTIMATCH_DIR": "/flywheel/v0/converters/plastimatch",
        "SCRIPT_DIR": "/flywheel/v0/converters/scripts",
        "SHLVL": "1",
        "SLICER_DIR": "/flywheel/v0/converters/slicer",
        "SLICER_DOCKER_DIR": "/flywheel/v0/converters/slicer_docker",
        "SLICER_URL": "http://download.slicer.org/bitstream/60add706ae4540bf6a89bf98",
        "TERM": "xterm",
        "XDG_RUNTIME_DIR": "/tmp/runtime-sliceruser",
        "_": "/usr/bin/env"
      },
      "label": "ROI to NIfTI",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "roi2nix",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/roi2nix",
      "url": "",
      "version": "1.0.3"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python3 /flywheel/v0/run.py",
      "description": "This gear converts ROIs created in Flywheel's OHIF viewer to NIfTI files.",
      "environment": {
        "CONVERTER_DIR": "/flywheel/v0/converters",
        "CXX": "/usr/bin/gcc",
        "DCM2NIIX_DIR": "/flywheel/v0/converters/dcm2niix",
        "DCMHEAT_DIR": "/flywheel/v0/dcmheat",
        "DEBIAN_FRONTEND": "noninteractive",
        "DICOM2NIFTI_DIR": "/flywheel/v0/converters/dicom2nifti",
        "FLYWHEEL": "/flywheel/v0",
        "HOME": "/root",
        "OPENJPEGDIR": "/flywheel/v0/openjpeg",
        "PATH": "/flywheel/v0/converters/slicer/slicer:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PLASTIMATCH_DIR": "/flywheel/v0/converters/plastimatch",
        "SCRIPT_DIR": "/flywheel/v0/converters/scripts",
        "SHLVL": "1",
        "SLICER_DIR": "/flywheel/v0/converters/slicer",
        "SLICER_DOCKER_DIR": "/flywheel/v0/converters/slicer_docker",
        "TERM": "xterm",
        "XDG_RUNTIME_DIR": "/tmp/runtime-sliceruser",
        "_": "/usr/bin/env"
      },
      "label": "ROI to NIfTI",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "roi2nix",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/roi2nix",
      "url": "",
      "version": "1.0.2"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python3 /flywheel/v0/run.py",
      "description": "This gear converts ROIs created in Flywheel's OHIF viewer to NIfTI files.",
      "environment": {
        "CONVERTER_DIR": "/flywheel/v0/converters",
        "CXX": "/usr/bin/gcc",
        "DCM2NIIX_DIR": "/flywheel/v0/converters/dcm2niix",
        "DCMHEAT_DIR": "/flywheel/v0/dcmheat",
        "DEBIAN_FRONTEND": "noninteractive",
        "DICOM2NIFTI_DIR": "/flywheel/v0/converters/dicom2nifti",
        "FLYWHEEL": "/flywheel/v0",
        "HOME": "/root",
        "OPENJPEGDIR": "/flywheel/v0/openjpeg",
        "PATH": "/flywheel/v0/converters/slicer/slicer:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PLASTIMATCH_DIR": "/flywheel/v0/converters/plastimatch",
        "SCRIPT_DIR": "/flywheel/v0/converters/scripts",
        "SHLVL": "1",
        "SLICER_DIR": "/flywheel/v0/converters/slicer",
        "SLICER_DOCKER_DIR": "/flywheel/v0/converters/slicer_docker",
        "TERM": "xterm",
        "XDG_RUNTIME_DIR": "/tmp/runtime-sliceruser",
        "_": "/usr/bin/env"
      },
      "label": "ROI to NIfTI",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "roi2nix",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/roi2nix",
      "url": "",
      "version": "1.0.1"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python3 /flywheel/v0/run.py",
      "description": "This gear converts ROIs created in Flywheel's OHIF viewer to NIfTI files.",
      "environment": {
        "CONVERTER_DIR": "/flywheel/v0/converters",
        "CXX": "/usr/bin/gcc",
        "DCM2NIIX_DIR": "/flywheel/v0/converters/dcm2niix",
        "DCMHEAT_DIR": "/flywheel/v0/dcmheat",
        "DEBIAN_FRONTEND": "noninteractive",
        "DICOM2NIFTI_DIR": "/flywheel/v0/converters/dicom2nifti",
        "FLYWHEEL": "/flywheel/v0",
        "HOME": "/root",
        "OPENJPEGDIR": "/flywheel/v0/openjpeg",
        "PATH": "/flywheel/v0/converters/slicer/slicer:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PLASTIMATCH_DIR": "/flywheel/v0/converters/plastimatch",
        "SCRIPT_DIR": "/flywheel/v0/converters/scripts",
        "SHLVL": "1",
        "SLICER_DIR": "/flywheel/v0/converters/slicer",
        "SLICER_DOCKER_DIR": "/flywheel/v0/converters/slicer_docker",
        "TERM": "xterm",
        "XDG_RUNTIME_DIR": "/tmp/runtime-sliceruser",
        "_": "/usr/bin/env"
      },
      "label": "ROI to NIfTI",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "roi2nix",
      "source": "https://github.com/flywheel-apps/ROI2nix",
      "url": "",
      "version": "1.0.0"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "/flywheel/v0/run.py",
      "description": "This gear converts ROIs created in Flywheel's OHIF viewer to NIfTI files.",
      "label": "ROI to NIfTI",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "roi2nix",
      "source": "https://github.com/flywheel-apps/ROI2nix",
      "url": "",
      "version": "0.3.4"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "/flywheel/v0/run.py",
      "description": "This gear converts ROIs created in Flywheel's OHIF viewer to NIfTI files.",
      "label": "ROI to NIfTI",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "roi2nix",
      "source": "https://github.com/flywheel-apps/ROI2nix",
      "url": "",
      "version": "0.3.3"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "/flywheel/v0/run.py",
      "description": "This gear converts ROIs created in Flywheel's OHIF viewer to NIfTI files.",
      "label": "ROI to NIfTI",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "roi2nix",
      "source": "https://github.com/flywheel-apps/ROI2nix",
      "url": "",
      "version": "0.3.2"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "/flywheel/v0/run.py",
      "description": "This gear converts ROIs created in Flywheel's OHIF viewer to NIfTI files.",
      "label": "ROI to NIfTI",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "roi2nix",
      "source": "https://github.com/flywheel-apps/ROI2nix",
      "url": "",
      "version": "0.2.4"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "/flywheel/v0/run.py",
      "description": "This gear converts ROIs created in Flywheel's OHIF viewer to NIfTI files.",
      "label": "ROI to NIfTI",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "roi2nix",
      "source": "https://github.com/flywheel-apps/ROI2nix",
      "url": "",
      "version": "0.2.3"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "/flywheel/v0/run.py",
      "description": "This gear converts ROIs created in Flywheel's OHIF viewer to NIfTI files.",
      "label": "ROI to NIfTI",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "roi2nix",
      "source": "https://github.com/flywheel-apps/ROI2nix",
      "url": "",
      "version": "0.2.0"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "/flywheel/v0/run.py",
      "description": "This gear converts ROIs created in Flywheel's OHIF viewer to NIfTI files.",
      "label": "ROI to NIfTI",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "roi2nix",
      "source": "https://github.com/flywheel-apps/ROI2nix",
      "url": "",
      "version": "0.1.1"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "/flywheel/v0/run.py",
      "description": "This gear converts ROIs created in Flywheel's OHIF viewer to NIfTI files.",
      "label": "ROI to NIfTI",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "roi2nix",
      "source": "https://github.com/flywheel-apps/ROI2nix",
      "url": "",
      "version": "0.1.0"
    }
  ],
  [
    {
      "author": "SciTran Team",
      "description": "Creates a montage (zip, or png) from a NIfTI file.",
      "label": "SciTran: NIfTI Montage Creation Tool",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "scitran-nifti-montage",
      "source": "https://github.com/scitran-apps/nifti-montage",
      "url": "https://github.com/scitran-apps/nifti-montage",
      "version": "1.4.0"
    },
    {
      "author": "SciTran Team",
      "description": "Creates a montage (zip, or png) from a NIfTI file.",
      "label": "SciTran: NIfTI Montage Creation Tool",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "scitran-nifti-montage",
      "source": "https://github.com/scitran-apps/nifti-montage",
      "url": "https://github.com/scitran-apps/nifti-montage",
      "version": "1.3"
    },
    {
      "author": "SciTran Team",
      "description": "Creates a montage (zip, or png) from a NIfTI file.",
      "label": "SciTran: NIfTI Montage Creation Tool",
      "license": "Apache-2.0",
      "maintainer": "Michael Perry <lmperry@stanford.edu>",
      "name": "scitran-nifti-montage",
      "source": "https://github.com/scitran-apps/nifti-montage",
      "url": "https://github.com/scitran-apps/nifti-montage",
      "version": "1.2"
    }
  ],
  [
    {
      "author": "Souheil Inati, Michael Hansen, et al.",
      "description": "The Siemens to ISMRM-RD Converter (siemens_to_ismrmrd v1.0.1, ismrmrd v1.3.2) is used to convert data from Siemens raw data format (.dat) to ISMRM-RD raw data format (.h5).",
      "label": "Siemens to ISMRM-RD Converter (siemens_to_ismrmrd v1.0.1, ismrmrd v1.3.2)",
      "license": "Other",
      "maintainer": "Jennifer Reiter <jenniferreiter@invenshure.com>",
      "name": "siemens-to-ismrmrd",
      "source": "https://github.com/flywheel-apps/siemens_to_ismrmrd",
      "url": "https://github.com/ismrmrd/siemens_to_ismrmrd",
      "version": "0.1"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "The DICOM splitter extracts embedded localizer DICOM frames and/or re-group DICOM frames in archive by specific DICOM tags provided by user.",
      "environment": {
        "COMMIT": "master.3a9476be",
        "COMMIT_TIME": "2021-10-25T09:24:15+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GDCM_VERSION": "3.0.9",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.0",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.11",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PWD": "/flywheel/v0",
        "PYTHON_GET_PIP_SHA256": "01249aa3e58ffb3e1686b7141b4e9aac4d398ef4ac3012ed9dff8dd9f685ffe0",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d781367b97acf0ece7e9e304bf281e99b618bf10/public/get-pip.py",
        "PYTHON_PIP_VERSION": "21.2.4",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.9.7"
      },
      "label": "DICOM splitter",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "splitter",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/splitter",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/splitter",
      "version": "1.5.2"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "The DICOM splitter extracts embedded localizer DICOM frames and/or re-group DICOM frames in archive by specific DICOM tags provided by user.",
      "environment": {
        "COMMIT": "master.3a9476be",
        "COMMIT_TIME": "2021-10-25T09:24:15+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GDCM_VERSION": "3.0.9",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.0",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.11",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PWD": "/flywheel/v0",
        "PYTHON_GET_PIP_SHA256": "01249aa3e58ffb3e1686b7141b4e9aac4d398ef4ac3012ed9dff8dd9f685ffe0",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d781367b97acf0ece7e9e304bf281e99b618bf10/public/get-pip.py",
        "PYTHON_PIP_VERSION": "21.2.4",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.9.7"
      },
      "label": "DICOM splitter",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "splitter",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/splitter",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/splitter",
      "version": "1.5.1"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "The DICOM splitter extracts embedded localizer DICOM frames and/or re-group DICOM frames in archive by specific DICOM tags provided by user.",
      "environment": {
        "COMMIT": "master.3a9476be",
        "COMMIT_TIME": "2021-10-25T09:24:15+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GDCM_VERSION": "3.0.9",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.0",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.11",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PWD": "/flywheel/v0",
        "PYTHON_GET_PIP_SHA256": "01249aa3e58ffb3e1686b7141b4e9aac4d398ef4ac3012ed9dff8dd9f685ffe0",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d781367b97acf0ece7e9e304bf281e99b618bf10/public/get-pip.py",
        "PYTHON_PIP_VERSION": "21.2.4",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.9.7"
      },
      "label": "DICOM splitter",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "splitter",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/splitter",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/splitter",
      "version": "1.5.0"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "The DICOM splitter extracts embedded localizer DICOM frames and/or re-group DICOM frames in archive by specific DICOM tags provided by user.",
      "environment": {
        "COMMIT": "master.3a9476be",
        "COMMIT_TIME": "2021-10-25T09:24:15+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GDCM_VERSION": "3.0.9",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.0",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.11",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PYTHON_GET_PIP_SHA256": "01249aa3e58ffb3e1686b7141b4e9aac4d398ef4ac3012ed9dff8dd9f685ffe0",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d781367b97acf0ece7e9e304bf281e99b618bf10/public/get-pip.py",
        "PYTHON_PIP_VERSION": "21.2.4",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.9.7"
      },
      "label": "DICOM splitter",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "splitter",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/splitter",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/splitter",
      "version": "1.4.3"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "The DICOM splitter extracts embedded localizer DICOM frames and/or re-group DICOM frames in archive by specific DICOM tags provided by user.",
      "environment": {
        "COMMIT": "master.3a9476be",
        "COMMIT_TIME": "2021-10-25T09:24:15+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GDCM_VERSION": "3.0.9",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.0",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.11",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PYTHON_GET_PIP_SHA256": "01249aa3e58ffb3e1686b7141b4e9aac4d398ef4ac3012ed9dff8dd9f685ffe0",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d781367b97acf0ece7e9e304bf281e99b618bf10/public/get-pip.py",
        "PYTHON_PIP_VERSION": "21.2.4",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.9.7"
      },
      "label": "DICOM splitter",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "splitter",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/splitter",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/splitter",
      "version": "1.3.4"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "python run.py",
      "description": "The DICOM splitter extracts embedded localizer DICOM frames and/or re-group DICOM frames in archive by specific DICOM tags provided by user.",
      "environment": {
        "COMMIT": "master.3a9476be",
        "COMMIT_TIME": "2021-10-25T09:24:15+00:00",
        "EDITOR": "micro",
        "FLYWHEEL": "/flywheel/v0",
        "GDCM_VERSION": "3.0.9",
        "GJO_VERSION": "1.0.2",
        "GPG_KEY": "E3FF2839C048B25C084DEBE9B26995E310250568",
        "JQ_VERSION": "jq-1.6",
        "LANG": "C.UTF-8",
        "MICRO_VERSION": "2.0.10",
        "MUSTACHE_VERSION": "1.3.0",
        "PATH": "/opt/poetry/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "PIP_NO_CACHE_DIR": "0",
        "POETRY_HOME": "/opt/poetry",
        "POETRY_VERSION": "1.1.11",
        "POETRY_VIRTUALENVS_CREATE": "false",
        "PROMETHEUS_MULTIPROC_DIR": "/var/metrics",
        "PYTHON_GET_PIP_SHA256": "01249aa3e58ffb3e1686b7141b4e9aac4d398ef4ac3012ed9dff8dd9f685ffe0",
        "PYTHON_GET_PIP_URL": "https://github.com/pypa/get-pip/raw/d781367b97acf0ece7e9e304bf281e99b618bf10/public/get-pip.py",
        "PYTHON_PIP_VERSION": "21.2.4",
        "PYTHON_SETUPTOOLS_VERSION": "57.5.0",
        "PYTHON_VERSION": "3.9.7"
      },
      "label": "DICOM splitter",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "splitter",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/splitter",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/splitter",
      "version": "1.3.1"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "The DICOM splitter extracts embedded localizer DICOM frames and/or re-group DICOM frames in archive by specific DICOM tags provided by user.",
      "environment": {},
      "label": "DICOM splitter",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "splitter",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/splitter",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/splitter",
      "version": "1.1.2"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Metadata Import and Validation for DICOM files. This Gear will parse, import, and validate DICOM header metadata. Those metadata are added to the input file's metadata object (<inputFile>.info). A metadata validation template must be provided as input to the gear, which the gear will use to validate the DICOM metadata. Data which fail this validation will be tagged (with 'error') and an error file will be generated and written to the input container.",
      "environment": {},
      "label": "DICOM splitter",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "splitter",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/",
      "version": "1.1.1"
    },
    {
      "author": "Flywheel",
      "cite": "",
      "command": "poetry run python run.py",
      "description": "Metadata Import and Validation for DICOM files. This Gear will parse, import, and validate DICOM header metadata. Those metadata are added to the input file's metadata object (<inputFile>.info). A metadata validation template must be provided as input to the gear, which the gear will use to validate the DICOM metadata. Data which fail this validation will be tagged (with 'error') and an error file will be generated and written to the input container.",
      "environment": {},
      "label": "DICOM splitter",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "splitter",
      "source": "https://gitlab.com/flywheel-io/flywheel-apps/",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/",
      "version": "1.1.0"
    }
  ],
  [
    {
      "author": "Flywheel, Inc",
      "command": "python run.py",
      "description": "FW QA test gear for stress-testing infrastructure",
      "label": "FW QA Stress Test",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "stress-test",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/stress-test",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/stress-test",
      "version": "0.2.2"
    }
  ],
  [
    {
      "author": "Harsha Kethineni",
      "command": "python task_gen.py",
      "description": "Converts log files to tsv task files as per bids specs",
      "label": "Task tsv Converter",
      "license": "Other",
      "maintainer": "Harsha Kethineni",
      "name": "task-tsv-converter",
      "source": "",
      "url": "",
      "version": "0.1.9"
    },
    {
      "author": "Harsha Kethineni",
      "command": "python task_gen.py",
      "description": "Converts log files to tsv task files as per bids specs",
      "label": "Task tsv Converter",
      "license": "Other",
      "maintainer": "Harsha Kethineni",
      "name": "task-tsv-converter",
      "source": "",
      "url": "",
      "version": "0.1.5"
    },
    {
      "author": "Harsha Kethineni",
      "command": "python task_gen.py",
      "description": "Converts log files to tsv task files as per bids specs",
      "label": "Task tsv Converter",
      "license": "Other",
      "maintainer": "Harsha Kethineni",
      "name": "task-tsv-converter",
      "source": "",
      "url": "",
      "version": "0.1.4"
    },
    {
      "author": "Harsha Kethineni",
      "command": "python task_gen.py",
      "description": "Converts log files to tsv task files as per bids specs",
      "label": "Task tsv Converter",
      "license": "Other",
      "maintainer": "Harsha Kethineni",
      "name": "task-tsv-converter",
      "source": "",
      "url": "",
      "version": "0.1.3"
    },
    {
      "author": "Harsha Kethineni",
      "command": "python task_gen.py",
      "description": "Converts log files to tsv task files as per bids specs",
      "label": "Task tsv Converter",
      "license": "Other",
      "maintainer": "Harsha Kethineni",
      "name": "task-tsv-converter",
      "source": "",
      "url": "",
      "version": "0.1.2"
    },
    {
      "author": "Harsha Kethineni",
      "command": "python task_gen.py",
      "description": "Converts log files to tsv task files as per bids specs",
      "label": "Task tsv Converter",
      "license": "Other",
      "maintainer": "Harsha Kethineni",
      "name": "task-tsv-converter",
      "source": "",
      "url": "",
      "version": "0.1.10"
    },
    {
      "author": "Harsha Kethineni",
      "command": "python task_gen.py",
      "description": "Converts log files to tsv task files as per bids specs",
      "label": "Task tsv Converter",
      "license": "Other",
      "maintainer": "Harsha Kethineni",
      "name": "task-tsv-converter",
      "source": "",
      "url": "",
      "version": "0.1.1"
    },
    {
      "author": "Harsha Kethineni",
      "command": "python task_gen.py",
      "description": "Converts log files to tsv task files as per bids specs",
      "label": "Task tsv Converter",
      "license": "Other",
      "maintainer": "Harsha Kethineni",
      "name": "task-tsv-converter",
      "source": "",
      "url": "",
      "version": "0.1.0-1"
    },
    {
      "author": "Harsha Kethineni",
      "description": "Converts log files to tsv task files as per bids specs",
      "label": "Task tsv Converter",
      "license": "Other",
      "maintainer": "Harsha Kethineni",
      "name": "task-tsv-converter",
      "source": "",
      "url": "",
      "version": "0.1.0"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "https://doi.org/10.1371/journal.pone.0214775",
      "command": "python run.py",
      "description": "Implementation of tbiExtractor for automated extraction of common data elements from radiology reports for traumatic brain injury.",
      "label": "TBI Extractor: Automated extraction of common data elements for traumatic brain injury.",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "tbi-extractor",
      "source": "https://github.com/flywheel-apps/tbi-extractor",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/tbi-extractor",
      "version": "0.1.5_0.3.2"
    },
    {
      "author": "Flywheel",
      "cite": "https://doi.org/10.1371/journal.pone.0214775",
      "command": "poetry run python run.py",
      "description": "Implementation of tbiExtractor for automated extraction of common data elements from radiology reports for traumatic brain injury.",
      "label": "TBI Extractor: Automated extraction of common data elements for traumatic brain injury.",
      "license": "MIT",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "tbi-extractor",
      "source": "https://github.com/flywheel-apps/tbi-extractor",
      "url": "https://gitlab.com/flywheel-io/flywheel-apps/tbi-extractor",
      "version": "0.1.4_0.3.2"
    }
  ],
  [
    {
      "author": "Flywheel",
      "cite": "OpenSlide: A Vendor-Neutral Software Foundation for Digital Pathology\nAdam Goode, Benjamin Gilbert, Jan Harkes, Drazen Jukic, M. Satyanarayanan\nJournal of Pathology Informatics 2013, 4:27",
      "command": "python run.py",
      "description": "This gear contains a tool that converts whole slide images (WSIs) to DICOM. To read the underlying whole slide images (WSIs), this tool relies on OpenSlide, which supports a variety of file formats. ",
      "environment": {},
      "label": "WSI to DICOM",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "wsi-to-dicom",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/wsi-to-dicom",
      "url": "https://github.com/GoogleCloudPlatform/wsi-to-dicom-converter",
      "version": "0.2.0_1.0.3"
    },
    {
      "author": "Flywheel",
      "cite": "OpenSlide: A Vendor-Neutral Software Foundation for Digital Pathology\nAdam Goode, Benjamin Gilbert, Jan Harkes, Drazen Jukic, M. Satyanarayanan\nJournal of Pathology Informatics 2013, 4:27",
      "command": "/bin/python3.8 /flywheel/v0/run.py",
      "description": "This gear contains a tool that converts whole slide images (WSIs) to DICOM. To read the underlying whole slide images (WSIs), this tool relies on OpenSlide, which supports a variety of file formats.",
      "environment": {},
      "label": "WSI to dicom",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "wsi-to-dicom",
      "source": "https://github.com/flywheel-apps/fwgear-wsi-to-dicom-converter",
      "url": "https://github.com/GoogleCloudPlatform/wsi-to-dicom-converter",
      "version": "0.1.2_1.0.3"
    },
    {
      "author": "Flywheel",
      "cite": "OpenSlide: A Vendor-Neutral Software Foundation for Digital Pathology\nAdam Goode, Benjamin Gilbert, Jan Harkes, Drazen Jukic, M. Satyanarayanan\nJournal of Pathology Informatics 2013, 4:27",
      "command": "/bin/python3.8 /flywheel/v0/run.py",
      "description": "This gear contains a tool that converts whole slide images (WSIs) to DICOM. To read the underlying whole slide images (WSIs), this tool relies on OpenSlide, which supports a variety of file formats.",
      "environment": {},
      "label": "WSI to dicom",
      "license": "Other",
      "maintainer": "Flywheel <support@flywheel.io>",
      "name": "wsi-to-dicom",
      "source": "https://github.com/flywheel-apps/fwgear-wsi-to-dicom-converter",
      "url": "https://github.com/GoogleCloudPlatform/wsi-to-dicom-converter",
      "version": "0.1.1_1.0.3"
    }
  ],
  [
    {
      "author": "Flywheel support@flywheel.io",
      "cite": "",
      "command": "cd /opt/monai ; /opt/conda/bin/python app/x-ray-body-part-classifier-map.py -i /flywheel/v0/input/input-file/ -o /flywheel/v0/output/ -m models/x-ray-body-part-classifier/x-ray-body-part-classifier.zip",
      "description": "This gear wraps a model for classifying 20 body parts on x-ray images. These are: \n'Ankle', 'Calcaneus', 'Chest', 'Elbow', 'Femur', 'Fibula&Tibia', 'Finger', 'Foot',\n'Hand', 'Head', 'Hip', 'Humerus', 'Knee', 'Mandible', 'Pelvis', 'Radius&Ulna',\n'Shoulder&Shoulder', 'Spine', 'Cervical', 'Toes', 'Wrist'.",
      "environment": {},
      "label": "X-ray Body Part Classifier",
      "license": "MIT",
      "name": "x-ray-body-part-classifier",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/x-ray-body-part-classifier",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/x-ray-body-part-classifier",
      "version": "0.1.5"
    },
    {
      "author": "Flywheel support@flywheel.io",
      "cite": "",
      "command": "cd /opt/monai ; /opt/conda/bin/python app/x-ray-body-part-classifier-map.py -i /flywheel/v0/input/input-file/ -o /flywheel/v0/output/ -m models/x-ray-body-part-classifier/x-ray-body-part-classifier.zip",
      "description": "This gear wraps a model for classifying 20 body parts on x-ray images. These are: \n'Ankle', 'Calcaneus', 'Chest', 'Elbow', 'Femur', 'Fibula&Tibia', 'Finger', 'Foot',\n'Hand', 'Head', 'Hip', 'Humerus', 'Knee', 'Mandible', 'Pelvis', 'Radius&Ulna',\n'Shoulder&Shoulder', 'Spine', 'Cervical', 'Toes', 'Wrist'.",
      "environment": {},
      "label": "X-ray Body Part Classifier",
      "license": "MIT",
      "name": "x-ray-body-part-classifier",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/x-ray-body-part-classifier",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/x-ray-body-part-classifier",
      "version": "0.1.2"
    },
    {
      "author": "Flywheel support@flywheel.io",
      "cite": "",
      "command": "cd /opt/monai ; /opt/conda/bin/python app/x-ray-body-part-classifier-map.py -i /flywheel/v0/input/input-file/ -o /flywheel/v0/output/ -m models/x-ray-body-part-classifier/x-ray-body-part-classifier.zip",
      "description": "This gear wraps a model for classifying 20 body parts on x-ray images. These are: \n'Ankle', 'Calcaneus', 'Chest', 'Elbow', 'Femur', 'Fibula&Tibia', 'Finger', 'Foot',\n'Hand', 'Head', 'Hip', 'Humerus', 'Knee', 'Mandible', 'Pelvis', 'Radius&Ulna',\n'Shoulder&Shoulder', 'Spine', 'Cervical', 'Toes', 'Wrist'.",
      "environment": {},
      "label": "X-ray Body Part Classifier",
      "license": "MIT",
      "name": "x-ray-body-part-classifier",
      "source": "https://gitlab.com/flywheel-io/scientific-solutions/gears/x-ray-body-part-classifier",
      "url": "https://gitlab.com/flywheel-io/scientific-solutions/gears/x-ray-body-part-classifier",
      "version": "0.1.0"
    }
  ],
  [
    {
      "author": "Ted Satterthwaite",
      "cite": "Ciric, Rastko and Rosen, Adon F. G. and Erus, Guray and Cieslak, Matthew and Adebimpe, Azeez and Cook, Philip A. and Bassett, Danielle S. and Davatzikos, Christos and Wolf, Daniel H. and Satterthwaite, Theodore D., Mitigating head motion artifact in functional connectivity MRI",
      "description": " The XCP imaging pipeline (XCP system) for  preprocessing of structural and functional data.",
      "label": "XCPENGINE: pipeline for processing of  structural and functional data.",
      "license": "Other",
      "maintainer": "Ted Satterthwaite",
      "name": "xcpengine-fw",
      "source": "https://github.com/PennBBL/xcpEngine",
      "url": "https://xcpengine.readthedocs.io/",
      "version": "1.0631"
    }
  ]
]
